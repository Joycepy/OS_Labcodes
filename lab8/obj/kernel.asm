
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 00 15 00       	mov    $0x150000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 00 15 c0       	mov    %eax,0xc0150000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 f0 14 c0       	mov    $0xc014f000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba 04 63 15 c0       	mov    $0xc0156304,%edx
c0100041:	b8 00 20 15 c0       	mov    $0xc0152000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100055:	00 
c0100056:	c7 04 24 00 20 15 c0 	movl   $0xc0152000,(%esp)
c010005d:	e8 23 4e 01 00       	call   c0114e85 <memset>

    cons_init();                // init the console
c0100062:	e8 03 20 00 00       	call   c010206a <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100067:	c7 45 f4 20 58 11 c0 	movl   $0xc0115820,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100075:	c7 04 24 3c 58 11 c0 	movl   $0xc011583c,(%esp)
c010007c:	e8 1b 03 00 00       	call   c010039c <cprintf>

    print_kerninfo();
c0100081:	e8 c5 0a 00 00       	call   c0100b4b <print_kerninfo>

    grade_backtrace();
c0100086:	e8 a7 00 00 00       	call   c0100132 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010008b:	e8 58 7d 00 00       	call   c0107de8 <pmm_init>

    pic_init();                 // init interrupt controller
c0100090:	e8 32 21 00 00       	call   c01021c7 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100095:	e8 b6 22 00 00       	call   c0102350 <idt_init>

    vmm_init();                 // init virtual memory management
c010009a:	e8 5b 3d 00 00       	call   c0103dfa <vmm_init>
    sched_init();               // init scheduler
c010009f:	e8 9f e2 00 00       	call   c010e343 <sched_init>
    proc_init();                // init process table
c01000a4:	e8 e9 de 00 00       	call   c010df92 <proc_init>
    
    ide_init();                 // init ide devices
c01000a9:	e8 4d 0f 00 00       	call   c0100ffb <ide_init>
    swap_init();                // init swap
c01000ae:	e8 61 49 00 00       	call   c0104a14 <swap_init>
    fs_init();                  // init fs
c01000b3:	e8 e8 ba 00 00       	call   c010bba0 <fs_init>
    
    clock_init();               // init clock interrupt
c01000b8:	e8 63 17 00 00       	call   c0101820 <clock_init>
    intr_enable();              // enable irq interrupt
c01000bd:	e8 40 22 00 00       	call   c0102302 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000c2:	e8 d9 e0 00 00       	call   c010e1a0 <cpu_idle>

c01000c7 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c7:	55                   	push   %ebp
c01000c8:	89 e5                	mov    %esp,%ebp
c01000ca:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000cd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000d4:	00 
c01000d5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000dc:	00 
c01000dd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000e4:	e8 a6 0e 00 00       	call   c0100f8f <mon_backtrace>
}
c01000e9:	c9                   	leave  
c01000ea:	c3                   	ret    

c01000eb <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000eb:	55                   	push   %ebp
c01000ec:	89 e5                	mov    %esp,%ebp
c01000ee:	53                   	push   %ebx
c01000ef:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000f2:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000f5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000f8:	8d 55 08             	lea    0x8(%ebp),%edx
c01000fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01000fe:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0100102:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100106:	89 54 24 04          	mov    %edx,0x4(%esp)
c010010a:	89 04 24             	mov    %eax,(%esp)
c010010d:	e8 b5 ff ff ff       	call   c01000c7 <grade_backtrace2>
}
c0100112:	83 c4 14             	add    $0x14,%esp
c0100115:	5b                   	pop    %ebx
c0100116:	5d                   	pop    %ebp
c0100117:	c3                   	ret    

c0100118 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100118:	55                   	push   %ebp
c0100119:	89 e5                	mov    %esp,%ebp
c010011b:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010011e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100121:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100125:	8b 45 08             	mov    0x8(%ebp),%eax
c0100128:	89 04 24             	mov    %eax,(%esp)
c010012b:	e8 bb ff ff ff       	call   c01000eb <grade_backtrace1>
}
c0100130:	c9                   	leave  
c0100131:	c3                   	ret    

c0100132 <grade_backtrace>:

void
grade_backtrace(void) {
c0100132:	55                   	push   %ebp
c0100133:	89 e5                	mov    %esp,%ebp
c0100135:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100138:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010013d:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100144:	ff 
c0100145:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100149:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100150:	e8 c3 ff ff ff       	call   c0100118 <grade_backtrace0>
}
c0100155:	c9                   	leave  
c0100156:	c3                   	ret    

c0100157 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100157:	55                   	push   %ebp
c0100158:	89 e5                	mov    %esp,%ebp
c010015a:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010015d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100160:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100163:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100166:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100169:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010016d:	0f b7 c0             	movzwl %ax,%eax
c0100170:	83 e0 03             	and    $0x3,%eax
c0100173:	89 c2                	mov    %eax,%edx
c0100175:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c010017a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010017e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100182:	c7 04 24 41 58 11 c0 	movl   $0xc0115841,(%esp)
c0100189:	e8 0e 02 00 00       	call   c010039c <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010018e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100192:	0f b7 d0             	movzwl %ax,%edx
c0100195:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c010019a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010019e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001a2:	c7 04 24 4f 58 11 c0 	movl   $0xc011584f,(%esp)
c01001a9:	e8 ee 01 00 00       	call   c010039c <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001ae:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001b2:	0f b7 d0             	movzwl %ax,%edx
c01001b5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001c2:	c7 04 24 5d 58 11 c0 	movl   $0xc011585d,(%esp)
c01001c9:	e8 ce 01 00 00       	call   c010039c <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001ce:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001d2:	0f b7 d0             	movzwl %ax,%edx
c01001d5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001da:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001e2:	c7 04 24 6b 58 11 c0 	movl   $0xc011586b,(%esp)
c01001e9:	e8 ae 01 00 00       	call   c010039c <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001ee:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001f2:	0f b7 d0             	movzwl %ax,%edx
c01001f5:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c01001fa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100202:	c7 04 24 79 58 11 c0 	movl   $0xc0115879,(%esp)
c0100209:	e8 8e 01 00 00       	call   c010039c <cprintf>
    round ++;
c010020e:	a1 00 20 15 c0       	mov    0xc0152000,%eax
c0100213:	83 c0 01             	add    $0x1,%eax
c0100216:	a3 00 20 15 c0       	mov    %eax,0xc0152000
}
c010021b:	c9                   	leave  
c010021c:	c3                   	ret    

c010021d <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010021d:	55                   	push   %ebp
c010021e:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100220:	5d                   	pop    %ebp
c0100221:	c3                   	ret    

c0100222 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100222:	55                   	push   %ebp
c0100223:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100225:	5d                   	pop    %ebp
c0100226:	c3                   	ret    

c0100227 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100227:	55                   	push   %ebp
c0100228:	89 e5                	mov    %esp,%ebp
c010022a:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010022d:	e8 25 ff ff ff       	call   c0100157 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100232:	c7 04 24 88 58 11 c0 	movl   $0xc0115888,(%esp)
c0100239:	e8 5e 01 00 00       	call   c010039c <cprintf>
    lab1_switch_to_user();
c010023e:	e8 da ff ff ff       	call   c010021d <lab1_switch_to_user>
    lab1_print_cur_status();
c0100243:	e8 0f ff ff ff       	call   c0100157 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100248:	c7 04 24 a8 58 11 c0 	movl   $0xc01158a8,(%esp)
c010024f:	e8 48 01 00 00       	call   c010039c <cprintf>
    lab1_switch_to_kernel();
c0100254:	e8 c9 ff ff ff       	call   c0100222 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100259:	e8 f9 fe ff ff       	call   c0100157 <lab1_print_cur_status>
}
c010025e:	c9                   	leave  
c010025f:	c3                   	ret    

c0100260 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100260:	55                   	push   %ebp
c0100261:	89 e5                	mov    %esp,%ebp
c0100263:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c0100266:	8b 45 08             	mov    0x8(%ebp),%eax
c0100269:	89 04 24             	mov    %eax,(%esp)
c010026c:	e8 be 48 01 00       	call   c0114b2f <strlen>
c0100271:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c0100274:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100277:	83 c0 01             	add    $0x1,%eax
c010027a:	89 04 24             	mov    %eax,(%esp)
c010027d:	e8 80 59 00 00       	call   c0105c02 <kmalloc>
c0100282:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100289:	74 24                	je     c01002af <strdup+0x4f>
        memcpy(dst, src, len);
c010028b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010028e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100292:	8b 45 08             	mov    0x8(%ebp),%eax
c0100295:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 c3 4c 01 00       	call   c0114f67 <memcpy>
        dst[len] = '\0';
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002aa:	01 d0                	add    %edx,%eax
c01002ac:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c01002af:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01002b2:	c9                   	leave  
c01002b3:	c3                   	ret    

c01002b4 <stradd>:

char *
stradd(const char *src1, const char *src2) {
c01002b4:	55                   	push   %ebp
c01002b5:	89 e5                	mov    %esp,%ebp
c01002b7:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c01002ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01002bd:	89 04 24             	mov    %eax,(%esp)
c01002c0:	e8 6a 48 01 00       	call   c0114b2f <strlen>
c01002c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01002cb:	89 04 24             	mov    %eax,(%esp)
c01002ce:	e8 5c 48 01 00       	call   c0114b2f <strlen>
c01002d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c01002d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002dc:	01 d0                	add    %edx,%eax
c01002de:	83 c0 01             	add    $0x1,%eax
c01002e1:	89 04 24             	mov    %eax,(%esp)
c01002e4:	e8 19 59 00 00       	call   c0105c02 <kmalloc>
c01002e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01002ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01002ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01002f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01002f6:	74 44                	je     c010033c <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01002f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01002ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0100302:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100306:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100309:	89 04 24             	mov    %eax,(%esp)
c010030c:	e8 56 4c 01 00       	call   c0114f67 <memcpy>
c0100311:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100314:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c0100317:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010031a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100325:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100328:	89 04 24             	mov    %eax,(%esp)
c010032b:	e8 37 4c 01 00       	call   c0114f67 <memcpy>
c0100330:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100333:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c0100336:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100339:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c010033c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c010033f:	c9                   	leave  
c0100340:	c3                   	ret    

c0100341 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100341:	55                   	push   %ebp
c0100342:	89 e5                	mov    %esp,%ebp
c0100344:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100347:	8b 45 08             	mov    0x8(%ebp),%eax
c010034a:	89 04 24             	mov    %eax,(%esp)
c010034d:	e8 44 1d 00 00       	call   c0102096 <cons_putc>
    (*cnt) ++;
c0100352:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100355:	8b 00                	mov    (%eax),%eax
c0100357:	8d 50 01             	lea    0x1(%eax),%edx
c010035a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010035d:	89 10                	mov    %edx,(%eax)
}
c010035f:	c9                   	leave  
c0100360:	c3                   	ret    

c0100361 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100361:	55                   	push   %ebp
c0100362:	89 e5                	mov    %esp,%ebp
c0100364:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c010036e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100371:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100375:	8b 45 08             	mov    0x8(%ebp),%eax
c0100378:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010037c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010037f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100383:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c010038a:	ff 
c010038b:	c7 04 24 41 03 10 c0 	movl   $0xc0100341,(%esp)
c0100392:	e8 5c 4e 01 00       	call   c01151f3 <vprintfmt>
    return cnt;
c0100397:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010039a:	c9                   	leave  
c010039b:	c3                   	ret    

c010039c <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c010039c:	55                   	push   %ebp
c010039d:	89 e5                	mov    %esp,%ebp
c010039f:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01003a2:	8d 45 0c             	lea    0xc(%ebp),%eax
c01003a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01003a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003af:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b2:	89 04 24             	mov    %eax,(%esp)
c01003b5:	e8 a7 ff ff ff       	call   c0100361 <vcprintf>
c01003ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01003bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003c0:	c9                   	leave  
c01003c1:	c3                   	ret    

c01003c2 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01003c2:	55                   	push   %ebp
c01003c3:	89 e5                	mov    %esp,%ebp
c01003c5:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c01003c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01003cb:	89 04 24             	mov    %eax,(%esp)
c01003ce:	e8 c3 1c 00 00       	call   c0102096 <cons_putc>
}
c01003d3:	c9                   	leave  
c01003d4:	c3                   	ret    

c01003d5 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003d5:	55                   	push   %ebp
c01003d6:	89 e5                	mov    %esp,%ebp
c01003d8:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003e2:	eb 13                	jmp    c01003f7 <cputs+0x22>
        cputch(c, &cnt);
c01003e4:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003e8:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ef:	89 04 24             	mov    %eax,(%esp)
c01003f2:	e8 4a ff ff ff       	call   c0100341 <cputch>
    while ((c = *str ++) != '\0') {
c01003f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01003fa:	8d 50 01             	lea    0x1(%eax),%edx
c01003fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100400:	0f b6 00             	movzbl (%eax),%eax
c0100403:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100406:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010040a:	75 d8                	jne    c01003e4 <cputs+0xf>
    }
    cputch('\n', &cnt);
c010040c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010040f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100413:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010041a:	e8 22 ff ff ff       	call   c0100341 <cputch>
    return cnt;
c010041f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100422:	c9                   	leave  
c0100423:	c3                   	ret    

c0100424 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100424:	55                   	push   %ebp
c0100425:	89 e5                	mov    %esp,%ebp
c0100427:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c010042a:	e8 a3 1c 00 00       	call   c01020d2 <cons_getc>
c010042f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100432:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100436:	74 f2                	je     c010042a <getchar+0x6>
        /* do nothing */;
    return c;
c0100438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010043b:	c9                   	leave  
c010043c:	c3                   	ret    

c010043d <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010043d:	55                   	push   %ebp
c010043e:	89 e5                	mov    %esp,%ebp
c0100440:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100443:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100447:	74 13                	je     c010045c <readline+0x1f>
        cprintf("%s", prompt);
c0100449:	8b 45 08             	mov    0x8(%ebp),%eax
c010044c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100450:	c7 04 24 c7 58 11 c0 	movl   $0xc01158c7,(%esp)
c0100457:	e8 40 ff ff ff       	call   c010039c <cprintf>
    }
    int i = 0, c;
c010045c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100463:	e8 bc ff ff ff       	call   c0100424 <getchar>
c0100468:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010046b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010046f:	79 07                	jns    c0100478 <readline+0x3b>
            return NULL;
c0100471:	b8 00 00 00 00       	mov    $0x0,%eax
c0100476:	eb 79                	jmp    c01004f1 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100478:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010047c:	7e 28                	jle    c01004a6 <readline+0x69>
c010047e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100485:	7f 1f                	jg     c01004a6 <readline+0x69>
            cputchar(c);
c0100487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010048a:	89 04 24             	mov    %eax,(%esp)
c010048d:	e8 30 ff ff ff       	call   c01003c2 <cputchar>
            buf[i ++] = c;
c0100492:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100495:	8d 50 01             	lea    0x1(%eax),%edx
c0100498:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010049b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049e:	88 90 20 20 15 c0    	mov    %dl,-0x3feadfe0(%eax)
c01004a4:	eb 46                	jmp    c01004ec <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01004a6:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01004aa:	75 17                	jne    c01004c3 <readline+0x86>
c01004ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004b0:	7e 11                	jle    c01004c3 <readline+0x86>
            cputchar(c);
c01004b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004b5:	89 04 24             	mov    %eax,(%esp)
c01004b8:	e8 05 ff ff ff       	call   c01003c2 <cputchar>
            i --;
c01004bd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01004c1:	eb 29                	jmp    c01004ec <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01004c3:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01004c7:	74 06                	je     c01004cf <readline+0x92>
c01004c9:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01004cd:	75 1d                	jne    c01004ec <readline+0xaf>
            cputchar(c);
c01004cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d2:	89 04 24             	mov    %eax,(%esp)
c01004d5:	e8 e8 fe ff ff       	call   c01003c2 <cputchar>
            buf[i] = '\0';
c01004da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004dd:	05 20 20 15 c0       	add    $0xc0152020,%eax
c01004e2:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01004e5:	b8 20 20 15 c0       	mov    $0xc0152020,%eax
c01004ea:	eb 05                	jmp    c01004f1 <readline+0xb4>
        }
    }
c01004ec:	e9 72 ff ff ff       	jmp    c0100463 <readline+0x26>
}
c01004f1:	c9                   	leave  
c01004f2:	c3                   	ret    

c01004f3 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01004f3:	55                   	push   %ebp
c01004f4:	89 e5                	mov    %esp,%ebp
c01004f6:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c01004f9:	a1 20 24 15 c0       	mov    0xc0152420,%eax
c01004fe:	85 c0                	test   %eax,%eax
c0100500:	74 02                	je     c0100504 <__panic+0x11>
        goto panic_dead;
c0100502:	eb 59                	jmp    c010055d <__panic+0x6a>
    }
    is_panic = 1;
c0100504:	c7 05 20 24 15 c0 01 	movl   $0x1,0xc0152420
c010050b:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c010050e:	8d 45 14             	lea    0x14(%ebp),%eax
c0100511:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100514:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100517:	89 44 24 08          	mov    %eax,0x8(%esp)
c010051b:	8b 45 08             	mov    0x8(%ebp),%eax
c010051e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100522:	c7 04 24 ca 58 11 c0 	movl   $0xc01158ca,(%esp)
c0100529:	e8 6e fe ff ff       	call   c010039c <cprintf>
    vcprintf(fmt, ap);
c010052e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100531:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100535:	8b 45 10             	mov    0x10(%ebp),%eax
c0100538:	89 04 24             	mov    %eax,(%esp)
c010053b:	e8 21 fe ff ff       	call   c0100361 <vcprintf>
    cprintf("\n");
c0100540:	c7 04 24 e6 58 11 c0 	movl   $0xc01158e6,(%esp)
c0100547:	e8 50 fe ff ff       	call   c010039c <cprintf>
    
    cprintf("stack trackback:\n");
c010054c:	c7 04 24 e8 58 11 c0 	movl   $0xc01158e8,(%esp)
c0100553:	e8 44 fe ff ff       	call   c010039c <cprintf>
    print_stackframe();
c0100558:	e8 38 07 00 00       	call   c0100c95 <print_stackframe>
    
    va_end(ap);

panic_dead:
    intr_disable();
c010055d:	e8 a6 1d 00 00       	call   c0102308 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100562:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100569:	e8 52 09 00 00       	call   c0100ec0 <kmonitor>
    }
c010056e:	eb f2                	jmp    c0100562 <__panic+0x6f>

c0100570 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100570:	55                   	push   %ebp
c0100571:	89 e5                	mov    %esp,%ebp
c0100573:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100576:	8d 45 14             	lea    0x14(%ebp),%eax
c0100579:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100583:	8b 45 08             	mov    0x8(%ebp),%eax
c0100586:	89 44 24 04          	mov    %eax,0x4(%esp)
c010058a:	c7 04 24 fa 58 11 c0 	movl   $0xc01158fa,(%esp)
c0100591:	e8 06 fe ff ff       	call   c010039c <cprintf>
    vcprintf(fmt, ap);
c0100596:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100599:	89 44 24 04          	mov    %eax,0x4(%esp)
c010059d:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a0:	89 04 24             	mov    %eax,(%esp)
c01005a3:	e8 b9 fd ff ff       	call   c0100361 <vcprintf>
    cprintf("\n");
c01005a8:	c7 04 24 e6 58 11 c0 	movl   $0xc01158e6,(%esp)
c01005af:	e8 e8 fd ff ff       	call   c010039c <cprintf>
    va_end(ap);
}
c01005b4:	c9                   	leave  
c01005b5:	c3                   	ret    

c01005b6 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01005b6:	55                   	push   %ebp
c01005b7:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01005b9:	a1 20 24 15 c0       	mov    0xc0152420,%eax
}
c01005be:	5d                   	pop    %ebp
c01005bf:	c3                   	ret    

c01005c0 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01005c0:	55                   	push   %ebp
c01005c1:	89 e5                	mov    %esp,%ebp
c01005c3:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01005c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005c9:	8b 00                	mov    (%eax),%eax
c01005cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01005d1:	8b 00                	mov    (%eax),%eax
c01005d3:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01005dd:	e9 d2 00 00 00       	jmp    c01006b4 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01005e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01005e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005e8:	01 d0                	add    %edx,%eax
c01005ea:	89 c2                	mov    %eax,%edx
c01005ec:	c1 ea 1f             	shr    $0x1f,%edx
c01005ef:	01 d0                	add    %edx,%eax
c01005f1:	d1 f8                	sar    %eax
c01005f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01005f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005f9:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005fc:	eb 04                	jmp    c0100602 <stab_binsearch+0x42>
            m --;
c01005fe:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
        while (m >= l && stabs[m].n_type != type) {
c0100602:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100605:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100608:	7c 1f                	jl     c0100629 <stab_binsearch+0x69>
c010060a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010060d:	89 d0                	mov    %edx,%eax
c010060f:	01 c0                	add    %eax,%eax
c0100611:	01 d0                	add    %edx,%eax
c0100613:	c1 e0 02             	shl    $0x2,%eax
c0100616:	89 c2                	mov    %eax,%edx
c0100618:	8b 45 08             	mov    0x8(%ebp),%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100621:	0f b6 c0             	movzbl %al,%eax
c0100624:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100627:	75 d5                	jne    c01005fe <stab_binsearch+0x3e>
        }
        if (m < l) {    // no match in [l, m]
c0100629:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010062c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010062f:	7d 0b                	jge    c010063c <stab_binsearch+0x7c>
            l = true_m + 1;
c0100631:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100634:	83 c0 01             	add    $0x1,%eax
c0100637:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010063a:	eb 78                	jmp    c01006b4 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010063c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100643:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100646:	89 d0                	mov    %edx,%eax
c0100648:	01 c0                	add    %eax,%eax
c010064a:	01 d0                	add    %edx,%eax
c010064c:	c1 e0 02             	shl    $0x2,%eax
c010064f:	89 c2                	mov    %eax,%edx
c0100651:	8b 45 08             	mov    0x8(%ebp),%eax
c0100654:	01 d0                	add    %edx,%eax
c0100656:	8b 40 08             	mov    0x8(%eax),%eax
c0100659:	3b 45 18             	cmp    0x18(%ebp),%eax
c010065c:	73 13                	jae    c0100671 <stab_binsearch+0xb1>
            *region_left = m;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100664:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100669:	83 c0 01             	add    $0x1,%eax
c010066c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010066f:	eb 43                	jmp    c01006b4 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100671:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100674:	89 d0                	mov    %edx,%eax
c0100676:	01 c0                	add    %eax,%eax
c0100678:	01 d0                	add    %edx,%eax
c010067a:	c1 e0 02             	shl    $0x2,%eax
c010067d:	89 c2                	mov    %eax,%edx
c010067f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100682:	01 d0                	add    %edx,%eax
c0100684:	8b 40 08             	mov    0x8(%eax),%eax
c0100687:	3b 45 18             	cmp    0x18(%ebp),%eax
c010068a:	76 16                	jbe    c01006a2 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010068c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010068f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100692:	8b 45 10             	mov    0x10(%ebp),%eax
c0100695:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c0100697:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010069a:	83 e8 01             	sub    $0x1,%eax
c010069d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01006a0:	eb 12                	jmp    c01006b4 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01006a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006a8:	89 10                	mov    %edx,(%eax)
            l = m;
c01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01006b0:	83 45 18 01          	addl   $0x1,0x18(%ebp)
    while (l <= r) {
c01006b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01006b7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01006ba:	0f 8e 22 ff ff ff    	jle    c01005e2 <stab_binsearch+0x22>
        }
    }

    if (!any_matches) {
c01006c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01006c4:	75 0f                	jne    c01006d5 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006c9:	8b 00                	mov    (%eax),%eax
c01006cb:	8d 50 ff             	lea    -0x1(%eax),%edx
c01006ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d1:	89 10                	mov    %edx,(%eax)
c01006d3:	eb 3f                	jmp    c0100714 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01006d5:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d8:	8b 00                	mov    (%eax),%eax
c01006da:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01006dd:	eb 04                	jmp    c01006e3 <stab_binsearch+0x123>
c01006df:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01006e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006e6:	8b 00                	mov    (%eax),%eax
c01006e8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01006eb:	7d 1f                	jge    c010070c <stab_binsearch+0x14c>
c01006ed:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006f0:	89 d0                	mov    %edx,%eax
c01006f2:	01 c0                	add    %eax,%eax
c01006f4:	01 d0                	add    %edx,%eax
c01006f6:	c1 e0 02             	shl    $0x2,%eax
c01006f9:	89 c2                	mov    %eax,%edx
c01006fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01006fe:	01 d0                	add    %edx,%eax
c0100700:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100704:	0f b6 c0             	movzbl %al,%eax
c0100707:	3b 45 14             	cmp    0x14(%ebp),%eax
c010070a:	75 d3                	jne    c01006df <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010070c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010070f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100712:	89 10                	mov    %edx,(%eax)
    }
}
c0100714:	c9                   	leave  
c0100715:	c3                   	ret    

c0100716 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100716:	55                   	push   %ebp
c0100717:	89 e5                	mov    %esp,%ebp
c0100719:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010071c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010071f:	c7 00 18 59 11 c0    	movl   $0xc0115918,(%eax)
    info->eip_line = 0;
c0100725:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100728:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010072f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100732:	c7 40 08 18 59 11 c0 	movl   $0xc0115918,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100739:	8b 45 0c             	mov    0xc(%ebp),%eax
c010073c:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100743:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100746:	8b 55 08             	mov    0x8(%ebp),%edx
c0100749:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010074c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010074f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100756:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010075d:	76 21                	jbe    c0100780 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c010075f:	c7 45 f4 60 9f 11 c0 	movl   $0xc0119f60,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100766:	c7 45 f0 d4 f8 13 c0 	movl   $0xc013f8d4,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010076d:	c7 45 ec d5 f8 13 c0 	movl   $0xc013f8d5,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100774:	c7 45 e8 9b c0 14 c0 	movl   $0xc014c09b,-0x18(%ebp)
c010077b:	e9 ea 00 00 00       	jmp    c010086a <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100780:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100787:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010078c:	85 c0                	test   %eax,%eax
c010078e:	74 11                	je     c01007a1 <debuginfo_eip+0x8b>
c0100790:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0100795:	8b 40 18             	mov    0x18(%eax),%eax
c0100798:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010079b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010079f:	75 0a                	jne    c01007ab <debuginfo_eip+0x95>
            return -1;
c01007a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007a6:	e9 9e 03 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01007ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007ae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01007b5:	00 
c01007b6:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01007bd:	00 
c01007be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01007c5:	89 04 24             	mov    %eax,(%esp)
c01007c8:	e8 95 3f 00 00       	call   c0104762 <user_mem_check>
c01007cd:	85 c0                	test   %eax,%eax
c01007cf:	75 0a                	jne    c01007db <debuginfo_eip+0xc5>
            return -1;
c01007d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007d6:	e9 6e 03 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c01007db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007de:	8b 00                	mov    (%eax),%eax
c01007e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01007e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007e6:	8b 40 04             	mov    0x4(%eax),%eax
c01007e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01007ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007ef:	8b 40 08             	mov    0x8(%eax),%eax
c01007f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01007f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007f8:	8b 40 0c             	mov    0xc(%eax),%eax
c01007fb:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01007fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	29 c2                	sub    %eax,%edx
c0100806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100809:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100810:	00 
c0100811:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100815:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100819:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010081c:	89 04 24             	mov    %eax,(%esp)
c010081f:	e8 3e 3f 00 00       	call   c0104762 <user_mem_check>
c0100824:	85 c0                	test   %eax,%eax
c0100826:	75 0a                	jne    c0100832 <debuginfo_eip+0x11c>
            return -1;
c0100828:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010082d:	e9 17 03 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100832:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100835:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100838:	29 c2                	sub    %eax,%edx
c010083a:	89 d0                	mov    %edx,%eax
c010083c:	89 c2                	mov    %eax,%edx
c010083e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100841:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100848:	00 
c0100849:	89 54 24 08          	mov    %edx,0x8(%esp)
c010084d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100851:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100854:	89 04 24             	mov    %eax,(%esp)
c0100857:	e8 06 3f 00 00       	call   c0104762 <user_mem_check>
c010085c:	85 c0                	test   %eax,%eax
c010085e:	75 0a                	jne    c010086a <debuginfo_eip+0x154>
            return -1;
c0100860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100865:	e9 df 02 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010086a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010086d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100870:	76 0d                	jbe    c010087f <debuginfo_eip+0x169>
c0100872:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100875:	83 e8 01             	sub    $0x1,%eax
c0100878:	0f b6 00             	movzbl (%eax),%eax
c010087b:	84 c0                	test   %al,%al
c010087d:	74 0a                	je     c0100889 <debuginfo_eip+0x173>
        return -1;
c010087f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100884:	e9 c0 02 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100889:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100890:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	29 c2                	sub    %eax,%edx
c0100898:	89 d0                	mov    %edx,%eax
c010089a:	c1 f8 02             	sar    $0x2,%eax
c010089d:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01008a3:	83 e8 01             	sub    $0x1,%eax
c01008a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01008a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01008ac:	89 44 24 10          	mov    %eax,0x10(%esp)
c01008b0:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01008b7:	00 
c01008b8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01008bb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01008bf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01008c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01008c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008c9:	89 04 24             	mov    %eax,(%esp)
c01008cc:	e8 ef fc ff ff       	call   c01005c0 <stab_binsearch>
    if (lfile == 0)
c01008d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008d4:	85 c0                	test   %eax,%eax
c01008d6:	75 0a                	jne    c01008e2 <debuginfo_eip+0x1cc>
        return -1;
c01008d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008dd:	e9 67 02 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01008e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01008e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01008ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01008f1:	89 44 24 10          	mov    %eax,0x10(%esp)
c01008f5:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c01008fc:	00 
c01008fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100900:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100904:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100907:	89 44 24 04          	mov    %eax,0x4(%esp)
c010090b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010090e:	89 04 24             	mov    %eax,(%esp)
c0100911:	e8 aa fc ff ff       	call   c01005c0 <stab_binsearch>

    if (lfun <= rfun) {
c0100916:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100919:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010091c:	39 c2                	cmp    %eax,%edx
c010091e:	7f 7c                	jg     c010099c <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100920:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100923:	89 c2                	mov    %eax,%edx
c0100925:	89 d0                	mov    %edx,%eax
c0100927:	01 c0                	add    %eax,%eax
c0100929:	01 d0                	add    %edx,%eax
c010092b:	c1 e0 02             	shl    $0x2,%eax
c010092e:	89 c2                	mov    %eax,%edx
c0100930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100933:	01 d0                	add    %edx,%eax
c0100935:	8b 10                	mov    (%eax),%edx
c0100937:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010093a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010093d:	29 c1                	sub    %eax,%ecx
c010093f:	89 c8                	mov    %ecx,%eax
c0100941:	39 c2                	cmp    %eax,%edx
c0100943:	73 22                	jae    c0100967 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100945:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100948:	89 c2                	mov    %eax,%edx
c010094a:	89 d0                	mov    %edx,%eax
c010094c:	01 c0                	add    %eax,%eax
c010094e:	01 d0                	add    %edx,%eax
c0100950:	c1 e0 02             	shl    $0x2,%eax
c0100953:	89 c2                	mov    %eax,%edx
c0100955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100958:	01 d0                	add    %edx,%eax
c010095a:	8b 10                	mov    (%eax),%edx
c010095c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010095f:	01 c2                	add    %eax,%edx
c0100961:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100964:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100967:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010096a:	89 c2                	mov    %eax,%edx
c010096c:	89 d0                	mov    %edx,%eax
c010096e:	01 c0                	add    %eax,%eax
c0100970:	01 d0                	add    %edx,%eax
c0100972:	c1 e0 02             	shl    $0x2,%eax
c0100975:	89 c2                	mov    %eax,%edx
c0100977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	8b 50 08             	mov    0x8(%eax),%edx
c010097f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100982:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100985:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100988:	8b 40 10             	mov    0x10(%eax),%eax
c010098b:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010098e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100991:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100994:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100997:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010099a:	eb 15                	jmp    c01009b1 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010099c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010099f:	8b 55 08             	mov    0x8(%ebp),%edx
c01009a2:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01009a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01009ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01009ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01009b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b4:	8b 40 08             	mov    0x8(%eax),%eax
c01009b7:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01009be:	00 
c01009bf:	89 04 24             	mov    %eax,(%esp)
c01009c2:	e8 32 43 01 00       	call   c0114cf9 <strfind>
c01009c7:	89 c2                	mov    %eax,%edx
c01009c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009cc:	8b 40 08             	mov    0x8(%eax),%eax
c01009cf:	29 c2                	sub    %eax,%edx
c01009d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d4:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01009d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01009da:	89 44 24 10          	mov    %eax,0x10(%esp)
c01009de:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c01009e5:	00 
c01009e6:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01009e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01009ed:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01009f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f7:	89 04 24             	mov    %eax,(%esp)
c01009fa:	e8 c1 fb ff ff       	call   c01005c0 <stab_binsearch>
    if (lline <= rline) {
c01009ff:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a02:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100a05:	39 c2                	cmp    %eax,%edx
c0100a07:	7f 24                	jg     c0100a2d <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100a09:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100a0c:	89 c2                	mov    %eax,%edx
c0100a0e:	89 d0                	mov    %edx,%eax
c0100a10:	01 c0                	add    %eax,%eax
c0100a12:	01 d0                	add    %edx,%eax
c0100a14:	c1 e0 02             	shl    $0x2,%eax
c0100a17:	89 c2                	mov    %eax,%edx
c0100a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a1c:	01 d0                	add    %edx,%eax
c0100a1e:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100a22:	0f b7 d0             	movzwl %ax,%edx
c0100a25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a28:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100a2b:	eb 13                	jmp    c0100a40 <debuginfo_eip+0x32a>
        return -1;
c0100a2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100a32:	e9 12 01 00 00       	jmp    c0100b49 <debuginfo_eip+0x433>
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100a37:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3a:	83 e8 01             	sub    $0x1,%eax
c0100a3d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while (lline >= lfile
c0100a40:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a46:	39 c2                	cmp    %eax,%edx
c0100a48:	7c 56                	jl     c0100aa0 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100a4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a4d:	89 c2                	mov    %eax,%edx
c0100a4f:	89 d0                	mov    %edx,%eax
c0100a51:	01 c0                	add    %eax,%eax
c0100a53:	01 d0                	add    %edx,%eax
c0100a55:	c1 e0 02             	shl    $0x2,%eax
c0100a58:	89 c2                	mov    %eax,%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a63:	3c 84                	cmp    $0x84,%al
c0100a65:	74 39                	je     c0100aa0 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100a67:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a6a:	89 c2                	mov    %eax,%edx
c0100a6c:	89 d0                	mov    %edx,%eax
c0100a6e:	01 c0                	add    %eax,%eax
c0100a70:	01 d0                	add    %edx,%eax
c0100a72:	c1 e0 02             	shl    $0x2,%eax
c0100a75:	89 c2                	mov    %eax,%edx
c0100a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a7a:	01 d0                	add    %edx,%eax
c0100a7c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a80:	3c 64                	cmp    $0x64,%al
c0100a82:	75 b3                	jne    c0100a37 <debuginfo_eip+0x321>
c0100a84:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a87:	89 c2                	mov    %eax,%edx
c0100a89:	89 d0                	mov    %edx,%eax
c0100a8b:	01 c0                	add    %eax,%eax
c0100a8d:	01 d0                	add    %edx,%eax
c0100a8f:	c1 e0 02             	shl    $0x2,%eax
c0100a92:	89 c2                	mov    %eax,%edx
c0100a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a97:	01 d0                	add    %edx,%eax
c0100a99:	8b 40 08             	mov    0x8(%eax),%eax
c0100a9c:	85 c0                	test   %eax,%eax
c0100a9e:	74 97                	je     c0100a37 <debuginfo_eip+0x321>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100aa0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100aa3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100aa6:	39 c2                	cmp    %eax,%edx
c0100aa8:	7c 46                	jl     c0100af0 <debuginfo_eip+0x3da>
c0100aaa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100aad:	89 c2                	mov    %eax,%edx
c0100aaf:	89 d0                	mov    %edx,%eax
c0100ab1:	01 c0                	add    %eax,%eax
c0100ab3:	01 d0                	add    %edx,%eax
c0100ab5:	c1 e0 02             	shl    $0x2,%eax
c0100ab8:	89 c2                	mov    %eax,%edx
c0100aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100abd:	01 d0                	add    %edx,%eax
c0100abf:	8b 10                	mov    (%eax),%edx
c0100ac1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100ac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100ac7:	29 c1                	sub    %eax,%ecx
c0100ac9:	89 c8                	mov    %ecx,%eax
c0100acb:	39 c2                	cmp    %eax,%edx
c0100acd:	73 21                	jae    c0100af0 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100acf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ad2:	89 c2                	mov    %eax,%edx
c0100ad4:	89 d0                	mov    %edx,%eax
c0100ad6:	01 c0                	add    %eax,%eax
c0100ad8:	01 d0                	add    %edx,%eax
c0100ada:	c1 e0 02             	shl    $0x2,%eax
c0100add:	89 c2                	mov    %eax,%edx
c0100adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae2:	01 d0                	add    %edx,%eax
c0100ae4:	8b 10                	mov    (%eax),%edx
c0100ae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100ae9:	01 c2                	add    %eax,%edx
c0100aeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100aee:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100af0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100af3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100af6:	39 c2                	cmp    %eax,%edx
c0100af8:	7d 4a                	jge    c0100b44 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100afa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100afd:	83 c0 01             	add    $0x1,%eax
c0100b00:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100b03:	eb 18                	jmp    c0100b1d <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100b05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100b08:	8b 40 14             	mov    0x14(%eax),%eax
c0100b0b:	8d 50 01             	lea    0x1(%eax),%edx
c0100b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100b11:	89 50 14             	mov    %edx,0x14(%eax)
             lline ++) {
c0100b14:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100b17:	83 c0 01             	add    $0x1,%eax
c0100b1a:	89 45 cc             	mov    %eax,-0x34(%ebp)
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100b1d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100b20:	8b 45 d0             	mov    -0x30(%ebp),%eax
        for (lline = lfun + 1;
c0100b23:	39 c2                	cmp    %eax,%edx
c0100b25:	7d 1d                	jge    c0100b44 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100b27:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100b2a:	89 c2                	mov    %eax,%edx
c0100b2c:	89 d0                	mov    %edx,%eax
c0100b2e:	01 c0                	add    %eax,%eax
c0100b30:	01 d0                	add    %edx,%eax
c0100b32:	c1 e0 02             	shl    $0x2,%eax
c0100b35:	89 c2                	mov    %eax,%edx
c0100b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b3a:	01 d0                	add    %edx,%eax
c0100b3c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100b40:	3c a0                	cmp    $0xa0,%al
c0100b42:	74 c1                	je     c0100b05 <debuginfo_eip+0x3ef>
        }
    }
    return 0;
c0100b44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100b49:	c9                   	leave  
c0100b4a:	c3                   	ret    

c0100b4b <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100b4b:	55                   	push   %ebp
c0100b4c:	89 e5                	mov    %esp,%ebp
c0100b4e:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100b51:	c7 04 24 22 59 11 c0 	movl   $0xc0115922,(%esp)
c0100b58:	e8 3f f8 ff ff       	call   c010039c <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b5d:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c0100b64:	c0 
c0100b65:	c7 04 24 3b 59 11 c0 	movl   $0xc011593b,(%esp)
c0100b6c:	e8 2b f8 ff ff       	call   c010039c <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b71:	c7 44 24 04 12 58 11 	movl   $0xc0115812,0x4(%esp)
c0100b78:	c0 
c0100b79:	c7 04 24 53 59 11 c0 	movl   $0xc0115953,(%esp)
c0100b80:	e8 17 f8 ff ff       	call   c010039c <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b85:	c7 44 24 04 00 20 15 	movl   $0xc0152000,0x4(%esp)
c0100b8c:	c0 
c0100b8d:	c7 04 24 6b 59 11 c0 	movl   $0xc011596b,(%esp)
c0100b94:	e8 03 f8 ff ff       	call   c010039c <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100b99:	c7 44 24 04 04 63 15 	movl   $0xc0156304,0x4(%esp)
c0100ba0:	c0 
c0100ba1:	c7 04 24 83 59 11 c0 	movl   $0xc0115983,(%esp)
c0100ba8:	e8 ef f7 ff ff       	call   c010039c <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100bad:	b8 04 63 15 c0       	mov    $0xc0156304,%eax
c0100bb2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100bb8:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100bbd:	29 c2                	sub    %eax,%edx
c0100bbf:	89 d0                	mov    %edx,%eax
c0100bc1:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100bc7:	85 c0                	test   %eax,%eax
c0100bc9:	0f 48 c2             	cmovs  %edx,%eax
c0100bcc:	c1 f8 0a             	sar    $0xa,%eax
c0100bcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bd3:	c7 04 24 9c 59 11 c0 	movl   $0xc011599c,(%esp)
c0100bda:	e8 bd f7 ff ff       	call   c010039c <cprintf>
}
c0100bdf:	c9                   	leave  
c0100be0:	c3                   	ret    

c0100be1 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100be1:	55                   	push   %ebp
c0100be2:	89 e5                	mov    %esp,%ebp
c0100be4:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100bea:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100bed:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bf4:	89 04 24             	mov    %eax,(%esp)
c0100bf7:	e8 1a fb ff ff       	call   c0100716 <debuginfo_eip>
c0100bfc:	85 c0                	test   %eax,%eax
c0100bfe:	74 15                	je     c0100c15 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100c00:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c07:	c7 04 24 c6 59 11 c0 	movl   $0xc01159c6,(%esp)
c0100c0e:	e8 89 f7 ff ff       	call   c010039c <cprintf>
c0100c13:	eb 6d                	jmp    c0100c82 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100c15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c1c:	eb 1c                	jmp    c0100c3a <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100c1e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c24:	01 d0                	add    %edx,%eax
c0100c26:	0f b6 00             	movzbl (%eax),%eax
c0100c29:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100c2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c32:	01 ca                	add    %ecx,%edx
c0100c34:	88 02                	mov    %al,(%edx)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100c36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100c40:	7f dc                	jg     c0100c1e <print_debuginfo+0x3d>
        }
        fnname[j] = '\0';
c0100c42:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c4b:	01 d0                	add    %edx,%eax
c0100c4d:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100c50:	8b 45 ec             	mov    -0x14(%ebp),%eax
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c53:	8b 55 08             	mov    0x8(%ebp),%edx
c0100c56:	89 d1                	mov    %edx,%ecx
c0100c58:	29 c1                	sub    %eax,%ecx
c0100c5a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100c5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100c60:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100c64:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100c6a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100c6e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100c72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c76:	c7 04 24 e2 59 11 c0 	movl   $0xc01159e2,(%esp)
c0100c7d:	e8 1a f7 ff ff       	call   c010039c <cprintf>
    }
}
c0100c82:	c9                   	leave  
c0100c83:	c3                   	ret    

c0100c84 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100c84:	55                   	push   %ebp
c0100c85:	89 e5                	mov    %esp,%ebp
c0100c87:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100c8a:	8b 45 04             	mov    0x4(%ebp),%eax
c0100c8d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100c93:	c9                   	leave  
c0100c94:	c3                   	ret    

c0100c95 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100c95:	55                   	push   %ebp
c0100c96:	89 e5                	mov    %esp,%ebp
c0100c98:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100c9b:	89 e8                	mov    %ebp,%eax
c0100c9d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ca0:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ca6:	e8 d9 ff ff ff       	call   c0100c84 <read_eip>
c0100cab:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100cae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100cb5:	e9 88 00 00 00       	jmp    c0100d42 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100cbd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100cc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cc4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cc8:	c7 04 24 f4 59 11 c0 	movl   $0xc01159f4,(%esp)
c0100ccf:	e8 c8 f6 ff ff       	call   c010039c <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd7:	83 c0 08             	add    $0x8,%eax
c0100cda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100cdd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100ce4:	eb 25                	jmp    c0100d0b <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100ce6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ce9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100cf3:	01 d0                	add    %edx,%eax
c0100cf5:	8b 00                	mov    (%eax),%eax
c0100cf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cfb:	c7 04 24 10 5a 11 c0 	movl   $0xc0115a10,(%esp)
c0100d02:	e8 95 f6 ff ff       	call   c010039c <cprintf>
        for (j = 0; j < 4; j ++) {
c0100d07:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100d0b:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100d0f:	7e d5                	jle    c0100ce6 <print_stackframe+0x51>
        }
        cprintf("\n");
c0100d11:	c7 04 24 18 5a 11 c0 	movl   $0xc0115a18,(%esp)
c0100d18:	e8 7f f6 ff ff       	call   c010039c <cprintf>
        print_debuginfo(eip - 1);
c0100d1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100d20:	83 e8 01             	sub    $0x1,%eax
c0100d23:	89 04 24             	mov    %eax,(%esp)
c0100d26:	e8 b6 fe ff ff       	call   c0100be1 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d2e:	83 c0 04             	add    $0x4,%eax
c0100d31:	8b 00                	mov    (%eax),%eax
c0100d33:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d39:	8b 00                	mov    (%eax),%eax
c0100d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100d3e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100d42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d46:	74 0a                	je     c0100d52 <print_stackframe+0xbd>
c0100d48:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100d4c:	0f 8e 68 ff ff ff    	jle    c0100cba <print_stackframe+0x25>
    }
}
c0100d52:	c9                   	leave  
c0100d53:	c3                   	ret    

c0100d54 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100d54:	55                   	push   %ebp
c0100d55:	89 e5                	mov    %esp,%ebp
c0100d57:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100d5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d61:	eb 0c                	jmp    c0100d6f <parse+0x1b>
            *buf ++ = '\0';
c0100d63:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d66:	8d 50 01             	lea    0x1(%eax),%edx
c0100d69:	89 55 08             	mov    %edx,0x8(%ebp)
c0100d6c:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d72:	0f b6 00             	movzbl (%eax),%eax
c0100d75:	84 c0                	test   %al,%al
c0100d77:	74 1d                	je     c0100d96 <parse+0x42>
c0100d79:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d7c:	0f b6 00             	movzbl (%eax),%eax
c0100d7f:	0f be c0             	movsbl %al,%eax
c0100d82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d86:	c7 04 24 9c 5a 11 c0 	movl   $0xc0115a9c,(%esp)
c0100d8d:	e8 34 3f 01 00       	call   c0114cc6 <strchr>
c0100d92:	85 c0                	test   %eax,%eax
c0100d94:	75 cd                	jne    c0100d63 <parse+0xf>
        }
        if (*buf == '\0') {
c0100d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d99:	0f b6 00             	movzbl (%eax),%eax
c0100d9c:	84 c0                	test   %al,%al
c0100d9e:	75 02                	jne    c0100da2 <parse+0x4e>
            break;
c0100da0:	eb 67                	jmp    c0100e09 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100da2:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100da6:	75 14                	jne    c0100dbc <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100da8:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100daf:	00 
c0100db0:	c7 04 24 a1 5a 11 c0 	movl   $0xc0115aa1,(%esp)
c0100db7:	e8 e0 f5 ff ff       	call   c010039c <cprintf>
        }
        argv[argc ++] = buf;
c0100dbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dbf:	8d 50 01             	lea    0x1(%eax),%edx
c0100dc2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100dc5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100dcf:	01 c2                	add    %eax,%edx
c0100dd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dd4:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100dd6:	eb 04                	jmp    c0100ddc <parse+0x88>
            buf ++;
c0100dd8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ddc:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ddf:	0f b6 00             	movzbl (%eax),%eax
c0100de2:	84 c0                	test   %al,%al
c0100de4:	74 1d                	je     c0100e03 <parse+0xaf>
c0100de6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100de9:	0f b6 00             	movzbl (%eax),%eax
c0100dec:	0f be c0             	movsbl %al,%eax
c0100def:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100df3:	c7 04 24 9c 5a 11 c0 	movl   $0xc0115a9c,(%esp)
c0100dfa:	e8 c7 3e 01 00       	call   c0114cc6 <strchr>
c0100dff:	85 c0                	test   %eax,%eax
c0100e01:	74 d5                	je     c0100dd8 <parse+0x84>
        }
    }
c0100e03:	90                   	nop
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100e04:	e9 66 ff ff ff       	jmp    c0100d6f <parse+0x1b>
    return argc;
c0100e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100e0c:	c9                   	leave  
c0100e0d:	c3                   	ret    

c0100e0e <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100e0e:	55                   	push   %ebp
c0100e0f:	89 e5                	mov    %esp,%ebp
c0100e11:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100e14:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100e17:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1e:	89 04 24             	mov    %eax,(%esp)
c0100e21:	e8 2e ff ff ff       	call   c0100d54 <parse>
c0100e26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100e29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100e2d:	75 0a                	jne    c0100e39 <runcmd+0x2b>
        return 0;
c0100e2f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100e34:	e9 85 00 00 00       	jmp    c0100ebe <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e40:	eb 5c                	jmp    c0100e9e <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100e42:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100e45:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e48:	89 d0                	mov    %edx,%eax
c0100e4a:	01 c0                	add    %eax,%eax
c0100e4c:	01 d0                	add    %edx,%eax
c0100e4e:	c1 e0 02             	shl    $0x2,%eax
c0100e51:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100e56:	8b 00                	mov    (%eax),%eax
c0100e58:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100e5c:	89 04 24             	mov    %eax,(%esp)
c0100e5f:	e8 c3 3d 01 00       	call   c0114c27 <strcmp>
c0100e64:	85 c0                	test   %eax,%eax
c0100e66:	75 32                	jne    c0100e9a <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100e68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6b:	89 d0                	mov    %edx,%eax
c0100e6d:	01 c0                	add    %eax,%eax
c0100e6f:	01 d0                	add    %edx,%eax
c0100e71:	c1 e0 02             	shl    $0x2,%eax
c0100e74:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100e79:	8b 40 08             	mov    0x8(%eax),%eax
c0100e7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100e7f:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100e82:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e85:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100e89:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100e8c:	83 c2 04             	add    $0x4,%edx
c0100e8f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e93:	89 0c 24             	mov    %ecx,(%esp)
c0100e96:	ff d0                	call   *%eax
c0100e98:	eb 24                	jmp    c0100ebe <runcmd+0xb0>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ea1:	83 f8 02             	cmp    $0x2,%eax
c0100ea4:	76 9c                	jbe    c0100e42 <runcmd+0x34>
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100ea6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ea9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ead:	c7 04 24 bf 5a 11 c0 	movl   $0xc0115abf,(%esp)
c0100eb4:	e8 e3 f4 ff ff       	call   c010039c <cprintf>
    return 0;
c0100eb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ebe:	c9                   	leave  
c0100ebf:	c3                   	ret    

c0100ec0 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100ec0:	55                   	push   %ebp
c0100ec1:	89 e5                	mov    %esp,%ebp
c0100ec3:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ec6:	c7 04 24 d8 5a 11 c0 	movl   $0xc0115ad8,(%esp)
c0100ecd:	e8 ca f4 ff ff       	call   c010039c <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100ed2:	c7 04 24 00 5b 11 c0 	movl   $0xc0115b00,(%esp)
c0100ed9:	e8 be f4 ff ff       	call   c010039c <cprintf>

    if (tf != NULL) {
c0100ede:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100ee2:	74 0b                	je     c0100eef <kmonitor+0x2f>
        print_trapframe(tf);
c0100ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ee7:	89 04 24             	mov    %eax,(%esp)
c0100eea:	e8 16 16 00 00       	call   c0102505 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100eef:	c7 04 24 25 5b 11 c0 	movl   $0xc0115b25,(%esp)
c0100ef6:	e8 42 f5 ff ff       	call   c010043d <readline>
c0100efb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100efe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100f02:	74 18                	je     c0100f1c <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f0e:	89 04 24             	mov    %eax,(%esp)
c0100f11:	e8 f8 fe ff ff       	call   c0100e0e <runcmd>
c0100f16:	85 c0                	test   %eax,%eax
c0100f18:	79 02                	jns    c0100f1c <kmonitor+0x5c>
                break;
c0100f1a:	eb 02                	jmp    c0100f1e <kmonitor+0x5e>
            }
        }
    }
c0100f1c:	eb d1                	jmp    c0100eef <kmonitor+0x2f>
}
c0100f1e:	c9                   	leave  
c0100f1f:	c3                   	ret    

c0100f20 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100f20:	55                   	push   %ebp
c0100f21:	89 e5                	mov    %esp,%ebp
c0100f23:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100f26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100f2d:	eb 3f                	jmp    c0100f6e <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100f2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f32:	89 d0                	mov    %edx,%eax
c0100f34:	01 c0                	add    %eax,%eax
c0100f36:	01 d0                	add    %edx,%eax
c0100f38:	c1 e0 02             	shl    $0x2,%eax
c0100f3b:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100f40:	8b 48 04             	mov    0x4(%eax),%ecx
c0100f43:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f46:	89 d0                	mov    %edx,%eax
c0100f48:	01 c0                	add    %eax,%eax
c0100f4a:	01 d0                	add    %edx,%eax
c0100f4c:	c1 e0 02             	shl    $0x2,%eax
c0100f4f:	05 00 f0 14 c0       	add    $0xc014f000,%eax
c0100f54:	8b 00                	mov    (%eax),%eax
c0100f56:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100f5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f5e:	c7 04 24 29 5b 11 c0 	movl   $0xc0115b29,(%esp)
c0100f65:	e8 32 f4 ff ff       	call   c010039c <cprintf>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100f6a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f71:	83 f8 02             	cmp    $0x2,%eax
c0100f74:	76 b9                	jbe    c0100f2f <mon_help+0xf>
    }
    return 0;
c0100f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f7b:	c9                   	leave  
c0100f7c:	c3                   	ret    

c0100f7d <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100f7d:	55                   	push   %ebp
c0100f7e:	89 e5                	mov    %esp,%ebp
c0100f80:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100f83:	e8 c3 fb ff ff       	call   c0100b4b <print_kerninfo>
    return 0;
c0100f88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f8d:	c9                   	leave  
c0100f8e:	c3                   	ret    

c0100f8f <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100f8f:	55                   	push   %ebp
c0100f90:	89 e5                	mov    %esp,%ebp
c0100f92:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100f95:	e8 fb fc ff ff       	call   c0100c95 <print_stackframe>
    return 0;
c0100f9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f9f:	c9                   	leave  
c0100fa0:	c3                   	ret    

c0100fa1 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100fa1:	55                   	push   %ebp
c0100fa2:	89 e5                	mov    %esp,%ebp
c0100fa4:	83 ec 14             	sub    $0x14,%esp
c0100fa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100faa:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100fae:	90                   	nop
c0100faf:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100fb3:	83 c0 07             	add    $0x7,%eax
c0100fb6:	0f b7 c0             	movzwl %ax,%eax
c0100fb9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100fbd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100fc1:	89 c2                	mov    %eax,%edx
c0100fc3:	ec                   	in     (%dx),%al
c0100fc4:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100fc7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100fcb:	0f b6 c0             	movzbl %al,%eax
c0100fce:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100fd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fd4:	25 80 00 00 00       	and    $0x80,%eax
c0100fd9:	85 c0                	test   %eax,%eax
c0100fdb:	75 d2                	jne    c0100faf <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100fdd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100fe1:	74 11                	je     c0100ff4 <ide_wait_ready+0x53>
c0100fe3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fe6:	83 e0 21             	and    $0x21,%eax
c0100fe9:	85 c0                	test   %eax,%eax
c0100feb:	74 07                	je     c0100ff4 <ide_wait_ready+0x53>
        return -1;
c0100fed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ff2:	eb 05                	jmp    c0100ff9 <ide_wait_ready+0x58>
    }
    return 0;
c0100ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ff9:	c9                   	leave  
c0100ffa:	c3                   	ret    

c0100ffb <ide_init>:

void
ide_init(void) {
c0100ffb:	55                   	push   %ebp
c0100ffc:	89 e5                	mov    %esp,%ebp
c0100ffe:	57                   	push   %edi
c0100fff:	53                   	push   %ebx
c0101000:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101006:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010100c:	e9 d6 02 00 00       	jmp    c01012e7 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101011:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101015:	c1 e0 03             	shl    $0x3,%eax
c0101018:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010101f:	29 c2                	sub    %eax,%edx
c0101021:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c0101027:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010102a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010102e:	66 d1 e8             	shr    %ax
c0101031:	0f b7 c0             	movzwl %ax,%eax
c0101034:	0f b7 04 85 34 5b 11 	movzwl -0x3feea4cc(,%eax,4),%eax
c010103b:	c0 
c010103c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101040:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101044:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010104b:	00 
c010104c:	89 04 24             	mov    %eax,(%esp)
c010104f:	e8 4d ff ff ff       	call   c0100fa1 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101054:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101058:	83 e0 01             	and    $0x1,%eax
c010105b:	c1 e0 04             	shl    $0x4,%eax
c010105e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101061:	0f b6 c0             	movzbl %al,%eax
c0101064:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101068:	83 c2 06             	add    $0x6,%edx
c010106b:	0f b7 d2             	movzwl %dx,%edx
c010106e:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101072:	88 45 d1             	mov    %al,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101075:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101079:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010107d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010107e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101082:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101089:	00 
c010108a:	89 04 24             	mov    %eax,(%esp)
c010108d:	e8 0f ff ff ff       	call   c0100fa1 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101092:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101096:	83 c0 07             	add    $0x7,%eax
c0101099:	0f b7 c0             	movzwl %ax,%eax
c010109c:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01010a0:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01010a4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01010a8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01010ac:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01010ad:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010b1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01010b8:	00 
c01010b9:	89 04 24             	mov    %eax,(%esp)
c01010bc:	e8 e0 fe ff ff       	call   c0100fa1 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01010c1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010c5:	83 c0 07             	add    $0x7,%eax
c01010c8:	0f b7 c0             	movzwl %ax,%eax
c01010cb:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010cf:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01010d3:	89 c2                	mov    %eax,%edx
c01010d5:	ec                   	in     (%dx),%al
c01010d6:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01010d9:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01010dd:	84 c0                	test   %al,%al
c01010df:	0f 84 f7 01 00 00    	je     c01012dc <ide_init+0x2e1>
c01010e5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010e9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01010f0:	00 
c01010f1:	89 04 24             	mov    %eax,(%esp)
c01010f4:	e8 a8 fe ff ff       	call   c0100fa1 <ide_wait_ready>
c01010f9:	85 c0                	test   %eax,%eax
c01010fb:	0f 85 db 01 00 00    	jne    c01012dc <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101101:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101105:	c1 e0 03             	shl    $0x3,%eax
c0101108:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010110f:	29 c2                	sub    %eax,%edx
c0101111:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c0101117:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c010111a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010111e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101121:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101127:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010112a:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    asm volatile (
c0101131:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101134:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101137:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010113a:	89 cb                	mov    %ecx,%ebx
c010113c:	89 df                	mov    %ebx,%edi
c010113e:	89 c1                	mov    %eax,%ecx
c0101140:	fc                   	cld    
c0101141:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101143:	89 c8                	mov    %ecx,%eax
c0101145:	89 fb                	mov    %edi,%ebx
c0101147:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010114a:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010114d:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101153:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101159:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010115f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101162:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101165:	25 00 00 00 04       	and    $0x4000000,%eax
c010116a:	85 c0                	test   %eax,%eax
c010116c:	74 0e                	je     c010117c <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010116e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101171:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101177:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010117a:	eb 09                	jmp    c0101185 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010117c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010117f:	8b 40 78             	mov    0x78(%eax),%eax
c0101182:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101185:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101189:	c1 e0 03             	shl    $0x3,%eax
c010118c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101193:	29 c2                	sub    %eax,%edx
c0101195:	81 c2 40 24 15 c0    	add    $0xc0152440,%edx
c010119b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010119e:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	c1 e0 03             	shl    $0x3,%eax
c01011a8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011af:	29 c2                	sub    %eax,%edx
c01011b1:	81 c2 40 24 15 c0    	add    $0xc0152440,%edx
c01011b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01011ba:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01011bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01011c0:	83 c0 62             	add    $0x62,%eax
c01011c3:	0f b7 00             	movzwl (%eax),%eax
c01011c6:	0f b7 c0             	movzwl %ax,%eax
c01011c9:	25 00 02 00 00       	and    $0x200,%eax
c01011ce:	85 c0                	test   %eax,%eax
c01011d0:	75 24                	jne    c01011f6 <ide_init+0x1fb>
c01011d2:	c7 44 24 0c 3c 5b 11 	movl   $0xc0115b3c,0xc(%esp)
c01011d9:	c0 
c01011da:	c7 44 24 08 7f 5b 11 	movl   $0xc0115b7f,0x8(%esp)
c01011e1:	c0 
c01011e2:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01011e9:	00 
c01011ea:	c7 04 24 94 5b 11 c0 	movl   $0xc0115b94,(%esp)
c01011f1:	e8 fd f2 ff ff       	call   c01004f3 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01011f6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011fa:	c1 e0 03             	shl    $0x3,%eax
c01011fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101204:	29 c2                	sub    %eax,%edx
c0101206:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c010120c:	83 c0 0c             	add    $0xc,%eax
c010120f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101212:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101215:	83 c0 36             	add    $0x36,%eax
c0101218:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c010121b:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101222:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101229:	eb 34                	jmp    c010125f <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c010122b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010122e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101231:	01 c2                	add    %eax,%edx
c0101233:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101236:	8d 48 01             	lea    0x1(%eax),%ecx
c0101239:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010123c:	01 c8                	add    %ecx,%eax
c010123e:	0f b6 00             	movzbl (%eax),%eax
c0101241:	88 02                	mov    %al,(%edx)
c0101243:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101246:	8d 50 01             	lea    0x1(%eax),%edx
c0101249:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010124c:	01 c2                	add    %eax,%edx
c010124e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101251:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101254:	01 c8                	add    %ecx,%eax
c0101256:	0f b6 00             	movzbl (%eax),%eax
c0101259:	88 02                	mov    %al,(%edx)
        for (i = 0; i < length; i += 2) {
c010125b:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c010125f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101262:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101265:	72 c4                	jb     c010122b <ide_init+0x230>
        }
        do {
            model[i] = '\0';
c0101267:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010126a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010126d:	01 d0                	add    %edx,%eax
c010126f:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101272:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101275:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101278:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010127b:	85 c0                	test   %eax,%eax
c010127d:	74 0f                	je     c010128e <ide_init+0x293>
c010127f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101282:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101285:	01 d0                	add    %edx,%eax
c0101287:	0f b6 00             	movzbl (%eax),%eax
c010128a:	3c 20                	cmp    $0x20,%al
c010128c:	74 d9                	je     c0101267 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c010128e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101292:	c1 e0 03             	shl    $0x3,%eax
c0101295:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010129c:	29 c2                	sub    %eax,%edx
c010129e:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c01012a4:	8d 48 0c             	lea    0xc(%eax),%ecx
c01012a7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01012ab:	c1 e0 03             	shl    $0x3,%eax
c01012ae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01012b5:	29 c2                	sub    %eax,%edx
c01012b7:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c01012bd:	8b 50 08             	mov    0x8(%eax),%edx
c01012c0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01012c4:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01012c8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01012cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01012d0:	c7 04 24 a6 5b 11 c0 	movl   $0xc0115ba6,(%esp)
c01012d7:	e8 c0 f0 ff ff       	call   c010039c <cprintf>
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01012dc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01012e0:	83 c0 01             	add    $0x1,%eax
c01012e3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01012e7:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01012ec:	0f 86 1f fd ff ff    	jbe    c0101011 <ide_init+0x16>
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01012f2:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c01012f9:	e8 9b 0e 00 00       	call   c0102199 <pic_enable>
    pic_enable(IRQ_IDE2);
c01012fe:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101305:	e8 8f 0e 00 00       	call   c0102199 <pic_enable>
}
c010130a:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101310:	5b                   	pop    %ebx
c0101311:	5f                   	pop    %edi
c0101312:	5d                   	pop    %ebp
c0101313:	c3                   	ret    

c0101314 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101314:	55                   	push   %ebp
c0101315:	89 e5                	mov    %esp,%ebp
c0101317:	83 ec 04             	sub    $0x4,%esp
c010131a:	8b 45 08             	mov    0x8(%ebp),%eax
c010131d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101321:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101326:	77 24                	ja     c010134c <ide_device_valid+0x38>
c0101328:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010132c:	c1 e0 03             	shl    $0x3,%eax
c010132f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101336:	29 c2                	sub    %eax,%edx
c0101338:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c010133e:	0f b6 00             	movzbl (%eax),%eax
c0101341:	84 c0                	test   %al,%al
c0101343:	74 07                	je     c010134c <ide_device_valid+0x38>
c0101345:	b8 01 00 00 00       	mov    $0x1,%eax
c010134a:	eb 05                	jmp    c0101351 <ide_device_valid+0x3d>
c010134c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101351:	c9                   	leave  
c0101352:	c3                   	ret    

c0101353 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101353:	55                   	push   %ebp
c0101354:	89 e5                	mov    %esp,%ebp
c0101356:	83 ec 08             	sub    $0x8,%esp
c0101359:	8b 45 08             	mov    0x8(%ebp),%eax
c010135c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101360:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101364:	89 04 24             	mov    %eax,(%esp)
c0101367:	e8 a8 ff ff ff       	call   c0101314 <ide_device_valid>
c010136c:	85 c0                	test   %eax,%eax
c010136e:	74 1b                	je     c010138b <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101370:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101374:	c1 e0 03             	shl    $0x3,%eax
c0101377:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010137e:	29 c2                	sub    %eax,%edx
c0101380:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c0101386:	8b 40 08             	mov    0x8(%eax),%eax
c0101389:	eb 05                	jmp    c0101390 <ide_device_size+0x3d>
    }
    return 0;
c010138b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101390:	c9                   	leave  
c0101391:	c3                   	ret    

c0101392 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101392:	55                   	push   %ebp
c0101393:	89 e5                	mov    %esp,%ebp
c0101395:	57                   	push   %edi
c0101396:	53                   	push   %ebx
c0101397:	83 ec 50             	sub    $0x50,%esp
c010139a:	8b 45 08             	mov    0x8(%ebp),%eax
c010139d:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01013a1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01013a8:	77 24                	ja     c01013ce <ide_read_secs+0x3c>
c01013aa:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01013af:	77 1d                	ja     c01013ce <ide_read_secs+0x3c>
c01013b1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013b5:	c1 e0 03             	shl    $0x3,%eax
c01013b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01013bf:	29 c2                	sub    %eax,%edx
c01013c1:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c01013c7:	0f b6 00             	movzbl (%eax),%eax
c01013ca:	84 c0                	test   %al,%al
c01013cc:	75 24                	jne    c01013f2 <ide_read_secs+0x60>
c01013ce:	c7 44 24 0c c4 5b 11 	movl   $0xc0115bc4,0xc(%esp)
c01013d5:	c0 
c01013d6:	c7 44 24 08 7f 5b 11 	movl   $0xc0115b7f,0x8(%esp)
c01013dd:	c0 
c01013de:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c01013e5:	00 
c01013e6:	c7 04 24 94 5b 11 c0 	movl   $0xc0115b94,(%esp)
c01013ed:	e8 01 f1 ff ff       	call   c01004f3 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01013f2:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01013f9:	77 0f                	ja     c010140a <ide_read_secs+0x78>
c01013fb:	8b 45 14             	mov    0x14(%ebp),%eax
c01013fe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101401:	01 d0                	add    %edx,%eax
c0101403:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101408:	76 24                	jbe    c010142e <ide_read_secs+0x9c>
c010140a:	c7 44 24 0c ec 5b 11 	movl   $0xc0115bec,0xc(%esp)
c0101411:	c0 
c0101412:	c7 44 24 08 7f 5b 11 	movl   $0xc0115b7f,0x8(%esp)
c0101419:	c0 
c010141a:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101421:	00 
c0101422:	c7 04 24 94 5b 11 c0 	movl   $0xc0115b94,(%esp)
c0101429:	e8 c5 f0 ff ff       	call   c01004f3 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010142e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101432:	66 d1 e8             	shr    %ax
c0101435:	0f b7 c0             	movzwl %ax,%eax
c0101438:	0f b7 04 85 34 5b 11 	movzwl -0x3feea4cc(,%eax,4),%eax
c010143f:	c0 
c0101440:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101444:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101448:	66 d1 e8             	shr    %ax
c010144b:	0f b7 c0             	movzwl %ax,%eax
c010144e:	0f b7 04 85 36 5b 11 	movzwl -0x3feea4ca(,%eax,4),%eax
c0101455:	c0 
c0101456:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010145a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010145e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101465:	00 
c0101466:	89 04 24             	mov    %eax,(%esp)
c0101469:	e8 33 fb ff ff       	call   c0100fa1 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010146e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101472:	83 c0 02             	add    $0x2,%eax
c0101475:	0f b7 c0             	movzwl %ax,%eax
c0101478:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c010147c:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101480:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101484:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101488:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101489:	8b 45 14             	mov    0x14(%ebp),%eax
c010148c:	0f b6 c0             	movzbl %al,%eax
c010148f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101493:	83 c2 02             	add    $0x2,%edx
c0101496:	0f b7 d2             	movzwl %dx,%edx
c0101499:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010149d:	88 45 e9             	mov    %al,-0x17(%ebp)
c01014a0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01014a4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01014a8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01014a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01014ac:	0f b6 c0             	movzbl %al,%eax
c01014af:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014b3:	83 c2 03             	add    $0x3,%edx
c01014b6:	0f b7 d2             	movzwl %dx,%edx
c01014b9:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014bd:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014c0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01014c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01014cc:	c1 e8 08             	shr    $0x8,%eax
c01014cf:	0f b6 c0             	movzbl %al,%eax
c01014d2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014d6:	83 c2 04             	add    $0x4,%edx
c01014d9:	0f b7 d2             	movzwl %dx,%edx
c01014dc:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01014e0:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01014e3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01014e7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01014eb:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01014ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01014ef:	c1 e8 10             	shr    $0x10,%eax
c01014f2:	0f b6 c0             	movzbl %al,%eax
c01014f5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014f9:	83 c2 05             	add    $0x5,%edx
c01014fc:	0f b7 d2             	movzwl %dx,%edx
c01014ff:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101503:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101506:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010150a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010150e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010150f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101513:	83 e0 01             	and    $0x1,%eax
c0101516:	c1 e0 04             	shl    $0x4,%eax
c0101519:	89 c2                	mov    %eax,%edx
c010151b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010151e:	c1 e8 18             	shr    $0x18,%eax
c0101521:	83 e0 0f             	and    $0xf,%eax
c0101524:	09 d0                	or     %edx,%eax
c0101526:	83 c8 e0             	or     $0xffffffe0,%eax
c0101529:	0f b6 c0             	movzbl %al,%eax
c010152c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101530:	83 c2 06             	add    $0x6,%edx
c0101533:	0f b7 d2             	movzwl %dx,%edx
c0101536:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010153a:	88 45 d9             	mov    %al,-0x27(%ebp)
c010153d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101541:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101545:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101546:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010154a:	83 c0 07             	add    $0x7,%eax
c010154d:	0f b7 c0             	movzwl %ax,%eax
c0101550:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101554:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101558:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010155c:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101560:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101561:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101568:	eb 5a                	jmp    c01015c4 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010156a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010156e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101575:	00 
c0101576:	89 04 24             	mov    %eax,(%esp)
c0101579:	e8 23 fa ff ff       	call   c0100fa1 <ide_wait_ready>
c010157e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101581:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101585:	74 02                	je     c0101589 <ide_read_secs+0x1f7>
            goto out;
c0101587:	eb 41                	jmp    c01015ca <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101589:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010158d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101590:	8b 45 10             	mov    0x10(%ebp),%eax
c0101593:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101596:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c010159d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01015a0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01015a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01015a6:	89 cb                	mov    %ecx,%ebx
c01015a8:	89 df                	mov    %ebx,%edi
c01015aa:	89 c1                	mov    %eax,%ecx
c01015ac:	fc                   	cld    
c01015ad:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01015af:	89 c8                	mov    %ecx,%eax
c01015b1:	89 fb                	mov    %edi,%ebx
c01015b3:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c01015b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01015b9:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01015bd:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01015c4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01015c8:	75 a0                	jne    c010156a <ide_read_secs+0x1d8>
    }

out:
    return ret;
c01015ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01015cd:	83 c4 50             	add    $0x50,%esp
c01015d0:	5b                   	pop    %ebx
c01015d1:	5f                   	pop    %edi
c01015d2:	5d                   	pop    %ebp
c01015d3:	c3                   	ret    

c01015d4 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c01015d4:	55                   	push   %ebp
c01015d5:	89 e5                	mov    %esp,%ebp
c01015d7:	56                   	push   %esi
c01015d8:	53                   	push   %ebx
c01015d9:	83 ec 50             	sub    $0x50,%esp
c01015dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01015df:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01015e3:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01015ea:	77 24                	ja     c0101610 <ide_write_secs+0x3c>
c01015ec:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01015f1:	77 1d                	ja     c0101610 <ide_write_secs+0x3c>
c01015f3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015f7:	c1 e0 03             	shl    $0x3,%eax
c01015fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101601:	29 c2                	sub    %eax,%edx
c0101603:	8d 82 40 24 15 c0    	lea    -0x3feadbc0(%edx),%eax
c0101609:	0f b6 00             	movzbl (%eax),%eax
c010160c:	84 c0                	test   %al,%al
c010160e:	75 24                	jne    c0101634 <ide_write_secs+0x60>
c0101610:	c7 44 24 0c c4 5b 11 	movl   $0xc0115bc4,0xc(%esp)
c0101617:	c0 
c0101618:	c7 44 24 08 7f 5b 11 	movl   $0xc0115b7f,0x8(%esp)
c010161f:	c0 
c0101620:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101627:	00 
c0101628:	c7 04 24 94 5b 11 c0 	movl   $0xc0115b94,(%esp)
c010162f:	e8 bf ee ff ff       	call   c01004f3 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101634:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c010163b:	77 0f                	ja     c010164c <ide_write_secs+0x78>
c010163d:	8b 45 14             	mov    0x14(%ebp),%eax
c0101640:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101643:	01 d0                	add    %edx,%eax
c0101645:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010164a:	76 24                	jbe    c0101670 <ide_write_secs+0x9c>
c010164c:	c7 44 24 0c ec 5b 11 	movl   $0xc0115bec,0xc(%esp)
c0101653:	c0 
c0101654:	c7 44 24 08 7f 5b 11 	movl   $0xc0115b7f,0x8(%esp)
c010165b:	c0 
c010165c:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101663:	00 
c0101664:	c7 04 24 94 5b 11 c0 	movl   $0xc0115b94,(%esp)
c010166b:	e8 83 ee ff ff       	call   c01004f3 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101670:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101674:	66 d1 e8             	shr    %ax
c0101677:	0f b7 c0             	movzwl %ax,%eax
c010167a:	0f b7 04 85 34 5b 11 	movzwl -0x3feea4cc(,%eax,4),%eax
c0101681:	c0 
c0101682:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101686:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010168a:	66 d1 e8             	shr    %ax
c010168d:	0f b7 c0             	movzwl %ax,%eax
c0101690:	0f b7 04 85 36 5b 11 	movzwl -0x3feea4ca(,%eax,4),%eax
c0101697:	c0 
c0101698:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010169c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01016a0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01016a7:	00 
c01016a8:	89 04 24             	mov    %eax,(%esp)
c01016ab:	e8 f1 f8 ff ff       	call   c0100fa1 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01016b0:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01016b4:	83 c0 02             	add    $0x2,%eax
c01016b7:	0f b7 c0             	movzwl %ax,%eax
c01016ba:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c01016be:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016c2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01016c6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01016ca:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c01016cb:	8b 45 14             	mov    0x14(%ebp),%eax
c01016ce:	0f b6 c0             	movzbl %al,%eax
c01016d1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016d5:	83 c2 02             	add    $0x2,%edx
c01016d8:	0f b7 d2             	movzwl %dx,%edx
c01016db:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01016df:	88 45 e9             	mov    %al,-0x17(%ebp)
c01016e2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01016e6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01016ea:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01016eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016ee:	0f b6 c0             	movzbl %al,%eax
c01016f1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016f5:	83 c2 03             	add    $0x3,%edx
c01016f8:	0f b7 d2             	movzwl %dx,%edx
c01016fb:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01016ff:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101702:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101706:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010170a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010170b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010170e:	c1 e8 08             	shr    $0x8,%eax
c0101711:	0f b6 c0             	movzbl %al,%eax
c0101714:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101718:	83 c2 04             	add    $0x4,%edx
c010171b:	0f b7 d2             	movzwl %dx,%edx
c010171e:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101722:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101725:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101729:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010172d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101731:	c1 e8 10             	shr    $0x10,%eax
c0101734:	0f b6 c0             	movzbl %al,%eax
c0101737:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010173b:	83 c2 05             	add    $0x5,%edx
c010173e:	0f b7 d2             	movzwl %dx,%edx
c0101741:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101745:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101748:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010174c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101750:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101751:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101755:	83 e0 01             	and    $0x1,%eax
c0101758:	c1 e0 04             	shl    $0x4,%eax
c010175b:	89 c2                	mov    %eax,%edx
c010175d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101760:	c1 e8 18             	shr    $0x18,%eax
c0101763:	83 e0 0f             	and    $0xf,%eax
c0101766:	09 d0                	or     %edx,%eax
c0101768:	83 c8 e0             	or     $0xffffffe0,%eax
c010176b:	0f b6 c0             	movzbl %al,%eax
c010176e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101772:	83 c2 06             	add    $0x6,%edx
c0101775:	0f b7 d2             	movzwl %dx,%edx
c0101778:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010177c:	88 45 d9             	mov    %al,-0x27(%ebp)
c010177f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101783:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101787:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101788:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010178c:	83 c0 07             	add    $0x7,%eax
c010178f:	0f b7 c0             	movzwl %ax,%eax
c0101792:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101796:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c010179a:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010179e:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01017a2:	ee                   	out    %al,(%dx)

    int ret = 0;
c01017a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01017aa:	eb 5a                	jmp    c0101806 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01017ac:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01017b0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01017b7:	00 
c01017b8:	89 04 24             	mov    %eax,(%esp)
c01017bb:	e8 e1 f7 ff ff       	call   c0100fa1 <ide_wait_ready>
c01017c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01017c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01017c7:	74 02                	je     c01017cb <ide_write_secs+0x1f7>
            goto out;
c01017c9:	eb 41                	jmp    c010180c <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01017cb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01017cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01017d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01017d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01017d8:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c01017df:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01017e2:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01017e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01017e8:	89 cb                	mov    %ecx,%ebx
c01017ea:	89 de                	mov    %ebx,%esi
c01017ec:	89 c1                	mov    %eax,%ecx
c01017ee:	fc                   	cld    
c01017ef:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01017f1:	89 c8                	mov    %ecx,%eax
c01017f3:	89 f3                	mov    %esi,%ebx
c01017f5:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c01017f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01017fb:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01017ff:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101806:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010180a:	75 a0                	jne    c01017ac <ide_write_secs+0x1d8>
    }

out:
    return ret;
c010180c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010180f:	83 c4 50             	add    $0x50,%esp
c0101812:	5b                   	pop    %ebx
c0101813:	5e                   	pop    %esi
c0101814:	5d                   	pop    %ebp
c0101815:	c3                   	ret    

c0101816 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0101816:	55                   	push   %ebp
c0101817:	89 e5                	mov    %esp,%ebp
    return ticks;
c0101819:	a1 00 61 15 c0       	mov    0xc0156100,%eax
}
c010181e:	5d                   	pop    %ebp
c010181f:	c3                   	ret    

c0101820 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0101820:	55                   	push   %ebp
c0101821:	89 e5                	mov    %esp,%ebp
c0101823:	83 ec 28             	sub    $0x28,%esp
c0101826:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c010182c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101830:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101834:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101838:	ee                   	out    %al,(%dx)
c0101839:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c010183f:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0101843:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101847:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010184b:	ee                   	out    %al,(%dx)
c010184c:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0101852:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0101856:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010185a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010185e:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c010185f:	c7 05 00 61 15 c0 00 	movl   $0x0,0xc0156100
c0101866:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0101869:	c7 04 24 26 5c 11 c0 	movl   $0xc0115c26,(%esp)
c0101870:	e8 27 eb ff ff       	call   c010039c <cprintf>
    pic_enable(IRQ_TIMER);
c0101875:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010187c:	e8 18 09 00 00       	call   c0102199 <pic_enable>
}
c0101881:	c9                   	leave  
c0101882:	c3                   	ret    

c0101883 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101883:	55                   	push   %ebp
c0101884:	89 e5                	mov    %esp,%ebp
c0101886:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101889:	9c                   	pushf  
c010188a:	58                   	pop    %eax
c010188b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010188e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101891:	25 00 02 00 00       	and    $0x200,%eax
c0101896:	85 c0                	test   %eax,%eax
c0101898:	74 0c                	je     c01018a6 <__intr_save+0x23>
        intr_disable();
c010189a:	e8 69 0a 00 00       	call   c0102308 <intr_disable>
        return 1;
c010189f:	b8 01 00 00 00       	mov    $0x1,%eax
c01018a4:	eb 05                	jmp    c01018ab <__intr_save+0x28>
    }
    return 0;
c01018a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01018ab:	c9                   	leave  
c01018ac:	c3                   	ret    

c01018ad <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01018ad:	55                   	push   %ebp
c01018ae:	89 e5                	mov    %esp,%ebp
c01018b0:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01018b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01018b7:	74 05                	je     c01018be <__intr_restore+0x11>
        intr_enable();
c01018b9:	e8 44 0a 00 00       	call   c0102302 <intr_enable>
    }
}
c01018be:	c9                   	leave  
c01018bf:	c3                   	ret    

c01018c0 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c01018c0:	55                   	push   %ebp
c01018c1:	89 e5                	mov    %esp,%ebp
c01018c3:	83 ec 10             	sub    $0x10,%esp
c01018c6:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cc:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01018d0:	89 c2                	mov    %eax,%edx
c01018d2:	ec                   	in     (%dx),%al
c01018d3:	88 45 fd             	mov    %al,-0x3(%ebp)
c01018d6:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01018dc:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018e0:	89 c2                	mov    %eax,%edx
c01018e2:	ec                   	in     (%dx),%al
c01018e3:	88 45 f9             	mov    %al,-0x7(%ebp)
c01018e6:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01018ec:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01018f0:	89 c2                	mov    %eax,%edx
c01018f2:	ec                   	in     (%dx),%al
c01018f3:	88 45 f5             	mov    %al,-0xb(%ebp)
c01018f6:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c01018fc:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101900:	89 c2                	mov    %eax,%edx
c0101902:	ec                   	in     (%dx),%al
c0101903:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101906:	c9                   	leave  
c0101907:	c3                   	ret    

c0101908 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101908:	55                   	push   %ebp
c0101909:	89 e5                	mov    %esp,%ebp
c010190b:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010190e:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101915:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101918:	0f b7 00             	movzwl (%eax),%eax
c010191b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010191f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101922:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101927:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010192a:	0f b7 00             	movzwl (%eax),%eax
c010192d:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0101931:	74 12                	je     c0101945 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0101933:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c010193a:	66 c7 05 26 25 15 c0 	movw   $0x3b4,0xc0152526
c0101941:	b4 03 
c0101943:	eb 13                	jmp    c0101958 <cga_init+0x50>
    } else {
        *cp = was;
c0101945:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101948:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010194c:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c010194f:	66 c7 05 26 25 15 c0 	movw   $0x3d4,0xc0152526
c0101956:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0101958:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c010195f:	0f b7 c0             	movzwl %ax,%eax
c0101962:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101966:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010196a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010196e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101972:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101973:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c010197a:	83 c0 01             	add    $0x1,%eax
c010197d:	0f b7 c0             	movzwl %ax,%eax
c0101980:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101984:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101988:	89 c2                	mov    %eax,%edx
c010198a:	ec                   	in     (%dx),%al
c010198b:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c010198e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101992:	0f b6 c0             	movzbl %al,%eax
c0101995:	c1 e0 08             	shl    $0x8,%eax
c0101998:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010199b:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c01019a2:	0f b7 c0             	movzwl %ax,%eax
c01019a5:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01019a9:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01019b1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01019b5:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01019b6:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c01019bd:	83 c0 01             	add    $0x1,%eax
c01019c0:	0f b7 c0             	movzwl %ax,%eax
c01019c3:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019c7:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019cb:	89 c2                	mov    %eax,%edx
c01019cd:	ec                   	in     (%dx),%al
c01019ce:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01019d1:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01019d5:	0f b6 c0             	movzbl %al,%eax
c01019d8:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01019db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01019de:	a3 20 25 15 c0       	mov    %eax,0xc0152520
    crt_pos = pos;
c01019e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019e6:	66 a3 24 25 15 c0    	mov    %ax,0xc0152524
}
c01019ec:	c9                   	leave  
c01019ed:	c3                   	ret    

c01019ee <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01019ee:	55                   	push   %ebp
c01019ef:	89 e5                	mov    %esp,%ebp
c01019f1:	83 ec 48             	sub    $0x48,%esp
c01019f4:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01019fa:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019fe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101a02:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101a06:	ee                   	out    %al,(%dx)
c0101a07:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101a0d:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101a11:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101a15:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101a19:	ee                   	out    %al,(%dx)
c0101a1a:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101a20:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101a24:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101a28:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101a2c:	ee                   	out    %al,(%dx)
c0101a2d:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101a33:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c0101a37:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101a3b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101a3f:	ee                   	out    %al,(%dx)
c0101a40:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c0101a46:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c0101a4a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101a4e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101a52:	ee                   	out    %al,(%dx)
c0101a53:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c0101a59:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0101a5d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101a61:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101a65:	ee                   	out    %al,(%dx)
c0101a66:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101a6c:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101a70:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101a74:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101a78:	ee                   	out    %al,(%dx)
c0101a79:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a7f:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a83:	89 c2                	mov    %eax,%edx
c0101a85:	ec                   	in     (%dx),%al
c0101a86:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c0101a89:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101a8d:	3c ff                	cmp    $0xff,%al
c0101a8f:	0f 95 c0             	setne  %al
c0101a92:	0f b6 c0             	movzbl %al,%eax
c0101a95:	a3 28 25 15 c0       	mov    %eax,0xc0152528
c0101a9a:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101aa0:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101aa4:	89 c2                	mov    %eax,%edx
c0101aa6:	ec                   	in     (%dx),%al
c0101aa7:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101aaa:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101ab0:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	ec                   	in     (%dx),%al
c0101ab7:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101aba:	a1 28 25 15 c0       	mov    0xc0152528,%eax
c0101abf:	85 c0                	test   %eax,%eax
c0101ac1:	74 0c                	je     c0101acf <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101ac3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101aca:	e8 ca 06 00 00       	call   c0102199 <pic_enable>
    }
}
c0101acf:	c9                   	leave  
c0101ad0:	c3                   	ret    

c0101ad1 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101ad1:	55                   	push   %ebp
c0101ad2:	89 e5                	mov    %esp,%ebp
c0101ad4:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101ad7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101ade:	eb 09                	jmp    c0101ae9 <lpt_putc_sub+0x18>
        delay();
c0101ae0:	e8 db fd ff ff       	call   c01018c0 <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101ae5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101ae9:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101aef:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101af3:	89 c2                	mov    %eax,%edx
c0101af5:	ec                   	in     (%dx),%al
c0101af6:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101af9:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101afd:	84 c0                	test   %al,%al
c0101aff:	78 09                	js     c0101b0a <lpt_putc_sub+0x39>
c0101b01:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101b08:	7e d6                	jle    c0101ae0 <lpt_putc_sub+0xf>
    }
    outb(LPTPORT + 0, c);
c0101b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b0d:	0f b6 c0             	movzbl %al,%eax
c0101b10:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101b16:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101b19:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101b1d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101b21:	ee                   	out    %al,(%dx)
c0101b22:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101b28:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101b2c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101b30:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b34:	ee                   	out    %al,(%dx)
c0101b35:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0101b3b:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0101b3f:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101b43:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101b47:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101b48:	c9                   	leave  
c0101b49:	c3                   	ret    

c0101b4a <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101b4a:	55                   	push   %ebp
c0101b4b:	89 e5                	mov    %esp,%ebp
c0101b4d:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101b50:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101b54:	74 0d                	je     c0101b63 <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101b56:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b59:	89 04 24             	mov    %eax,(%esp)
c0101b5c:	e8 70 ff ff ff       	call   c0101ad1 <lpt_putc_sub>
c0101b61:	eb 24                	jmp    c0101b87 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0101b63:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101b6a:	e8 62 ff ff ff       	call   c0101ad1 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101b6f:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101b76:	e8 56 ff ff ff       	call   c0101ad1 <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101b7b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101b82:	e8 4a ff ff ff       	call   c0101ad1 <lpt_putc_sub>
    }
}
c0101b87:	c9                   	leave  
c0101b88:	c3                   	ret    

c0101b89 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101b89:	55                   	push   %ebp
c0101b8a:	89 e5                	mov    %esp,%ebp
c0101b8c:	53                   	push   %ebx
c0101b8d:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b93:	b0 00                	mov    $0x0,%al
c0101b95:	85 c0                	test   %eax,%eax
c0101b97:	75 07                	jne    c0101ba0 <cga_putc+0x17>
        c |= 0x0700;
c0101b99:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101ba0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ba3:	0f b6 c0             	movzbl %al,%eax
c0101ba6:	83 f8 0a             	cmp    $0xa,%eax
c0101ba9:	74 4c                	je     c0101bf7 <cga_putc+0x6e>
c0101bab:	83 f8 0d             	cmp    $0xd,%eax
c0101bae:	74 57                	je     c0101c07 <cga_putc+0x7e>
c0101bb0:	83 f8 08             	cmp    $0x8,%eax
c0101bb3:	0f 85 88 00 00 00    	jne    c0101c41 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101bb9:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101bc0:	66 85 c0             	test   %ax,%ax
c0101bc3:	74 30                	je     c0101bf5 <cga_putc+0x6c>
            crt_pos --;
c0101bc5:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101bcc:	83 e8 01             	sub    $0x1,%eax
c0101bcf:	66 a3 24 25 15 c0    	mov    %ax,0xc0152524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101bd5:	a1 20 25 15 c0       	mov    0xc0152520,%eax
c0101bda:	0f b7 15 24 25 15 c0 	movzwl 0xc0152524,%edx
c0101be1:	0f b7 d2             	movzwl %dx,%edx
c0101be4:	01 d2                	add    %edx,%edx
c0101be6:	01 c2                	add    %eax,%edx
c0101be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101beb:	b0 00                	mov    $0x0,%al
c0101bed:	83 c8 20             	or     $0x20,%eax
c0101bf0:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101bf3:	eb 72                	jmp    c0101c67 <cga_putc+0xde>
c0101bf5:	eb 70                	jmp    c0101c67 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101bf7:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101bfe:	83 c0 50             	add    $0x50,%eax
c0101c01:	66 a3 24 25 15 c0    	mov    %ax,0xc0152524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101c07:	0f b7 1d 24 25 15 c0 	movzwl 0xc0152524,%ebx
c0101c0e:	0f b7 0d 24 25 15 c0 	movzwl 0xc0152524,%ecx
c0101c15:	0f b7 c1             	movzwl %cx,%eax
c0101c18:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101c1e:	c1 e8 10             	shr    $0x10,%eax
c0101c21:	89 c2                	mov    %eax,%edx
c0101c23:	66 c1 ea 06          	shr    $0x6,%dx
c0101c27:	89 d0                	mov    %edx,%eax
c0101c29:	c1 e0 02             	shl    $0x2,%eax
c0101c2c:	01 d0                	add    %edx,%eax
c0101c2e:	c1 e0 04             	shl    $0x4,%eax
c0101c31:	29 c1                	sub    %eax,%ecx
c0101c33:	89 ca                	mov    %ecx,%edx
c0101c35:	89 d8                	mov    %ebx,%eax
c0101c37:	29 d0                	sub    %edx,%eax
c0101c39:	66 a3 24 25 15 c0    	mov    %ax,0xc0152524
        break;
c0101c3f:	eb 26                	jmp    c0101c67 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101c41:	8b 0d 20 25 15 c0    	mov    0xc0152520,%ecx
c0101c47:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101c4e:	8d 50 01             	lea    0x1(%eax),%edx
c0101c51:	66 89 15 24 25 15 c0 	mov    %dx,0xc0152524
c0101c58:	0f b7 c0             	movzwl %ax,%eax
c0101c5b:	01 c0                	add    %eax,%eax
c0101c5d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0101c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c63:	66 89 02             	mov    %ax,(%edx)
        break;
c0101c66:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101c67:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101c6e:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101c72:	76 5b                	jbe    c0101ccf <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101c74:	a1 20 25 15 c0       	mov    0xc0152520,%eax
c0101c79:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101c7f:	a1 20 25 15 c0       	mov    0xc0152520,%eax
c0101c84:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101c8b:	00 
c0101c8c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101c90:	89 04 24             	mov    %eax,(%esp)
c0101c93:	e8 2c 32 01 00       	call   c0114ec4 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101c98:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101c9f:	eb 15                	jmp    c0101cb6 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101ca1:	a1 20 25 15 c0       	mov    0xc0152520,%eax
c0101ca6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101ca9:	01 d2                	add    %edx,%edx
c0101cab:	01 d0                	add    %edx,%eax
c0101cad:	66 c7 00 20 07       	movw   $0x720,(%eax)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101cb2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101cb6:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101cbd:	7e e2                	jle    c0101ca1 <cga_putc+0x118>
        }
        crt_pos -= CRT_COLS;
c0101cbf:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101cc6:	83 e8 50             	sub    $0x50,%eax
c0101cc9:	66 a3 24 25 15 c0    	mov    %ax,0xc0152524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101ccf:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c0101cd6:	0f b7 c0             	movzwl %ax,%eax
c0101cd9:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101cdd:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101ce1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101ce5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ce9:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101cea:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101cf1:	66 c1 e8 08          	shr    $0x8,%ax
c0101cf5:	0f b6 c0             	movzbl %al,%eax
c0101cf8:	0f b7 15 26 25 15 c0 	movzwl 0xc0152526,%edx
c0101cff:	83 c2 01             	add    $0x1,%edx
c0101d02:	0f b7 d2             	movzwl %dx,%edx
c0101d05:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101d09:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101d0c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d10:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d14:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101d15:	0f b7 05 26 25 15 c0 	movzwl 0xc0152526,%eax
c0101d1c:	0f b7 c0             	movzwl %ax,%eax
c0101d1f:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101d23:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101d27:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101d2b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101d2f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101d30:	0f b7 05 24 25 15 c0 	movzwl 0xc0152524,%eax
c0101d37:	0f b6 c0             	movzbl %al,%eax
c0101d3a:	0f b7 15 26 25 15 c0 	movzwl 0xc0152526,%edx
c0101d41:	83 c2 01             	add    $0x1,%edx
c0101d44:	0f b7 d2             	movzwl %dx,%edx
c0101d47:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101d4b:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101d4e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101d52:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101d56:	ee                   	out    %al,(%dx)
}
c0101d57:	83 c4 34             	add    $0x34,%esp
c0101d5a:	5b                   	pop    %ebx
c0101d5b:	5d                   	pop    %ebp
c0101d5c:	c3                   	ret    

c0101d5d <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101d5d:	55                   	push   %ebp
c0101d5e:	89 e5                	mov    %esp,%ebp
c0101d60:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101d63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101d6a:	eb 09                	jmp    c0101d75 <serial_putc_sub+0x18>
        delay();
c0101d6c:	e8 4f fb ff ff       	call   c01018c0 <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101d71:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101d75:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d7b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d7f:	89 c2                	mov    %eax,%edx
c0101d81:	ec                   	in     (%dx),%al
c0101d82:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101d85:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101d89:	0f b6 c0             	movzbl %al,%eax
c0101d8c:	83 e0 20             	and    $0x20,%eax
c0101d8f:	85 c0                	test   %eax,%eax
c0101d91:	75 09                	jne    c0101d9c <serial_putc_sub+0x3f>
c0101d93:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101d9a:	7e d0                	jle    c0101d6c <serial_putc_sub+0xf>
    }
    outb(COM1 + COM_TX, c);
c0101d9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d9f:	0f b6 c0             	movzbl %al,%eax
c0101da2:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101da8:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101dab:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101daf:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101db3:	ee                   	out    %al,(%dx)
}
c0101db4:	c9                   	leave  
c0101db5:	c3                   	ret    

c0101db6 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101db6:	55                   	push   %ebp
c0101db7:	89 e5                	mov    %esp,%ebp
c0101db9:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101dbc:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101dc0:	74 0d                	je     c0101dcf <serial_putc+0x19>
        serial_putc_sub(c);
c0101dc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101dc5:	89 04 24             	mov    %eax,(%esp)
c0101dc8:	e8 90 ff ff ff       	call   c0101d5d <serial_putc_sub>
c0101dcd:	eb 24                	jmp    c0101df3 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101dcf:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101dd6:	e8 82 ff ff ff       	call   c0101d5d <serial_putc_sub>
        serial_putc_sub(' ');
c0101ddb:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101de2:	e8 76 ff ff ff       	call   c0101d5d <serial_putc_sub>
        serial_putc_sub('\b');
c0101de7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101dee:	e8 6a ff ff ff       	call   c0101d5d <serial_putc_sub>
    }
}
c0101df3:	c9                   	leave  
c0101df4:	c3                   	ret    

c0101df5 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101df5:	55                   	push   %ebp
c0101df6:	89 e5                	mov    %esp,%ebp
c0101df8:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101dfb:	eb 33                	jmp    c0101e30 <cons_intr+0x3b>
        if (c != 0) {
c0101dfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e01:	74 2d                	je     c0101e30 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101e03:	a1 44 27 15 c0       	mov    0xc0152744,%eax
c0101e08:	8d 50 01             	lea    0x1(%eax),%edx
c0101e0b:	89 15 44 27 15 c0    	mov    %edx,0xc0152744
c0101e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101e14:	88 90 40 25 15 c0    	mov    %dl,-0x3feadac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101e1a:	a1 44 27 15 c0       	mov    0xc0152744,%eax
c0101e1f:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101e24:	75 0a                	jne    c0101e30 <cons_intr+0x3b>
                cons.wpos = 0;
c0101e26:	c7 05 44 27 15 c0 00 	movl   $0x0,0xc0152744
c0101e2d:	00 00 00 
    while ((c = (*proc)()) != -1) {
c0101e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e33:	ff d0                	call   *%eax
c0101e35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e38:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101e3c:	75 bf                	jne    c0101dfd <cons_intr+0x8>
            }
        }
    }
}
c0101e3e:	c9                   	leave  
c0101e3f:	c3                   	ret    

c0101e40 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101e40:	55                   	push   %ebp
c0101e41:	89 e5                	mov    %esp,%ebp
c0101e43:	83 ec 10             	sub    $0x10,%esp
c0101e46:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e4c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101e50:	89 c2                	mov    %eax,%edx
c0101e52:	ec                   	in     (%dx),%al
c0101e53:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101e56:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101e5a:	0f b6 c0             	movzbl %al,%eax
c0101e5d:	83 e0 01             	and    $0x1,%eax
c0101e60:	85 c0                	test   %eax,%eax
c0101e62:	75 07                	jne    c0101e6b <serial_proc_data+0x2b>
        return -1;
c0101e64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101e69:	eb 2a                	jmp    c0101e95 <serial_proc_data+0x55>
c0101e6b:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e71:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101e75:	89 c2                	mov    %eax,%edx
c0101e77:	ec                   	in     (%dx),%al
c0101e78:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0101e7b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101e7f:	0f b6 c0             	movzbl %al,%eax
c0101e82:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101e85:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101e89:	75 07                	jne    c0101e92 <serial_proc_data+0x52>
        c = '\b';
c0101e8b:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101e92:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101e95:	c9                   	leave  
c0101e96:	c3                   	ret    

c0101e97 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101e97:	55                   	push   %ebp
c0101e98:	89 e5                	mov    %esp,%ebp
c0101e9a:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101e9d:	a1 28 25 15 c0       	mov    0xc0152528,%eax
c0101ea2:	85 c0                	test   %eax,%eax
c0101ea4:	74 0c                	je     c0101eb2 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101ea6:	c7 04 24 40 1e 10 c0 	movl   $0xc0101e40,(%esp)
c0101ead:	e8 43 ff ff ff       	call   c0101df5 <cons_intr>
    }
}
c0101eb2:	c9                   	leave  
c0101eb3:	c3                   	ret    

c0101eb4 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101eb4:	55                   	push   %ebp
c0101eb5:	89 e5                	mov    %esp,%ebp
c0101eb7:	83 ec 38             	sub    $0x38,%esp
c0101eba:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101ec0:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101ec4:	89 c2                	mov    %eax,%edx
c0101ec6:	ec                   	in     (%dx),%al
c0101ec7:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101eca:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101ece:	0f b6 c0             	movzbl %al,%eax
c0101ed1:	83 e0 01             	and    $0x1,%eax
c0101ed4:	85 c0                	test   %eax,%eax
c0101ed6:	75 0a                	jne    c0101ee2 <kbd_proc_data+0x2e>
        return -1;
c0101ed8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101edd:	e9 59 01 00 00       	jmp    c010203b <kbd_proc_data+0x187>
c0101ee2:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101ee8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101eec:	89 c2                	mov    %eax,%edx
c0101eee:	ec                   	in     (%dx),%al
c0101eef:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101ef2:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101ef6:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101ef9:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101efd:	75 17                	jne    c0101f16 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101eff:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f04:	83 c8 40             	or     $0x40,%eax
c0101f07:	a3 48 27 15 c0       	mov    %eax,0xc0152748
        return 0;
c0101f0c:	b8 00 00 00 00       	mov    $0x0,%eax
c0101f11:	e9 25 01 00 00       	jmp    c010203b <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101f16:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f1a:	84 c0                	test   %al,%al
c0101f1c:	79 47                	jns    c0101f65 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101f1e:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f23:	83 e0 40             	and    $0x40,%eax
c0101f26:	85 c0                	test   %eax,%eax
c0101f28:	75 09                	jne    c0101f33 <kbd_proc_data+0x7f>
c0101f2a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f2e:	83 e0 7f             	and    $0x7f,%eax
c0101f31:	eb 04                	jmp    c0101f37 <kbd_proc_data+0x83>
c0101f33:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f37:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101f3a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f3e:	0f b6 80 40 f0 14 c0 	movzbl -0x3feb0fc0(%eax),%eax
c0101f45:	83 c8 40             	or     $0x40,%eax
c0101f48:	0f b6 c0             	movzbl %al,%eax
c0101f4b:	f7 d0                	not    %eax
c0101f4d:	89 c2                	mov    %eax,%edx
c0101f4f:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f54:	21 d0                	and    %edx,%eax
c0101f56:	a3 48 27 15 c0       	mov    %eax,0xc0152748
        return 0;
c0101f5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0101f60:	e9 d6 00 00 00       	jmp    c010203b <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0101f65:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f6a:	83 e0 40             	and    $0x40,%eax
c0101f6d:	85 c0                	test   %eax,%eax
c0101f6f:	74 11                	je     c0101f82 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101f71:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101f75:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f7a:	83 e0 bf             	and    $0xffffffbf,%eax
c0101f7d:	a3 48 27 15 c0       	mov    %eax,0xc0152748
    }

    shift |= shiftcode[data];
c0101f82:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f86:	0f b6 80 40 f0 14 c0 	movzbl -0x3feb0fc0(%eax),%eax
c0101f8d:	0f b6 d0             	movzbl %al,%edx
c0101f90:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101f95:	09 d0                	or     %edx,%eax
c0101f97:	a3 48 27 15 c0       	mov    %eax,0xc0152748
    shift ^= togglecode[data];
c0101f9c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101fa0:	0f b6 80 40 f1 14 c0 	movzbl -0x3feb0ec0(%eax),%eax
c0101fa7:	0f b6 d0             	movzbl %al,%edx
c0101faa:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101faf:	31 d0                	xor    %edx,%eax
c0101fb1:	a3 48 27 15 c0       	mov    %eax,0xc0152748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101fb6:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101fbb:	83 e0 03             	and    $0x3,%eax
c0101fbe:	8b 14 85 40 f5 14 c0 	mov    -0x3feb0ac0(,%eax,4),%edx
c0101fc5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101fc9:	01 d0                	add    %edx,%eax
c0101fcb:	0f b6 00             	movzbl (%eax),%eax
c0101fce:	0f b6 c0             	movzbl %al,%eax
c0101fd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101fd4:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0101fd9:	83 e0 08             	and    $0x8,%eax
c0101fdc:	85 c0                	test   %eax,%eax
c0101fde:	74 22                	je     c0102002 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101fe0:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101fe4:	7e 0c                	jle    c0101ff2 <kbd_proc_data+0x13e>
c0101fe6:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101fea:	7f 06                	jg     c0101ff2 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101fec:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101ff0:	eb 10                	jmp    c0102002 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101ff2:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101ff6:	7e 0a                	jle    c0102002 <kbd_proc_data+0x14e>
c0101ff8:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101ffc:	7f 04                	jg     c0102002 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101ffe:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0102002:	a1 48 27 15 c0       	mov    0xc0152748,%eax
c0102007:	f7 d0                	not    %eax
c0102009:	83 e0 06             	and    $0x6,%eax
c010200c:	85 c0                	test   %eax,%eax
c010200e:	75 28                	jne    c0102038 <kbd_proc_data+0x184>
c0102010:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0102017:	75 1f                	jne    c0102038 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0102019:	c7 04 24 41 5c 11 c0 	movl   $0xc0115c41,(%esp)
c0102020:	e8 77 e3 ff ff       	call   c010039c <cprintf>
c0102025:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010202b:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010202f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0102033:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102037:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0102038:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010203b:	c9                   	leave  
c010203c:	c3                   	ret    

c010203d <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c010203d:	55                   	push   %ebp
c010203e:	89 e5                	mov    %esp,%ebp
c0102040:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0102043:	c7 04 24 b4 1e 10 c0 	movl   $0xc0101eb4,(%esp)
c010204a:	e8 a6 fd ff ff       	call   c0101df5 <cons_intr>
}
c010204f:	c9                   	leave  
c0102050:	c3                   	ret    

c0102051 <kbd_init>:

static void
kbd_init(void) {
c0102051:	55                   	push   %ebp
c0102052:	89 e5                	mov    %esp,%ebp
c0102054:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0102057:	e8 e1 ff ff ff       	call   c010203d <kbd_intr>
    pic_enable(IRQ_KBD);
c010205c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0102063:	e8 31 01 00 00       	call   c0102199 <pic_enable>
}
c0102068:	c9                   	leave  
c0102069:	c3                   	ret    

c010206a <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c010206a:	55                   	push   %ebp
c010206b:	89 e5                	mov    %esp,%ebp
c010206d:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0102070:	e8 93 f8 ff ff       	call   c0101908 <cga_init>
    serial_init();
c0102075:	e8 74 f9 ff ff       	call   c01019ee <serial_init>
    kbd_init();
c010207a:	e8 d2 ff ff ff       	call   c0102051 <kbd_init>
    if (!serial_exists) {
c010207f:	a1 28 25 15 c0       	mov    0xc0152528,%eax
c0102084:	85 c0                	test   %eax,%eax
c0102086:	75 0c                	jne    c0102094 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0102088:	c7 04 24 4d 5c 11 c0 	movl   $0xc0115c4d,(%esp)
c010208f:	e8 08 e3 ff ff       	call   c010039c <cprintf>
    }
}
c0102094:	c9                   	leave  
c0102095:	c3                   	ret    

c0102096 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102096:	55                   	push   %ebp
c0102097:	89 e5                	mov    %esp,%ebp
c0102099:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010209c:	e8 e2 f7 ff ff       	call   c0101883 <__intr_save>
c01020a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01020a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a7:	89 04 24             	mov    %eax,(%esp)
c01020aa:	e8 9b fa ff ff       	call   c0101b4a <lpt_putc>
        cga_putc(c);
c01020af:	8b 45 08             	mov    0x8(%ebp),%eax
c01020b2:	89 04 24             	mov    %eax,(%esp)
c01020b5:	e8 cf fa ff ff       	call   c0101b89 <cga_putc>
        serial_putc(c);
c01020ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01020bd:	89 04 24             	mov    %eax,(%esp)
c01020c0:	e8 f1 fc ff ff       	call   c0101db6 <serial_putc>
    }
    local_intr_restore(intr_flag);
c01020c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01020c8:	89 04 24             	mov    %eax,(%esp)
c01020cb:	e8 dd f7 ff ff       	call   c01018ad <__intr_restore>
}
c01020d0:	c9                   	leave  
c01020d1:	c3                   	ret    

c01020d2 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01020d2:	55                   	push   %ebp
c01020d3:	89 e5                	mov    %esp,%ebp
c01020d5:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c01020d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01020df:	e8 9f f7 ff ff       	call   c0101883 <__intr_save>
c01020e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01020e7:	e8 ab fd ff ff       	call   c0101e97 <serial_intr>
        kbd_intr();
c01020ec:	e8 4c ff ff ff       	call   c010203d <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01020f1:	8b 15 40 27 15 c0    	mov    0xc0152740,%edx
c01020f7:	a1 44 27 15 c0       	mov    0xc0152744,%eax
c01020fc:	39 c2                	cmp    %eax,%edx
c01020fe:	74 31                	je     c0102131 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102100:	a1 40 27 15 c0       	mov    0xc0152740,%eax
c0102105:	8d 50 01             	lea    0x1(%eax),%edx
c0102108:	89 15 40 27 15 c0    	mov    %edx,0xc0152740
c010210e:	0f b6 80 40 25 15 c0 	movzbl -0x3feadac0(%eax),%eax
c0102115:	0f b6 c0             	movzbl %al,%eax
c0102118:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010211b:	a1 40 27 15 c0       	mov    0xc0152740,%eax
c0102120:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102125:	75 0a                	jne    c0102131 <cons_getc+0x5f>
                cons.rpos = 0;
c0102127:	c7 05 40 27 15 c0 00 	movl   $0x0,0xc0152740
c010212e:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0102131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102134:	89 04 24             	mov    %eax,(%esp)
c0102137:	e8 71 f7 ff ff       	call   c01018ad <__intr_restore>
    return c;
c010213c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010213f:	c9                   	leave  
c0102140:	c3                   	ret    

c0102141 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102141:	55                   	push   %ebp
c0102142:	89 e5                	mov    %esp,%ebp
c0102144:	83 ec 14             	sub    $0x14,%esp
c0102147:	8b 45 08             	mov    0x8(%ebp),%eax
c010214a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010214e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102152:	66 a3 50 f5 14 c0    	mov    %ax,0xc014f550
    if (did_init) {
c0102158:	a1 4c 27 15 c0       	mov    0xc015274c,%eax
c010215d:	85 c0                	test   %eax,%eax
c010215f:	74 36                	je     c0102197 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102161:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102165:	0f b6 c0             	movzbl %al,%eax
c0102168:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010216e:	88 45 fd             	mov    %al,-0x3(%ebp)
c0102171:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102175:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102179:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010217a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010217e:	66 c1 e8 08          	shr    $0x8,%ax
c0102182:	0f b6 c0             	movzbl %al,%eax
c0102185:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010218b:	88 45 f9             	mov    %al,-0x7(%ebp)
c010218e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102192:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102196:	ee                   	out    %al,(%dx)
    }
}
c0102197:	c9                   	leave  
c0102198:	c3                   	ret    

c0102199 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102199:	55                   	push   %ebp
c010219a:	89 e5                	mov    %esp,%ebp
c010219c:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010219f:	8b 45 08             	mov    0x8(%ebp),%eax
c01021a2:	ba 01 00 00 00       	mov    $0x1,%edx
c01021a7:	89 c1                	mov    %eax,%ecx
c01021a9:	d3 e2                	shl    %cl,%edx
c01021ab:	89 d0                	mov    %edx,%eax
c01021ad:	f7 d0                	not    %eax
c01021af:	89 c2                	mov    %eax,%edx
c01021b1:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c01021b8:	21 d0                	and    %edx,%eax
c01021ba:	0f b7 c0             	movzwl %ax,%eax
c01021bd:	89 04 24             	mov    %eax,(%esp)
c01021c0:	e8 7c ff ff ff       	call   c0102141 <pic_setmask>
}
c01021c5:	c9                   	leave  
c01021c6:	c3                   	ret    

c01021c7 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021c7:	55                   	push   %ebp
c01021c8:	89 e5                	mov    %esp,%ebp
c01021ca:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021cd:	c7 05 4c 27 15 c0 01 	movl   $0x1,0xc015274c
c01021d4:	00 00 00 
c01021d7:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021dd:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021e1:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021e5:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021e9:	ee                   	out    %al,(%dx)
c01021ea:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021f0:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021f4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021f8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021fc:	ee                   	out    %al,(%dx)
c01021fd:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102203:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c0102207:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010220b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010220f:	ee                   	out    %al,(%dx)
c0102210:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102216:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010221a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010221e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102222:	ee                   	out    %al,(%dx)
c0102223:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102229:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010222d:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102231:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102235:	ee                   	out    %al,(%dx)
c0102236:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010223c:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102240:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102244:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102248:	ee                   	out    %al,(%dx)
c0102249:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010224f:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102253:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102257:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010225b:	ee                   	out    %al,(%dx)
c010225c:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102262:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102266:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010226a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010226e:	ee                   	out    %al,(%dx)
c010226f:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102275:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102279:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010227d:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102281:	ee                   	out    %al,(%dx)
c0102282:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102288:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010228c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102290:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102294:	ee                   	out    %al,(%dx)
c0102295:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010229b:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010229f:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01022a3:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01022a7:	ee                   	out    %al,(%dx)
c01022a8:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01022ae:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022b2:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022b6:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022ba:	ee                   	out    %al,(%dx)
c01022bb:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022c1:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022c5:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022c9:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022cd:	ee                   	out    %al,(%dx)
c01022ce:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022d4:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022d8:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022dc:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022e0:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022e1:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c01022e8:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022ec:	74 12                	je     c0102300 <pic_init+0x139>
        pic_setmask(irq_mask);
c01022ee:	0f b7 05 50 f5 14 c0 	movzwl 0xc014f550,%eax
c01022f5:	0f b7 c0             	movzwl %ax,%eax
c01022f8:	89 04 24             	mov    %eax,(%esp)
c01022fb:	e8 41 fe ff ff       	call   c0102141 <pic_setmask>
    }
}
c0102300:	c9                   	leave  
c0102301:	c3                   	ret    

c0102302 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102302:	55                   	push   %ebp
c0102303:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
c0102305:	fb                   	sti    
    sti();
}
c0102306:	5d                   	pop    %ebp
c0102307:	c3                   	ret    

c0102308 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102308:	55                   	push   %ebp
c0102309:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
c010230b:	fa                   	cli    
    cli();
}
c010230c:	5d                   	pop    %ebp
c010230d:	c3                   	ret    

c010230e <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c010230e:	55                   	push   %ebp
c010230f:	89 e5                	mov    %esp,%ebp
c0102311:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0102314:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010231b:	00 
c010231c:	c7 04 24 80 5c 11 c0 	movl   $0xc0115c80,(%esp)
c0102323:	e8 74 e0 ff ff       	call   c010039c <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0102328:	c7 04 24 8a 5c 11 c0 	movl   $0xc0115c8a,(%esp)
c010232f:	e8 68 e0 ff ff       	call   c010039c <cprintf>
    panic("EOT: kernel seems ok.");
c0102334:	c7 44 24 08 98 5c 11 	movl   $0xc0115c98,0x8(%esp)
c010233b:	c0 
c010233c:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102343:	00 
c0102344:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c010234b:	e8 a3 e1 ff ff       	call   c01004f3 <__panic>

c0102350 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102350:	55                   	push   %ebp
c0102351:	89 e5                	mov    %esp,%ebp
c0102353:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102356:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010235d:	e9 c3 00 00 00       	jmp    c0102425 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102362:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102365:	8b 04 85 e0 f5 14 c0 	mov    -0x3feb0a20(,%eax,4),%eax
c010236c:	89 c2                	mov    %eax,%edx
c010236e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102371:	66 89 14 c5 60 27 15 	mov    %dx,-0x3fead8a0(,%eax,8)
c0102378:	c0 
c0102379:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010237c:	66 c7 04 c5 62 27 15 	movw   $0x8,-0x3fead89e(,%eax,8)
c0102383:	c0 08 00 
c0102386:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102389:	0f b6 14 c5 64 27 15 	movzbl -0x3fead89c(,%eax,8),%edx
c0102390:	c0 
c0102391:	83 e2 e0             	and    $0xffffffe0,%edx
c0102394:	88 14 c5 64 27 15 c0 	mov    %dl,-0x3fead89c(,%eax,8)
c010239b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239e:	0f b6 14 c5 64 27 15 	movzbl -0x3fead89c(,%eax,8),%edx
c01023a5:	c0 
c01023a6:	83 e2 1f             	and    $0x1f,%edx
c01023a9:	88 14 c5 64 27 15 c0 	mov    %dl,-0x3fead89c(,%eax,8)
c01023b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b3:	0f b6 14 c5 65 27 15 	movzbl -0x3fead89b(,%eax,8),%edx
c01023ba:	c0 
c01023bb:	83 e2 f0             	and    $0xfffffff0,%edx
c01023be:	83 ca 0e             	or     $0xe,%edx
c01023c1:	88 14 c5 65 27 15 c0 	mov    %dl,-0x3fead89b(,%eax,8)
c01023c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023cb:	0f b6 14 c5 65 27 15 	movzbl -0x3fead89b(,%eax,8),%edx
c01023d2:	c0 
c01023d3:	83 e2 ef             	and    $0xffffffef,%edx
c01023d6:	88 14 c5 65 27 15 c0 	mov    %dl,-0x3fead89b(,%eax,8)
c01023dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e0:	0f b6 14 c5 65 27 15 	movzbl -0x3fead89b(,%eax,8),%edx
c01023e7:	c0 
c01023e8:	83 e2 9f             	and    $0xffffff9f,%edx
c01023eb:	88 14 c5 65 27 15 c0 	mov    %dl,-0x3fead89b(,%eax,8)
c01023f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023f5:	0f b6 14 c5 65 27 15 	movzbl -0x3fead89b(,%eax,8),%edx
c01023fc:	c0 
c01023fd:	83 ca 80             	or     $0xffffff80,%edx
c0102400:	88 14 c5 65 27 15 c0 	mov    %dl,-0x3fead89b(,%eax,8)
c0102407:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240a:	8b 04 85 e0 f5 14 c0 	mov    -0x3feb0a20(,%eax,4),%eax
c0102411:	c1 e8 10             	shr    $0x10,%eax
c0102414:	89 c2                	mov    %eax,%edx
c0102416:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102419:	66 89 14 c5 66 27 15 	mov    %dx,-0x3fead89a(,%eax,8)
c0102420:	c0 
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102421:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102425:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102428:	3d ff 00 00 00       	cmp    $0xff,%eax
c010242d:	0f 86 2f ff ff ff    	jbe    c0102362 <idt_init+0x12>
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102433:	a1 e0 f7 14 c0       	mov    0xc014f7e0,%eax
c0102438:	66 a3 60 2b 15 c0    	mov    %ax,0xc0152b60
c010243e:	66 c7 05 62 2b 15 c0 	movw   $0x8,0xc0152b62
c0102445:	08 00 
c0102447:	0f b6 05 64 2b 15 c0 	movzbl 0xc0152b64,%eax
c010244e:	83 e0 e0             	and    $0xffffffe0,%eax
c0102451:	a2 64 2b 15 c0       	mov    %al,0xc0152b64
c0102456:	0f b6 05 64 2b 15 c0 	movzbl 0xc0152b64,%eax
c010245d:	83 e0 1f             	and    $0x1f,%eax
c0102460:	a2 64 2b 15 c0       	mov    %al,0xc0152b64
c0102465:	0f b6 05 65 2b 15 c0 	movzbl 0xc0152b65,%eax
c010246c:	83 c8 0f             	or     $0xf,%eax
c010246f:	a2 65 2b 15 c0       	mov    %al,0xc0152b65
c0102474:	0f b6 05 65 2b 15 c0 	movzbl 0xc0152b65,%eax
c010247b:	83 e0 ef             	and    $0xffffffef,%eax
c010247e:	a2 65 2b 15 c0       	mov    %al,0xc0152b65
c0102483:	0f b6 05 65 2b 15 c0 	movzbl 0xc0152b65,%eax
c010248a:	83 c8 60             	or     $0x60,%eax
c010248d:	a2 65 2b 15 c0       	mov    %al,0xc0152b65
c0102492:	0f b6 05 65 2b 15 c0 	movzbl 0xc0152b65,%eax
c0102499:	83 c8 80             	or     $0xffffff80,%eax
c010249c:	a2 65 2b 15 c0       	mov    %al,0xc0152b65
c01024a1:	a1 e0 f7 14 c0       	mov    0xc014f7e0,%eax
c01024a6:	c1 e8 10             	shr    $0x10,%eax
c01024a9:	66 a3 66 2b 15 c0    	mov    %ax,0xc0152b66
c01024af:	c7 45 f8 60 f5 14 c0 	movl   $0xc014f560,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01024b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01024b9:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c01024bc:	c9                   	leave  
c01024bd:	c3                   	ret    

c01024be <trapname>:

static const char *
trapname(int trapno) {
c01024be:	55                   	push   %ebp
c01024bf:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01024c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c4:	83 f8 13             	cmp    $0x13,%eax
c01024c7:	77 0c                	ja     c01024d5 <trapname+0x17>
        return excnames[trapno];
c01024c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024cc:	8b 04 85 20 61 11 c0 	mov    -0x3fee9ee0(,%eax,4),%eax
c01024d3:	eb 18                	jmp    c01024ed <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024d5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024d9:	7e 0d                	jle    c01024e8 <trapname+0x2a>
c01024db:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024df:	7f 07                	jg     c01024e8 <trapname+0x2a>
        return "Hardware Interrupt";
c01024e1:	b8 bf 5c 11 c0       	mov    $0xc0115cbf,%eax
c01024e6:	eb 05                	jmp    c01024ed <trapname+0x2f>
    }
    return "(unknown trap)";
c01024e8:	b8 d2 5c 11 c0       	mov    $0xc0115cd2,%eax
}
c01024ed:	5d                   	pop    %ebp
c01024ee:	c3                   	ret    

c01024ef <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024ef:	55                   	push   %ebp
c01024f0:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f5:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024f9:	66 83 f8 08          	cmp    $0x8,%ax
c01024fd:	0f 94 c0             	sete   %al
c0102500:	0f b6 c0             	movzbl %al,%eax
}
c0102503:	5d                   	pop    %ebp
c0102504:	c3                   	ret    

c0102505 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102505:	55                   	push   %ebp
c0102506:	89 e5                	mov    %esp,%ebp
c0102508:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c010250b:	8b 45 08             	mov    0x8(%ebp),%eax
c010250e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102512:	c7 04 24 13 5d 11 c0 	movl   $0xc0115d13,(%esp)
c0102519:	e8 7e de ff ff       	call   c010039c <cprintf>
    print_regs(&tf->tf_regs);
c010251e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102521:	89 04 24             	mov    %eax,(%esp)
c0102524:	e8 a1 01 00 00       	call   c01026ca <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102529:	8b 45 08             	mov    0x8(%ebp),%eax
c010252c:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102530:	0f b7 c0             	movzwl %ax,%eax
c0102533:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102537:	c7 04 24 24 5d 11 c0 	movl   $0xc0115d24,(%esp)
c010253e:	e8 59 de ff ff       	call   c010039c <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102543:	8b 45 08             	mov    0x8(%ebp),%eax
c0102546:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010254a:	0f b7 c0             	movzwl %ax,%eax
c010254d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102551:	c7 04 24 37 5d 11 c0 	movl   $0xc0115d37,(%esp)
c0102558:	e8 3f de ff ff       	call   c010039c <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010255d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102560:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102564:	0f b7 c0             	movzwl %ax,%eax
c0102567:	89 44 24 04          	mov    %eax,0x4(%esp)
c010256b:	c7 04 24 4a 5d 11 c0 	movl   $0xc0115d4a,(%esp)
c0102572:	e8 25 de ff ff       	call   c010039c <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102577:	8b 45 08             	mov    0x8(%ebp),%eax
c010257a:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010257e:	0f b7 c0             	movzwl %ax,%eax
c0102581:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102585:	c7 04 24 5d 5d 11 c0 	movl   $0xc0115d5d,(%esp)
c010258c:	e8 0b de ff ff       	call   c010039c <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102591:	8b 45 08             	mov    0x8(%ebp),%eax
c0102594:	8b 40 30             	mov    0x30(%eax),%eax
c0102597:	89 04 24             	mov    %eax,(%esp)
c010259a:	e8 1f ff ff ff       	call   c01024be <trapname>
c010259f:	8b 55 08             	mov    0x8(%ebp),%edx
c01025a2:	8b 52 30             	mov    0x30(%edx),%edx
c01025a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01025a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01025ad:	c7 04 24 70 5d 11 c0 	movl   $0xc0115d70,(%esp)
c01025b4:	e8 e3 dd ff ff       	call   c010039c <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01025b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bc:	8b 40 34             	mov    0x34(%eax),%eax
c01025bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c3:	c7 04 24 82 5d 11 c0 	movl   $0xc0115d82,(%esp)
c01025ca:	e8 cd dd ff ff       	call   c010039c <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01025cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d2:	8b 40 38             	mov    0x38(%eax),%eax
c01025d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d9:	c7 04 24 91 5d 11 c0 	movl   $0xc0115d91,(%esp)
c01025e0:	e8 b7 dd ff ff       	call   c010039c <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e8:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025ec:	0f b7 c0             	movzwl %ax,%eax
c01025ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f3:	c7 04 24 a0 5d 11 c0 	movl   $0xc0115da0,(%esp)
c01025fa:	e8 9d dd ff ff       	call   c010039c <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102602:	8b 40 40             	mov    0x40(%eax),%eax
c0102605:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102609:	c7 04 24 b3 5d 11 c0 	movl   $0xc0115db3,(%esp)
c0102610:	e8 87 dd ff ff       	call   c010039c <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102615:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010261c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102623:	eb 3e                	jmp    c0102663 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102625:	8b 45 08             	mov    0x8(%ebp),%eax
c0102628:	8b 50 40             	mov    0x40(%eax),%edx
c010262b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010262e:	21 d0                	and    %edx,%eax
c0102630:	85 c0                	test   %eax,%eax
c0102632:	74 28                	je     c010265c <print_trapframe+0x157>
c0102634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102637:	8b 04 85 80 f5 14 c0 	mov    -0x3feb0a80(,%eax,4),%eax
c010263e:	85 c0                	test   %eax,%eax
c0102640:	74 1a                	je     c010265c <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102645:	8b 04 85 80 f5 14 c0 	mov    -0x3feb0a80(,%eax,4),%eax
c010264c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102650:	c7 04 24 c2 5d 11 c0 	movl   $0xc0115dc2,(%esp)
c0102657:	e8 40 dd ff ff       	call   c010039c <cprintf>
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010265c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102660:	d1 65 f0             	shll   -0x10(%ebp)
c0102663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102666:	83 f8 17             	cmp    $0x17,%eax
c0102669:	76 ba                	jbe    c0102625 <print_trapframe+0x120>
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010266b:	8b 45 08             	mov    0x8(%ebp),%eax
c010266e:	8b 40 40             	mov    0x40(%eax),%eax
c0102671:	25 00 30 00 00       	and    $0x3000,%eax
c0102676:	c1 e8 0c             	shr    $0xc,%eax
c0102679:	89 44 24 04          	mov    %eax,0x4(%esp)
c010267d:	c7 04 24 c6 5d 11 c0 	movl   $0xc0115dc6,(%esp)
c0102684:	e8 13 dd ff ff       	call   c010039c <cprintf>

    if (!trap_in_kernel(tf)) {
c0102689:	8b 45 08             	mov    0x8(%ebp),%eax
c010268c:	89 04 24             	mov    %eax,(%esp)
c010268f:	e8 5b fe ff ff       	call   c01024ef <trap_in_kernel>
c0102694:	85 c0                	test   %eax,%eax
c0102696:	75 30                	jne    c01026c8 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102698:	8b 45 08             	mov    0x8(%ebp),%eax
c010269b:	8b 40 44             	mov    0x44(%eax),%eax
c010269e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a2:	c7 04 24 cf 5d 11 c0 	movl   $0xc0115dcf,(%esp)
c01026a9:	e8 ee dc ff ff       	call   c010039c <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01026ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b1:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01026b5:	0f b7 c0             	movzwl %ax,%eax
c01026b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026bc:	c7 04 24 de 5d 11 c0 	movl   $0xc0115dde,(%esp)
c01026c3:	e8 d4 dc ff ff       	call   c010039c <cprintf>
    }
}
c01026c8:	c9                   	leave  
c01026c9:	c3                   	ret    

c01026ca <print_regs>:

void
print_regs(struct pushregs *regs) {
c01026ca:	55                   	push   %ebp
c01026cb:	89 e5                	mov    %esp,%ebp
c01026cd:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01026d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d3:	8b 00                	mov    (%eax),%eax
c01026d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d9:	c7 04 24 f1 5d 11 c0 	movl   $0xc0115df1,(%esp)
c01026e0:	e8 b7 dc ff ff       	call   c010039c <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e8:	8b 40 04             	mov    0x4(%eax),%eax
c01026eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ef:	c7 04 24 00 5e 11 c0 	movl   $0xc0115e00,(%esp)
c01026f6:	e8 a1 dc ff ff       	call   c010039c <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01026fe:	8b 40 08             	mov    0x8(%eax),%eax
c0102701:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102705:	c7 04 24 0f 5e 11 c0 	movl   $0xc0115e0f,(%esp)
c010270c:	e8 8b dc ff ff       	call   c010039c <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102711:	8b 45 08             	mov    0x8(%ebp),%eax
c0102714:	8b 40 0c             	mov    0xc(%eax),%eax
c0102717:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271b:	c7 04 24 1e 5e 11 c0 	movl   $0xc0115e1e,(%esp)
c0102722:	e8 75 dc ff ff       	call   c010039c <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102727:	8b 45 08             	mov    0x8(%ebp),%eax
c010272a:	8b 40 10             	mov    0x10(%eax),%eax
c010272d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102731:	c7 04 24 2d 5e 11 c0 	movl   $0xc0115e2d,(%esp)
c0102738:	e8 5f dc ff ff       	call   c010039c <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c010273d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102740:	8b 40 14             	mov    0x14(%eax),%eax
c0102743:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102747:	c7 04 24 3c 5e 11 c0 	movl   $0xc0115e3c,(%esp)
c010274e:	e8 49 dc ff ff       	call   c010039c <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102753:	8b 45 08             	mov    0x8(%ebp),%eax
c0102756:	8b 40 18             	mov    0x18(%eax),%eax
c0102759:	89 44 24 04          	mov    %eax,0x4(%esp)
c010275d:	c7 04 24 4b 5e 11 c0 	movl   $0xc0115e4b,(%esp)
c0102764:	e8 33 dc ff ff       	call   c010039c <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102769:	8b 45 08             	mov    0x8(%ebp),%eax
c010276c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010276f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102773:	c7 04 24 5a 5e 11 c0 	movl   $0xc0115e5a,(%esp)
c010277a:	e8 1d dc ff ff       	call   c010039c <cprintf>
}
c010277f:	c9                   	leave  
c0102780:	c3                   	ret    

c0102781 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102781:	55                   	push   %ebp
c0102782:	89 e5                	mov    %esp,%ebp
c0102784:	53                   	push   %ebx
c0102785:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102788:	8b 45 08             	mov    0x8(%ebp),%eax
c010278b:	8b 40 34             	mov    0x34(%eax),%eax
c010278e:	83 e0 01             	and    $0x1,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102791:	85 c0                	test   %eax,%eax
c0102793:	74 07                	je     c010279c <print_pgfault+0x1b>
c0102795:	b9 69 5e 11 c0       	mov    $0xc0115e69,%ecx
c010279a:	eb 05                	jmp    c01027a1 <print_pgfault+0x20>
c010279c:	b9 7a 5e 11 c0       	mov    $0xc0115e7a,%ecx
            (tf->tf_err & 2) ? 'W' : 'R',
c01027a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027a4:	8b 40 34             	mov    0x34(%eax),%eax
c01027a7:	83 e0 02             	and    $0x2,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027aa:	85 c0                	test   %eax,%eax
c01027ac:	74 07                	je     c01027b5 <print_pgfault+0x34>
c01027ae:	ba 57 00 00 00       	mov    $0x57,%edx
c01027b3:	eb 05                	jmp    c01027ba <print_pgfault+0x39>
c01027b5:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01027ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01027bd:	8b 40 34             	mov    0x34(%eax),%eax
c01027c0:	83 e0 04             	and    $0x4,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027c3:	85 c0                	test   %eax,%eax
c01027c5:	74 07                	je     c01027ce <print_pgfault+0x4d>
c01027c7:	b8 55 00 00 00       	mov    $0x55,%eax
c01027cc:	eb 05                	jmp    c01027d3 <print_pgfault+0x52>
c01027ce:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027d3:	0f 20 d3             	mov    %cr2,%ebx
c01027d6:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027d9:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027dc:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027e0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027e8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027ec:	c7 04 24 88 5e 11 c0 	movl   $0xc0115e88,(%esp)
c01027f3:	e8 a4 db ff ff       	call   c010039c <cprintf>
}
c01027f8:	83 c4 34             	add    $0x34,%esp
c01027fb:	5b                   	pop    %ebx
c01027fc:	5d                   	pop    %ebp
c01027fd:	c3                   	ret    

c01027fe <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027fe:	55                   	push   %ebp
c01027ff:	89 e5                	mov    %esp,%ebp
c0102801:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102804:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c0102809:	85 c0                	test   %eax,%eax
c010280b:	74 0b                	je     c0102818 <pgfault_handler+0x1a>
            print_pgfault(tf);
c010280d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102810:	89 04 24             	mov    %eax,(%esp)
c0102813:	e8 69 ff ff ff       	call   c0102781 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102818:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c010281d:	85 c0                	test   %eax,%eax
c010281f:	74 3d                	je     c010285e <pgfault_handler+0x60>
        assert(current == idleproc);
c0102821:	8b 15 28 30 15 c0    	mov    0xc0153028,%edx
c0102827:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010282c:	39 c2                	cmp    %eax,%edx
c010282e:	74 24                	je     c0102854 <pgfault_handler+0x56>
c0102830:	c7 44 24 0c ab 5e 11 	movl   $0xc0115eab,0xc(%esp)
c0102837:	c0 
c0102838:	c7 44 24 08 bf 5e 11 	movl   $0xc0115ebf,0x8(%esp)
c010283f:	c0 
c0102840:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102847:	00 
c0102848:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c010284f:	e8 9f dc ff ff       	call   c01004f3 <__panic>
        mm = check_mm_struct;
c0102854:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c0102859:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010285c:	eb 46                	jmp    c01028a4 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010285e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102863:	85 c0                	test   %eax,%eax
c0102865:	75 32                	jne    c0102899 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102867:	8b 45 08             	mov    0x8(%ebp),%eax
c010286a:	89 04 24             	mov    %eax,(%esp)
c010286d:	e8 93 fc ff ff       	call   c0102505 <print_trapframe>
            print_pgfault(tf);
c0102872:	8b 45 08             	mov    0x8(%ebp),%eax
c0102875:	89 04 24             	mov    %eax,(%esp)
c0102878:	e8 04 ff ff ff       	call   c0102781 <print_pgfault>
            panic("unhandled page fault.\n");
c010287d:	c7 44 24 08 d4 5e 11 	movl   $0xc0115ed4,0x8(%esp)
c0102884:	c0 
c0102885:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010288c:	00 
c010288d:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c0102894:	e8 5a dc ff ff       	call   c01004f3 <__panic>
        }
        mm = current->mm;
c0102899:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010289e:	8b 40 18             	mov    0x18(%eax),%eax
c01028a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01028a4:	0f 20 d0             	mov    %cr2,%eax
c01028a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01028aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01028ad:	89 c2                	mov    %eax,%edx
c01028af:	8b 45 08             	mov    0x8(%ebp),%eax
c01028b2:	8b 40 34             	mov    0x34(%eax),%eax
c01028b5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01028b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028c0:	89 04 24             	mov    %eax,(%esp)
c01028c3:	e8 43 1c 00 00       	call   c010450b <do_pgfault>
}
c01028c8:	c9                   	leave  
c01028c9:	c3                   	ret    

c01028ca <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01028ca:	55                   	push   %ebp
c01028cb:	89 e5                	mov    %esp,%ebp
c01028cd:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01028da:	8b 40 30             	mov    0x30(%eax),%eax
c01028dd:	83 f8 2f             	cmp    $0x2f,%eax
c01028e0:	77 38                	ja     c010291a <trap_dispatch+0x50>
c01028e2:	83 f8 2e             	cmp    $0x2e,%eax
c01028e5:	0f 83 cb 01 00 00    	jae    c0102ab6 <trap_dispatch+0x1ec>
c01028eb:	83 f8 20             	cmp    $0x20,%eax
c01028ee:	0f 84 07 01 00 00    	je     c01029fb <trap_dispatch+0x131>
c01028f4:	83 f8 20             	cmp    $0x20,%eax
c01028f7:	77 0a                	ja     c0102903 <trap_dispatch+0x39>
c01028f9:	83 f8 0e             	cmp    $0xe,%eax
c01028fc:	74 3e                	je     c010293c <trap_dispatch+0x72>
c01028fe:	e9 6b 01 00 00       	jmp    c0102a6e <trap_dispatch+0x1a4>
c0102903:	83 f8 21             	cmp    $0x21,%eax
c0102906:	0f 84 30 01 00 00    	je     c0102a3c <trap_dispatch+0x172>
c010290c:	83 f8 24             	cmp    $0x24,%eax
c010290f:	0f 84 27 01 00 00    	je     c0102a3c <trap_dispatch+0x172>
c0102915:	e9 54 01 00 00       	jmp    c0102a6e <trap_dispatch+0x1a4>
c010291a:	83 f8 78             	cmp    $0x78,%eax
c010291d:	0f 82 4b 01 00 00    	jb     c0102a6e <trap_dispatch+0x1a4>
c0102923:	83 f8 79             	cmp    $0x79,%eax
c0102926:	0f 86 26 01 00 00    	jbe    c0102a52 <trap_dispatch+0x188>
c010292c:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102931:	0f 84 ba 00 00 00    	je     c01029f1 <trap_dispatch+0x127>
c0102937:	e9 32 01 00 00       	jmp    c0102a6e <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010293c:	8b 45 08             	mov    0x8(%ebp),%eax
c010293f:	89 04 24             	mov    %eax,(%esp)
c0102942:	e8 b7 fe ff ff       	call   c01027fe <pgfault_handler>
c0102947:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010294a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010294e:	0f 84 98 00 00 00    	je     c01029ec <trap_dispatch+0x122>
            print_trapframe(tf);
c0102954:	8b 45 08             	mov    0x8(%ebp),%eax
c0102957:	89 04 24             	mov    %eax,(%esp)
c010295a:	e8 a6 fb ff ff       	call   c0102505 <print_trapframe>
            if (current == NULL) {
c010295f:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102964:	85 c0                	test   %eax,%eax
c0102966:	75 23                	jne    c010298b <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010296b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010296f:	c7 44 24 08 ec 5e 11 	movl   $0xc0115eec,0x8(%esp)
c0102976:	c0 
c0102977:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010297e:	00 
c010297f:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c0102986:	e8 68 db ff ff       	call   c01004f3 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010298b:	8b 45 08             	mov    0x8(%ebp),%eax
c010298e:	89 04 24             	mov    %eax,(%esp)
c0102991:	e8 59 fb ff ff       	call   c01024ef <trap_in_kernel>
c0102996:	85 c0                	test   %eax,%eax
c0102998:	74 23                	je     c01029bd <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010299a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010299d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029a1:	c7 44 24 08 0c 5f 11 	movl   $0xc0115f0c,0x8(%esp)
c01029a8:	c0 
c01029a9:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c01029b0:	00 
c01029b1:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c01029b8:	e8 36 db ff ff       	call   c01004f3 <__panic>
                }
                cprintf("killed by kernel.\n");
c01029bd:	c7 04 24 3a 5f 11 c0 	movl   $0xc0115f3a,(%esp)
c01029c4:	e8 d3 d9 ff ff       	call   c010039c <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01029c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029cc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029d0:	c7 44 24 08 50 5f 11 	movl   $0xc0115f50,0x8(%esp)
c01029d7:	c0 
c01029d8:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01029df:	00 
c01029e0:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c01029e7:	e8 07 db ff ff       	call   c01004f3 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029ec:	e9 c6 00 00 00       	jmp    c0102ab7 <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029f1:	e8 ca c4 00 00       	call   c010eec0 <syscall>
        break;
c01029f6:	e9 bc 00 00 00       	jmp    c0102ab7 <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c01029fb:	a1 00 61 15 c0       	mov    0xc0156100,%eax
c0102a00:	83 c0 01             	add    $0x1,%eax
c0102a03:	a3 00 61 15 c0       	mov    %eax,0xc0156100
        assert(current != NULL);
c0102a08:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102a0d:	85 c0                	test   %eax,%eax
c0102a0f:	75 24                	jne    c0102a35 <trap_dispatch+0x16b>
c0102a11:	c7 44 24 0c 79 5f 11 	movl   $0xc0115f79,0xc(%esp)
c0102a18:	c0 
c0102a19:	c7 44 24 08 bf 5e 11 	movl   $0xc0115ebf,0x8(%esp)
c0102a20:	c0 
c0102a21:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0102a28:	00 
c0102a29:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c0102a30:	e8 be da ff ff       	call   c01004f3 <__panic>
        run_timer_list();
c0102a35:	e8 9f bc 00 00       	call   c010e6d9 <run_timer_list>
        break;
c0102a3a:	eb 7b                	jmp    c0102ab7 <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102a3c:	e8 91 f6 ff ff       	call   c01020d2 <cons_getc>
c0102a41:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a44:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a48:	89 04 24             	mov    %eax,(%esp)
c0102a4b:	e8 3a de 00 00       	call   c011088a <dev_stdin_write>
        }
        break;
c0102a50:	eb 65                	jmp    c0102ab7 <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a52:	c7 44 24 08 89 5f 11 	movl   $0xc0115f89,0x8(%esp)
c0102a59:	c0 
c0102a5a:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102a61:	00 
c0102a62:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c0102a69:	e8 85 da ff ff       	call   c01004f3 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a71:	89 04 24             	mov    %eax,(%esp)
c0102a74:	e8 8c fa ff ff       	call   c0102505 <print_trapframe>
        if (current != NULL) {
c0102a79:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102a7e:	85 c0                	test   %eax,%eax
c0102a80:	74 18                	je     c0102a9a <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a82:	c7 04 24 99 5f 11 c0 	movl   $0xc0115f99,(%esp)
c0102a89:	e8 0e d9 ff ff       	call   c010039c <cprintf>
            do_exit(-E_KILLED);
c0102a8e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a95:	e8 71 a2 00 00       	call   c010cd0b <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a9a:	c7 44 24 08 aa 5f 11 	movl   $0xc0115faa,0x8(%esp)
c0102aa1:	c0 
c0102aa2:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102aa9:	00 
c0102aaa:	c7 04 24 ae 5c 11 c0 	movl   $0xc0115cae,(%esp)
c0102ab1:	e8 3d da ff ff       	call   c01004f3 <__panic>
        break;
c0102ab6:	90                   	nop

    }
}
c0102ab7:	c9                   	leave  
c0102ab8:	c3                   	ret    

c0102ab9 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102ab9:	55                   	push   %ebp
c0102aba:	89 e5                	mov    %esp,%ebp
c0102abc:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102abf:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102ac4:	85 c0                	test   %eax,%eax
c0102ac6:	75 0d                	jne    c0102ad5 <trap+0x1c>
        trap_dispatch(tf);
c0102ac8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102acb:	89 04 24             	mov    %eax,(%esp)
c0102ace:	e8 f7 fd ff ff       	call   c01028ca <trap_dispatch>
c0102ad3:	eb 6c                	jmp    c0102b41 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102ad5:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102ada:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102add:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ae0:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102ae5:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ae8:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aee:	89 04 24             	mov    %eax,(%esp)
c0102af1:	e8 f9 f9 ff ff       	call   c01024ef <trap_in_kernel>
c0102af6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0102afc:	89 04 24             	mov    %eax,(%esp)
c0102aff:	e8 c6 fd ff ff       	call   c01028ca <trap_dispatch>
    
        current->tf = otf;
c0102b04:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102b09:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b0c:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b13:	75 2c                	jne    c0102b41 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102b15:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102b1a:	8b 40 44             	mov    0x44(%eax),%eax
c0102b1d:	83 e0 01             	and    $0x1,%eax
c0102b20:	85 c0                	test   %eax,%eax
c0102b22:	74 0c                	je     c0102b30 <trap+0x77>
                do_exit(-E_KILLED);
c0102b24:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b2b:	e8 db a1 00 00       	call   c010cd0b <do_exit>
            }
            if (current->need_resched) {
c0102b30:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0102b35:	8b 40 10             	mov    0x10(%eax),%eax
c0102b38:	85 c0                	test   %eax,%eax
c0102b3a:	74 05                	je     c0102b41 <trap+0x88>
                schedule();
c0102b3c:	e8 0b b9 00 00       	call   c010e44c <schedule>
            }
        }
    }
}
c0102b41:	c9                   	leave  
c0102b42:	c3                   	ret    

c0102b43 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b43:	6a 00                	push   $0x0
  pushl $0
c0102b45:	6a 00                	push   $0x0
  jmp __alltraps
c0102b47:	e9 67 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b4c <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b4c:	6a 00                	push   $0x0
  pushl $1
c0102b4e:	6a 01                	push   $0x1
  jmp __alltraps
c0102b50:	e9 5e 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b55 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b55:	6a 00                	push   $0x0
  pushl $2
c0102b57:	6a 02                	push   $0x2
  jmp __alltraps
c0102b59:	e9 55 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b5e <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b5e:	6a 00                	push   $0x0
  pushl $3
c0102b60:	6a 03                	push   $0x3
  jmp __alltraps
c0102b62:	e9 4c 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b67 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b67:	6a 00                	push   $0x0
  pushl $4
c0102b69:	6a 04                	push   $0x4
  jmp __alltraps
c0102b6b:	e9 43 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b70 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b70:	6a 00                	push   $0x0
  pushl $5
c0102b72:	6a 05                	push   $0x5
  jmp __alltraps
c0102b74:	e9 3a 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b79 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b79:	6a 00                	push   $0x0
  pushl $6
c0102b7b:	6a 06                	push   $0x6
  jmp __alltraps
c0102b7d:	e9 31 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b82 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b82:	6a 00                	push   $0x0
  pushl $7
c0102b84:	6a 07                	push   $0x7
  jmp __alltraps
c0102b86:	e9 28 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b8b <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b8b:	6a 08                	push   $0x8
  jmp __alltraps
c0102b8d:	e9 21 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b92 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b92:	6a 09                	push   $0x9
  jmp __alltraps
c0102b94:	e9 1a 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102b99 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b99:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b9b:	e9 13 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102ba0 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ba0:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ba2:	e9 0c 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102ba7 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ba7:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ba9:	e9 05 0a 00 00       	jmp    c01035b3 <__alltraps>

c0102bae <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bae:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bb0:	e9 fe 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bb5 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bb5:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bb7:	e9 f7 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bbc <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bbc:	6a 00                	push   $0x0
  pushl $15
c0102bbe:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bc0:	e9 ee 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bc5 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bc5:	6a 00                	push   $0x0
  pushl $16
c0102bc7:	6a 10                	push   $0x10
  jmp __alltraps
c0102bc9:	e9 e5 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bce <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bce:	6a 11                	push   $0x11
  jmp __alltraps
c0102bd0:	e9 de 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bd5 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bd5:	6a 00                	push   $0x0
  pushl $18
c0102bd7:	6a 12                	push   $0x12
  jmp __alltraps
c0102bd9:	e9 d5 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bde <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bde:	6a 00                	push   $0x0
  pushl $19
c0102be0:	6a 13                	push   $0x13
  jmp __alltraps
c0102be2:	e9 cc 09 00 00       	jmp    c01035b3 <__alltraps>

c0102be7 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102be7:	6a 00                	push   $0x0
  pushl $20
c0102be9:	6a 14                	push   $0x14
  jmp __alltraps
c0102beb:	e9 c3 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bf0 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bf0:	6a 00                	push   $0x0
  pushl $21
c0102bf2:	6a 15                	push   $0x15
  jmp __alltraps
c0102bf4:	e9 ba 09 00 00       	jmp    c01035b3 <__alltraps>

c0102bf9 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bf9:	6a 00                	push   $0x0
  pushl $22
c0102bfb:	6a 16                	push   $0x16
  jmp __alltraps
c0102bfd:	e9 b1 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c02 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c02:	6a 00                	push   $0x0
  pushl $23
c0102c04:	6a 17                	push   $0x17
  jmp __alltraps
c0102c06:	e9 a8 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c0b <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c0b:	6a 00                	push   $0x0
  pushl $24
c0102c0d:	6a 18                	push   $0x18
  jmp __alltraps
c0102c0f:	e9 9f 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c14 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c14:	6a 00                	push   $0x0
  pushl $25
c0102c16:	6a 19                	push   $0x19
  jmp __alltraps
c0102c18:	e9 96 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c1d <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c1d:	6a 00                	push   $0x0
  pushl $26
c0102c1f:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c21:	e9 8d 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c26 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c26:	6a 00                	push   $0x0
  pushl $27
c0102c28:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c2a:	e9 84 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c2f <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c2f:	6a 00                	push   $0x0
  pushl $28
c0102c31:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c33:	e9 7b 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c38 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c38:	6a 00                	push   $0x0
  pushl $29
c0102c3a:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c3c:	e9 72 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c41 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c41:	6a 00                	push   $0x0
  pushl $30
c0102c43:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c45:	e9 69 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c4a <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c4a:	6a 00                	push   $0x0
  pushl $31
c0102c4c:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c4e:	e9 60 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c53 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c53:	6a 00                	push   $0x0
  pushl $32
c0102c55:	6a 20                	push   $0x20
  jmp __alltraps
c0102c57:	e9 57 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c5c <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c5c:	6a 00                	push   $0x0
  pushl $33
c0102c5e:	6a 21                	push   $0x21
  jmp __alltraps
c0102c60:	e9 4e 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c65 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c65:	6a 00                	push   $0x0
  pushl $34
c0102c67:	6a 22                	push   $0x22
  jmp __alltraps
c0102c69:	e9 45 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c6e <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c6e:	6a 00                	push   $0x0
  pushl $35
c0102c70:	6a 23                	push   $0x23
  jmp __alltraps
c0102c72:	e9 3c 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c77 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c77:	6a 00                	push   $0x0
  pushl $36
c0102c79:	6a 24                	push   $0x24
  jmp __alltraps
c0102c7b:	e9 33 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c80 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c80:	6a 00                	push   $0x0
  pushl $37
c0102c82:	6a 25                	push   $0x25
  jmp __alltraps
c0102c84:	e9 2a 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c89 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c89:	6a 00                	push   $0x0
  pushl $38
c0102c8b:	6a 26                	push   $0x26
  jmp __alltraps
c0102c8d:	e9 21 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c92 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c92:	6a 00                	push   $0x0
  pushl $39
c0102c94:	6a 27                	push   $0x27
  jmp __alltraps
c0102c96:	e9 18 09 00 00       	jmp    c01035b3 <__alltraps>

c0102c9b <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c9b:	6a 00                	push   $0x0
  pushl $40
c0102c9d:	6a 28                	push   $0x28
  jmp __alltraps
c0102c9f:	e9 0f 09 00 00       	jmp    c01035b3 <__alltraps>

c0102ca4 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ca4:	6a 00                	push   $0x0
  pushl $41
c0102ca6:	6a 29                	push   $0x29
  jmp __alltraps
c0102ca8:	e9 06 09 00 00       	jmp    c01035b3 <__alltraps>

c0102cad <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cad:	6a 00                	push   $0x0
  pushl $42
c0102caf:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cb1:	e9 fd 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cb6 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cb6:	6a 00                	push   $0x0
  pushl $43
c0102cb8:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cba:	e9 f4 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cbf <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cbf:	6a 00                	push   $0x0
  pushl $44
c0102cc1:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cc3:	e9 eb 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cc8 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cc8:	6a 00                	push   $0x0
  pushl $45
c0102cca:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102ccc:	e9 e2 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cd1 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cd1:	6a 00                	push   $0x0
  pushl $46
c0102cd3:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cd5:	e9 d9 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cda <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cda:	6a 00                	push   $0x0
  pushl $47
c0102cdc:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cde:	e9 d0 08 00 00       	jmp    c01035b3 <__alltraps>

c0102ce3 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ce3:	6a 00                	push   $0x0
  pushl $48
c0102ce5:	6a 30                	push   $0x30
  jmp __alltraps
c0102ce7:	e9 c7 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cec <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cec:	6a 00                	push   $0x0
  pushl $49
c0102cee:	6a 31                	push   $0x31
  jmp __alltraps
c0102cf0:	e9 be 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cf5 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cf5:	6a 00                	push   $0x0
  pushl $50
c0102cf7:	6a 32                	push   $0x32
  jmp __alltraps
c0102cf9:	e9 b5 08 00 00       	jmp    c01035b3 <__alltraps>

c0102cfe <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cfe:	6a 00                	push   $0x0
  pushl $51
c0102d00:	6a 33                	push   $0x33
  jmp __alltraps
c0102d02:	e9 ac 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d07 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d07:	6a 00                	push   $0x0
  pushl $52
c0102d09:	6a 34                	push   $0x34
  jmp __alltraps
c0102d0b:	e9 a3 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d10 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d10:	6a 00                	push   $0x0
  pushl $53
c0102d12:	6a 35                	push   $0x35
  jmp __alltraps
c0102d14:	e9 9a 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d19 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d19:	6a 00                	push   $0x0
  pushl $54
c0102d1b:	6a 36                	push   $0x36
  jmp __alltraps
c0102d1d:	e9 91 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d22 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d22:	6a 00                	push   $0x0
  pushl $55
c0102d24:	6a 37                	push   $0x37
  jmp __alltraps
c0102d26:	e9 88 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d2b <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d2b:	6a 00                	push   $0x0
  pushl $56
c0102d2d:	6a 38                	push   $0x38
  jmp __alltraps
c0102d2f:	e9 7f 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d34 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d34:	6a 00                	push   $0x0
  pushl $57
c0102d36:	6a 39                	push   $0x39
  jmp __alltraps
c0102d38:	e9 76 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d3d <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d3d:	6a 00                	push   $0x0
  pushl $58
c0102d3f:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d41:	e9 6d 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d46 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d46:	6a 00                	push   $0x0
  pushl $59
c0102d48:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d4a:	e9 64 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d4f <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d4f:	6a 00                	push   $0x0
  pushl $60
c0102d51:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d53:	e9 5b 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d58 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d58:	6a 00                	push   $0x0
  pushl $61
c0102d5a:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d5c:	e9 52 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d61 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d61:	6a 00                	push   $0x0
  pushl $62
c0102d63:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d65:	e9 49 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d6a <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d6a:	6a 00                	push   $0x0
  pushl $63
c0102d6c:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d6e:	e9 40 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d73 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d73:	6a 00                	push   $0x0
  pushl $64
c0102d75:	6a 40                	push   $0x40
  jmp __alltraps
c0102d77:	e9 37 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d7c <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d7c:	6a 00                	push   $0x0
  pushl $65
c0102d7e:	6a 41                	push   $0x41
  jmp __alltraps
c0102d80:	e9 2e 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d85 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d85:	6a 00                	push   $0x0
  pushl $66
c0102d87:	6a 42                	push   $0x42
  jmp __alltraps
c0102d89:	e9 25 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d8e <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d8e:	6a 00                	push   $0x0
  pushl $67
c0102d90:	6a 43                	push   $0x43
  jmp __alltraps
c0102d92:	e9 1c 08 00 00       	jmp    c01035b3 <__alltraps>

c0102d97 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d97:	6a 00                	push   $0x0
  pushl $68
c0102d99:	6a 44                	push   $0x44
  jmp __alltraps
c0102d9b:	e9 13 08 00 00       	jmp    c01035b3 <__alltraps>

c0102da0 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102da0:	6a 00                	push   $0x0
  pushl $69
c0102da2:	6a 45                	push   $0x45
  jmp __alltraps
c0102da4:	e9 0a 08 00 00       	jmp    c01035b3 <__alltraps>

c0102da9 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102da9:	6a 00                	push   $0x0
  pushl $70
c0102dab:	6a 46                	push   $0x46
  jmp __alltraps
c0102dad:	e9 01 08 00 00       	jmp    c01035b3 <__alltraps>

c0102db2 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102db2:	6a 00                	push   $0x0
  pushl $71
c0102db4:	6a 47                	push   $0x47
  jmp __alltraps
c0102db6:	e9 f8 07 00 00       	jmp    c01035b3 <__alltraps>

c0102dbb <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dbb:	6a 00                	push   $0x0
  pushl $72
c0102dbd:	6a 48                	push   $0x48
  jmp __alltraps
c0102dbf:	e9 ef 07 00 00       	jmp    c01035b3 <__alltraps>

c0102dc4 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dc4:	6a 00                	push   $0x0
  pushl $73
c0102dc6:	6a 49                	push   $0x49
  jmp __alltraps
c0102dc8:	e9 e6 07 00 00       	jmp    c01035b3 <__alltraps>

c0102dcd <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dcd:	6a 00                	push   $0x0
  pushl $74
c0102dcf:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dd1:	e9 dd 07 00 00       	jmp    c01035b3 <__alltraps>

c0102dd6 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dd6:	6a 00                	push   $0x0
  pushl $75
c0102dd8:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dda:	e9 d4 07 00 00       	jmp    c01035b3 <__alltraps>

c0102ddf <vector76>:
.globl vector76
vector76:
  pushl $0
c0102ddf:	6a 00                	push   $0x0
  pushl $76
c0102de1:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102de3:	e9 cb 07 00 00       	jmp    c01035b3 <__alltraps>

c0102de8 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102de8:	6a 00                	push   $0x0
  pushl $77
c0102dea:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dec:	e9 c2 07 00 00       	jmp    c01035b3 <__alltraps>

c0102df1 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102df1:	6a 00                	push   $0x0
  pushl $78
c0102df3:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102df5:	e9 b9 07 00 00       	jmp    c01035b3 <__alltraps>

c0102dfa <vector79>:
.globl vector79
vector79:
  pushl $0
c0102dfa:	6a 00                	push   $0x0
  pushl $79
c0102dfc:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102dfe:	e9 b0 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e03 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e03:	6a 00                	push   $0x0
  pushl $80
c0102e05:	6a 50                	push   $0x50
  jmp __alltraps
c0102e07:	e9 a7 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e0c <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e0c:	6a 00                	push   $0x0
  pushl $81
c0102e0e:	6a 51                	push   $0x51
  jmp __alltraps
c0102e10:	e9 9e 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e15 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e15:	6a 00                	push   $0x0
  pushl $82
c0102e17:	6a 52                	push   $0x52
  jmp __alltraps
c0102e19:	e9 95 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e1e <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e1e:	6a 00                	push   $0x0
  pushl $83
c0102e20:	6a 53                	push   $0x53
  jmp __alltraps
c0102e22:	e9 8c 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e27 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e27:	6a 00                	push   $0x0
  pushl $84
c0102e29:	6a 54                	push   $0x54
  jmp __alltraps
c0102e2b:	e9 83 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e30 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e30:	6a 00                	push   $0x0
  pushl $85
c0102e32:	6a 55                	push   $0x55
  jmp __alltraps
c0102e34:	e9 7a 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e39 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e39:	6a 00                	push   $0x0
  pushl $86
c0102e3b:	6a 56                	push   $0x56
  jmp __alltraps
c0102e3d:	e9 71 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e42 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e42:	6a 00                	push   $0x0
  pushl $87
c0102e44:	6a 57                	push   $0x57
  jmp __alltraps
c0102e46:	e9 68 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e4b <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e4b:	6a 00                	push   $0x0
  pushl $88
c0102e4d:	6a 58                	push   $0x58
  jmp __alltraps
c0102e4f:	e9 5f 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e54 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e54:	6a 00                	push   $0x0
  pushl $89
c0102e56:	6a 59                	push   $0x59
  jmp __alltraps
c0102e58:	e9 56 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e5d <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e5d:	6a 00                	push   $0x0
  pushl $90
c0102e5f:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e61:	e9 4d 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e66 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e66:	6a 00                	push   $0x0
  pushl $91
c0102e68:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e6a:	e9 44 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e6f <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e6f:	6a 00                	push   $0x0
  pushl $92
c0102e71:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e73:	e9 3b 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e78 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e78:	6a 00                	push   $0x0
  pushl $93
c0102e7a:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e7c:	e9 32 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e81 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e81:	6a 00                	push   $0x0
  pushl $94
c0102e83:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e85:	e9 29 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e8a <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e8a:	6a 00                	push   $0x0
  pushl $95
c0102e8c:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e8e:	e9 20 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e93 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e93:	6a 00                	push   $0x0
  pushl $96
c0102e95:	6a 60                	push   $0x60
  jmp __alltraps
c0102e97:	e9 17 07 00 00       	jmp    c01035b3 <__alltraps>

c0102e9c <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e9c:	6a 00                	push   $0x0
  pushl $97
c0102e9e:	6a 61                	push   $0x61
  jmp __alltraps
c0102ea0:	e9 0e 07 00 00       	jmp    c01035b3 <__alltraps>

c0102ea5 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ea5:	6a 00                	push   $0x0
  pushl $98
c0102ea7:	6a 62                	push   $0x62
  jmp __alltraps
c0102ea9:	e9 05 07 00 00       	jmp    c01035b3 <__alltraps>

c0102eae <vector99>:
.globl vector99
vector99:
  pushl $0
c0102eae:	6a 00                	push   $0x0
  pushl $99
c0102eb0:	6a 63                	push   $0x63
  jmp __alltraps
c0102eb2:	e9 fc 06 00 00       	jmp    c01035b3 <__alltraps>

c0102eb7 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eb7:	6a 00                	push   $0x0
  pushl $100
c0102eb9:	6a 64                	push   $0x64
  jmp __alltraps
c0102ebb:	e9 f3 06 00 00       	jmp    c01035b3 <__alltraps>

c0102ec0 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ec0:	6a 00                	push   $0x0
  pushl $101
c0102ec2:	6a 65                	push   $0x65
  jmp __alltraps
c0102ec4:	e9 ea 06 00 00       	jmp    c01035b3 <__alltraps>

c0102ec9 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ec9:	6a 00                	push   $0x0
  pushl $102
c0102ecb:	6a 66                	push   $0x66
  jmp __alltraps
c0102ecd:	e9 e1 06 00 00       	jmp    c01035b3 <__alltraps>

c0102ed2 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ed2:	6a 00                	push   $0x0
  pushl $103
c0102ed4:	6a 67                	push   $0x67
  jmp __alltraps
c0102ed6:	e9 d8 06 00 00       	jmp    c01035b3 <__alltraps>

c0102edb <vector104>:
.globl vector104
vector104:
  pushl $0
c0102edb:	6a 00                	push   $0x0
  pushl $104
c0102edd:	6a 68                	push   $0x68
  jmp __alltraps
c0102edf:	e9 cf 06 00 00       	jmp    c01035b3 <__alltraps>

c0102ee4 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ee4:	6a 00                	push   $0x0
  pushl $105
c0102ee6:	6a 69                	push   $0x69
  jmp __alltraps
c0102ee8:	e9 c6 06 00 00       	jmp    c01035b3 <__alltraps>

c0102eed <vector106>:
.globl vector106
vector106:
  pushl $0
c0102eed:	6a 00                	push   $0x0
  pushl $106
c0102eef:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ef1:	e9 bd 06 00 00       	jmp    c01035b3 <__alltraps>

c0102ef6 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ef6:	6a 00                	push   $0x0
  pushl $107
c0102ef8:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102efa:	e9 b4 06 00 00       	jmp    c01035b3 <__alltraps>

c0102eff <vector108>:
.globl vector108
vector108:
  pushl $0
c0102eff:	6a 00                	push   $0x0
  pushl $108
c0102f01:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f03:	e9 ab 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f08 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f08:	6a 00                	push   $0x0
  pushl $109
c0102f0a:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f0c:	e9 a2 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f11 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f11:	6a 00                	push   $0x0
  pushl $110
c0102f13:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f15:	e9 99 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f1a <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f1a:	6a 00                	push   $0x0
  pushl $111
c0102f1c:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f1e:	e9 90 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f23 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f23:	6a 00                	push   $0x0
  pushl $112
c0102f25:	6a 70                	push   $0x70
  jmp __alltraps
c0102f27:	e9 87 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f2c <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f2c:	6a 00                	push   $0x0
  pushl $113
c0102f2e:	6a 71                	push   $0x71
  jmp __alltraps
c0102f30:	e9 7e 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f35 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f35:	6a 00                	push   $0x0
  pushl $114
c0102f37:	6a 72                	push   $0x72
  jmp __alltraps
c0102f39:	e9 75 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f3e <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f3e:	6a 00                	push   $0x0
  pushl $115
c0102f40:	6a 73                	push   $0x73
  jmp __alltraps
c0102f42:	e9 6c 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f47 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f47:	6a 00                	push   $0x0
  pushl $116
c0102f49:	6a 74                	push   $0x74
  jmp __alltraps
c0102f4b:	e9 63 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f50 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f50:	6a 00                	push   $0x0
  pushl $117
c0102f52:	6a 75                	push   $0x75
  jmp __alltraps
c0102f54:	e9 5a 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f59 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f59:	6a 00                	push   $0x0
  pushl $118
c0102f5b:	6a 76                	push   $0x76
  jmp __alltraps
c0102f5d:	e9 51 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f62 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f62:	6a 00                	push   $0x0
  pushl $119
c0102f64:	6a 77                	push   $0x77
  jmp __alltraps
c0102f66:	e9 48 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f6b <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f6b:	6a 00                	push   $0x0
  pushl $120
c0102f6d:	6a 78                	push   $0x78
  jmp __alltraps
c0102f6f:	e9 3f 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f74 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f74:	6a 00                	push   $0x0
  pushl $121
c0102f76:	6a 79                	push   $0x79
  jmp __alltraps
c0102f78:	e9 36 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f7d <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f7d:	6a 00                	push   $0x0
  pushl $122
c0102f7f:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f81:	e9 2d 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f86 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f86:	6a 00                	push   $0x0
  pushl $123
c0102f88:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f8a:	e9 24 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f8f <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f8f:	6a 00                	push   $0x0
  pushl $124
c0102f91:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f93:	e9 1b 06 00 00       	jmp    c01035b3 <__alltraps>

c0102f98 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f98:	6a 00                	push   $0x0
  pushl $125
c0102f9a:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f9c:	e9 12 06 00 00       	jmp    c01035b3 <__alltraps>

c0102fa1 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fa1:	6a 00                	push   $0x0
  pushl $126
c0102fa3:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fa5:	e9 09 06 00 00       	jmp    c01035b3 <__alltraps>

c0102faa <vector127>:
.globl vector127
vector127:
  pushl $0
c0102faa:	6a 00                	push   $0x0
  pushl $127
c0102fac:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fae:	e9 00 06 00 00       	jmp    c01035b3 <__alltraps>

c0102fb3 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fb3:	6a 00                	push   $0x0
  pushl $128
c0102fb5:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fba:	e9 f4 05 00 00       	jmp    c01035b3 <__alltraps>

c0102fbf <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fbf:	6a 00                	push   $0x0
  pushl $129
c0102fc1:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fc6:	e9 e8 05 00 00       	jmp    c01035b3 <__alltraps>

c0102fcb <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fcb:	6a 00                	push   $0x0
  pushl $130
c0102fcd:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fd2:	e9 dc 05 00 00       	jmp    c01035b3 <__alltraps>

c0102fd7 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fd7:	6a 00                	push   $0x0
  pushl $131
c0102fd9:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fde:	e9 d0 05 00 00       	jmp    c01035b3 <__alltraps>

c0102fe3 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fe3:	6a 00                	push   $0x0
  pushl $132
c0102fe5:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fea:	e9 c4 05 00 00       	jmp    c01035b3 <__alltraps>

c0102fef <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fef:	6a 00                	push   $0x0
  pushl $133
c0102ff1:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ff6:	e9 b8 05 00 00       	jmp    c01035b3 <__alltraps>

c0102ffb <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ffb:	6a 00                	push   $0x0
  pushl $134
c0102ffd:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103002:	e9 ac 05 00 00       	jmp    c01035b3 <__alltraps>

c0103007 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103007:	6a 00                	push   $0x0
  pushl $135
c0103009:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010300e:	e9 a0 05 00 00       	jmp    c01035b3 <__alltraps>

c0103013 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103013:	6a 00                	push   $0x0
  pushl $136
c0103015:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010301a:	e9 94 05 00 00       	jmp    c01035b3 <__alltraps>

c010301f <vector137>:
.globl vector137
vector137:
  pushl $0
c010301f:	6a 00                	push   $0x0
  pushl $137
c0103021:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103026:	e9 88 05 00 00       	jmp    c01035b3 <__alltraps>

c010302b <vector138>:
.globl vector138
vector138:
  pushl $0
c010302b:	6a 00                	push   $0x0
  pushl $138
c010302d:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103032:	e9 7c 05 00 00       	jmp    c01035b3 <__alltraps>

c0103037 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103037:	6a 00                	push   $0x0
  pushl $139
c0103039:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010303e:	e9 70 05 00 00       	jmp    c01035b3 <__alltraps>

c0103043 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103043:	6a 00                	push   $0x0
  pushl $140
c0103045:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010304a:	e9 64 05 00 00       	jmp    c01035b3 <__alltraps>

c010304f <vector141>:
.globl vector141
vector141:
  pushl $0
c010304f:	6a 00                	push   $0x0
  pushl $141
c0103051:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103056:	e9 58 05 00 00       	jmp    c01035b3 <__alltraps>

c010305b <vector142>:
.globl vector142
vector142:
  pushl $0
c010305b:	6a 00                	push   $0x0
  pushl $142
c010305d:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103062:	e9 4c 05 00 00       	jmp    c01035b3 <__alltraps>

c0103067 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103067:	6a 00                	push   $0x0
  pushl $143
c0103069:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010306e:	e9 40 05 00 00       	jmp    c01035b3 <__alltraps>

c0103073 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103073:	6a 00                	push   $0x0
  pushl $144
c0103075:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010307a:	e9 34 05 00 00       	jmp    c01035b3 <__alltraps>

c010307f <vector145>:
.globl vector145
vector145:
  pushl $0
c010307f:	6a 00                	push   $0x0
  pushl $145
c0103081:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103086:	e9 28 05 00 00       	jmp    c01035b3 <__alltraps>

c010308b <vector146>:
.globl vector146
vector146:
  pushl $0
c010308b:	6a 00                	push   $0x0
  pushl $146
c010308d:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103092:	e9 1c 05 00 00       	jmp    c01035b3 <__alltraps>

c0103097 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103097:	6a 00                	push   $0x0
  pushl $147
c0103099:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010309e:	e9 10 05 00 00       	jmp    c01035b3 <__alltraps>

c01030a3 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030a3:	6a 00                	push   $0x0
  pushl $148
c01030a5:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030aa:	e9 04 05 00 00       	jmp    c01035b3 <__alltraps>

c01030af <vector149>:
.globl vector149
vector149:
  pushl $0
c01030af:	6a 00                	push   $0x0
  pushl $149
c01030b1:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030b6:	e9 f8 04 00 00       	jmp    c01035b3 <__alltraps>

c01030bb <vector150>:
.globl vector150
vector150:
  pushl $0
c01030bb:	6a 00                	push   $0x0
  pushl $150
c01030bd:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030c2:	e9 ec 04 00 00       	jmp    c01035b3 <__alltraps>

c01030c7 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030c7:	6a 00                	push   $0x0
  pushl $151
c01030c9:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030ce:	e9 e0 04 00 00       	jmp    c01035b3 <__alltraps>

c01030d3 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030d3:	6a 00                	push   $0x0
  pushl $152
c01030d5:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030da:	e9 d4 04 00 00       	jmp    c01035b3 <__alltraps>

c01030df <vector153>:
.globl vector153
vector153:
  pushl $0
c01030df:	6a 00                	push   $0x0
  pushl $153
c01030e1:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030e6:	e9 c8 04 00 00       	jmp    c01035b3 <__alltraps>

c01030eb <vector154>:
.globl vector154
vector154:
  pushl $0
c01030eb:	6a 00                	push   $0x0
  pushl $154
c01030ed:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030f2:	e9 bc 04 00 00       	jmp    c01035b3 <__alltraps>

c01030f7 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030f7:	6a 00                	push   $0x0
  pushl $155
c01030f9:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030fe:	e9 b0 04 00 00       	jmp    c01035b3 <__alltraps>

c0103103 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103103:	6a 00                	push   $0x0
  pushl $156
c0103105:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010310a:	e9 a4 04 00 00       	jmp    c01035b3 <__alltraps>

c010310f <vector157>:
.globl vector157
vector157:
  pushl $0
c010310f:	6a 00                	push   $0x0
  pushl $157
c0103111:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103116:	e9 98 04 00 00       	jmp    c01035b3 <__alltraps>

c010311b <vector158>:
.globl vector158
vector158:
  pushl $0
c010311b:	6a 00                	push   $0x0
  pushl $158
c010311d:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103122:	e9 8c 04 00 00       	jmp    c01035b3 <__alltraps>

c0103127 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103127:	6a 00                	push   $0x0
  pushl $159
c0103129:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010312e:	e9 80 04 00 00       	jmp    c01035b3 <__alltraps>

c0103133 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103133:	6a 00                	push   $0x0
  pushl $160
c0103135:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010313a:	e9 74 04 00 00       	jmp    c01035b3 <__alltraps>

c010313f <vector161>:
.globl vector161
vector161:
  pushl $0
c010313f:	6a 00                	push   $0x0
  pushl $161
c0103141:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103146:	e9 68 04 00 00       	jmp    c01035b3 <__alltraps>

c010314b <vector162>:
.globl vector162
vector162:
  pushl $0
c010314b:	6a 00                	push   $0x0
  pushl $162
c010314d:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103152:	e9 5c 04 00 00       	jmp    c01035b3 <__alltraps>

c0103157 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103157:	6a 00                	push   $0x0
  pushl $163
c0103159:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010315e:	e9 50 04 00 00       	jmp    c01035b3 <__alltraps>

c0103163 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103163:	6a 00                	push   $0x0
  pushl $164
c0103165:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010316a:	e9 44 04 00 00       	jmp    c01035b3 <__alltraps>

c010316f <vector165>:
.globl vector165
vector165:
  pushl $0
c010316f:	6a 00                	push   $0x0
  pushl $165
c0103171:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103176:	e9 38 04 00 00       	jmp    c01035b3 <__alltraps>

c010317b <vector166>:
.globl vector166
vector166:
  pushl $0
c010317b:	6a 00                	push   $0x0
  pushl $166
c010317d:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103182:	e9 2c 04 00 00       	jmp    c01035b3 <__alltraps>

c0103187 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103187:	6a 00                	push   $0x0
  pushl $167
c0103189:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010318e:	e9 20 04 00 00       	jmp    c01035b3 <__alltraps>

c0103193 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103193:	6a 00                	push   $0x0
  pushl $168
c0103195:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010319a:	e9 14 04 00 00       	jmp    c01035b3 <__alltraps>

c010319f <vector169>:
.globl vector169
vector169:
  pushl $0
c010319f:	6a 00                	push   $0x0
  pushl $169
c01031a1:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031a6:	e9 08 04 00 00       	jmp    c01035b3 <__alltraps>

c01031ab <vector170>:
.globl vector170
vector170:
  pushl $0
c01031ab:	6a 00                	push   $0x0
  pushl $170
c01031ad:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031b2:	e9 fc 03 00 00       	jmp    c01035b3 <__alltraps>

c01031b7 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031b7:	6a 00                	push   $0x0
  pushl $171
c01031b9:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031be:	e9 f0 03 00 00       	jmp    c01035b3 <__alltraps>

c01031c3 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031c3:	6a 00                	push   $0x0
  pushl $172
c01031c5:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031ca:	e9 e4 03 00 00       	jmp    c01035b3 <__alltraps>

c01031cf <vector173>:
.globl vector173
vector173:
  pushl $0
c01031cf:	6a 00                	push   $0x0
  pushl $173
c01031d1:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031d6:	e9 d8 03 00 00       	jmp    c01035b3 <__alltraps>

c01031db <vector174>:
.globl vector174
vector174:
  pushl $0
c01031db:	6a 00                	push   $0x0
  pushl $174
c01031dd:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031e2:	e9 cc 03 00 00       	jmp    c01035b3 <__alltraps>

c01031e7 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031e7:	6a 00                	push   $0x0
  pushl $175
c01031e9:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031ee:	e9 c0 03 00 00       	jmp    c01035b3 <__alltraps>

c01031f3 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031f3:	6a 00                	push   $0x0
  pushl $176
c01031f5:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031fa:	e9 b4 03 00 00       	jmp    c01035b3 <__alltraps>

c01031ff <vector177>:
.globl vector177
vector177:
  pushl $0
c01031ff:	6a 00                	push   $0x0
  pushl $177
c0103201:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103206:	e9 a8 03 00 00       	jmp    c01035b3 <__alltraps>

c010320b <vector178>:
.globl vector178
vector178:
  pushl $0
c010320b:	6a 00                	push   $0x0
  pushl $178
c010320d:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103212:	e9 9c 03 00 00       	jmp    c01035b3 <__alltraps>

c0103217 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103217:	6a 00                	push   $0x0
  pushl $179
c0103219:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010321e:	e9 90 03 00 00       	jmp    c01035b3 <__alltraps>

c0103223 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103223:	6a 00                	push   $0x0
  pushl $180
c0103225:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010322a:	e9 84 03 00 00       	jmp    c01035b3 <__alltraps>

c010322f <vector181>:
.globl vector181
vector181:
  pushl $0
c010322f:	6a 00                	push   $0x0
  pushl $181
c0103231:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103236:	e9 78 03 00 00       	jmp    c01035b3 <__alltraps>

c010323b <vector182>:
.globl vector182
vector182:
  pushl $0
c010323b:	6a 00                	push   $0x0
  pushl $182
c010323d:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103242:	e9 6c 03 00 00       	jmp    c01035b3 <__alltraps>

c0103247 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103247:	6a 00                	push   $0x0
  pushl $183
c0103249:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010324e:	e9 60 03 00 00       	jmp    c01035b3 <__alltraps>

c0103253 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103253:	6a 00                	push   $0x0
  pushl $184
c0103255:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010325a:	e9 54 03 00 00       	jmp    c01035b3 <__alltraps>

c010325f <vector185>:
.globl vector185
vector185:
  pushl $0
c010325f:	6a 00                	push   $0x0
  pushl $185
c0103261:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103266:	e9 48 03 00 00       	jmp    c01035b3 <__alltraps>

c010326b <vector186>:
.globl vector186
vector186:
  pushl $0
c010326b:	6a 00                	push   $0x0
  pushl $186
c010326d:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103272:	e9 3c 03 00 00       	jmp    c01035b3 <__alltraps>

c0103277 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103277:	6a 00                	push   $0x0
  pushl $187
c0103279:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010327e:	e9 30 03 00 00       	jmp    c01035b3 <__alltraps>

c0103283 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103283:	6a 00                	push   $0x0
  pushl $188
c0103285:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010328a:	e9 24 03 00 00       	jmp    c01035b3 <__alltraps>

c010328f <vector189>:
.globl vector189
vector189:
  pushl $0
c010328f:	6a 00                	push   $0x0
  pushl $189
c0103291:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103296:	e9 18 03 00 00       	jmp    c01035b3 <__alltraps>

c010329b <vector190>:
.globl vector190
vector190:
  pushl $0
c010329b:	6a 00                	push   $0x0
  pushl $190
c010329d:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032a2:	e9 0c 03 00 00       	jmp    c01035b3 <__alltraps>

c01032a7 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032a7:	6a 00                	push   $0x0
  pushl $191
c01032a9:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032ae:	e9 00 03 00 00       	jmp    c01035b3 <__alltraps>

c01032b3 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032b3:	6a 00                	push   $0x0
  pushl $192
c01032b5:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032ba:	e9 f4 02 00 00       	jmp    c01035b3 <__alltraps>

c01032bf <vector193>:
.globl vector193
vector193:
  pushl $0
c01032bf:	6a 00                	push   $0x0
  pushl $193
c01032c1:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032c6:	e9 e8 02 00 00       	jmp    c01035b3 <__alltraps>

c01032cb <vector194>:
.globl vector194
vector194:
  pushl $0
c01032cb:	6a 00                	push   $0x0
  pushl $194
c01032cd:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032d2:	e9 dc 02 00 00       	jmp    c01035b3 <__alltraps>

c01032d7 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032d7:	6a 00                	push   $0x0
  pushl $195
c01032d9:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032de:	e9 d0 02 00 00       	jmp    c01035b3 <__alltraps>

c01032e3 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032e3:	6a 00                	push   $0x0
  pushl $196
c01032e5:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032ea:	e9 c4 02 00 00       	jmp    c01035b3 <__alltraps>

c01032ef <vector197>:
.globl vector197
vector197:
  pushl $0
c01032ef:	6a 00                	push   $0x0
  pushl $197
c01032f1:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032f6:	e9 b8 02 00 00       	jmp    c01035b3 <__alltraps>

c01032fb <vector198>:
.globl vector198
vector198:
  pushl $0
c01032fb:	6a 00                	push   $0x0
  pushl $198
c01032fd:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103302:	e9 ac 02 00 00       	jmp    c01035b3 <__alltraps>

c0103307 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103307:	6a 00                	push   $0x0
  pushl $199
c0103309:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010330e:	e9 a0 02 00 00       	jmp    c01035b3 <__alltraps>

c0103313 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103313:	6a 00                	push   $0x0
  pushl $200
c0103315:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010331a:	e9 94 02 00 00       	jmp    c01035b3 <__alltraps>

c010331f <vector201>:
.globl vector201
vector201:
  pushl $0
c010331f:	6a 00                	push   $0x0
  pushl $201
c0103321:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103326:	e9 88 02 00 00       	jmp    c01035b3 <__alltraps>

c010332b <vector202>:
.globl vector202
vector202:
  pushl $0
c010332b:	6a 00                	push   $0x0
  pushl $202
c010332d:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103332:	e9 7c 02 00 00       	jmp    c01035b3 <__alltraps>

c0103337 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103337:	6a 00                	push   $0x0
  pushl $203
c0103339:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010333e:	e9 70 02 00 00       	jmp    c01035b3 <__alltraps>

c0103343 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103343:	6a 00                	push   $0x0
  pushl $204
c0103345:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010334a:	e9 64 02 00 00       	jmp    c01035b3 <__alltraps>

c010334f <vector205>:
.globl vector205
vector205:
  pushl $0
c010334f:	6a 00                	push   $0x0
  pushl $205
c0103351:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103356:	e9 58 02 00 00       	jmp    c01035b3 <__alltraps>

c010335b <vector206>:
.globl vector206
vector206:
  pushl $0
c010335b:	6a 00                	push   $0x0
  pushl $206
c010335d:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103362:	e9 4c 02 00 00       	jmp    c01035b3 <__alltraps>

c0103367 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103367:	6a 00                	push   $0x0
  pushl $207
c0103369:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010336e:	e9 40 02 00 00       	jmp    c01035b3 <__alltraps>

c0103373 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103373:	6a 00                	push   $0x0
  pushl $208
c0103375:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010337a:	e9 34 02 00 00       	jmp    c01035b3 <__alltraps>

c010337f <vector209>:
.globl vector209
vector209:
  pushl $0
c010337f:	6a 00                	push   $0x0
  pushl $209
c0103381:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103386:	e9 28 02 00 00       	jmp    c01035b3 <__alltraps>

c010338b <vector210>:
.globl vector210
vector210:
  pushl $0
c010338b:	6a 00                	push   $0x0
  pushl $210
c010338d:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103392:	e9 1c 02 00 00       	jmp    c01035b3 <__alltraps>

c0103397 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103397:	6a 00                	push   $0x0
  pushl $211
c0103399:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010339e:	e9 10 02 00 00       	jmp    c01035b3 <__alltraps>

c01033a3 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033a3:	6a 00                	push   $0x0
  pushl $212
c01033a5:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033aa:	e9 04 02 00 00       	jmp    c01035b3 <__alltraps>

c01033af <vector213>:
.globl vector213
vector213:
  pushl $0
c01033af:	6a 00                	push   $0x0
  pushl $213
c01033b1:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033b6:	e9 f8 01 00 00       	jmp    c01035b3 <__alltraps>

c01033bb <vector214>:
.globl vector214
vector214:
  pushl $0
c01033bb:	6a 00                	push   $0x0
  pushl $214
c01033bd:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033c2:	e9 ec 01 00 00       	jmp    c01035b3 <__alltraps>

c01033c7 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033c7:	6a 00                	push   $0x0
  pushl $215
c01033c9:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033ce:	e9 e0 01 00 00       	jmp    c01035b3 <__alltraps>

c01033d3 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033d3:	6a 00                	push   $0x0
  pushl $216
c01033d5:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033da:	e9 d4 01 00 00       	jmp    c01035b3 <__alltraps>

c01033df <vector217>:
.globl vector217
vector217:
  pushl $0
c01033df:	6a 00                	push   $0x0
  pushl $217
c01033e1:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033e6:	e9 c8 01 00 00       	jmp    c01035b3 <__alltraps>

c01033eb <vector218>:
.globl vector218
vector218:
  pushl $0
c01033eb:	6a 00                	push   $0x0
  pushl $218
c01033ed:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033f2:	e9 bc 01 00 00       	jmp    c01035b3 <__alltraps>

c01033f7 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033f7:	6a 00                	push   $0x0
  pushl $219
c01033f9:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033fe:	e9 b0 01 00 00       	jmp    c01035b3 <__alltraps>

c0103403 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103403:	6a 00                	push   $0x0
  pushl $220
c0103405:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010340a:	e9 a4 01 00 00       	jmp    c01035b3 <__alltraps>

c010340f <vector221>:
.globl vector221
vector221:
  pushl $0
c010340f:	6a 00                	push   $0x0
  pushl $221
c0103411:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103416:	e9 98 01 00 00       	jmp    c01035b3 <__alltraps>

c010341b <vector222>:
.globl vector222
vector222:
  pushl $0
c010341b:	6a 00                	push   $0x0
  pushl $222
c010341d:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103422:	e9 8c 01 00 00       	jmp    c01035b3 <__alltraps>

c0103427 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103427:	6a 00                	push   $0x0
  pushl $223
c0103429:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010342e:	e9 80 01 00 00       	jmp    c01035b3 <__alltraps>

c0103433 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103433:	6a 00                	push   $0x0
  pushl $224
c0103435:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010343a:	e9 74 01 00 00       	jmp    c01035b3 <__alltraps>

c010343f <vector225>:
.globl vector225
vector225:
  pushl $0
c010343f:	6a 00                	push   $0x0
  pushl $225
c0103441:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103446:	e9 68 01 00 00       	jmp    c01035b3 <__alltraps>

c010344b <vector226>:
.globl vector226
vector226:
  pushl $0
c010344b:	6a 00                	push   $0x0
  pushl $226
c010344d:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103452:	e9 5c 01 00 00       	jmp    c01035b3 <__alltraps>

c0103457 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103457:	6a 00                	push   $0x0
  pushl $227
c0103459:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010345e:	e9 50 01 00 00       	jmp    c01035b3 <__alltraps>

c0103463 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103463:	6a 00                	push   $0x0
  pushl $228
c0103465:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010346a:	e9 44 01 00 00       	jmp    c01035b3 <__alltraps>

c010346f <vector229>:
.globl vector229
vector229:
  pushl $0
c010346f:	6a 00                	push   $0x0
  pushl $229
c0103471:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103476:	e9 38 01 00 00       	jmp    c01035b3 <__alltraps>

c010347b <vector230>:
.globl vector230
vector230:
  pushl $0
c010347b:	6a 00                	push   $0x0
  pushl $230
c010347d:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103482:	e9 2c 01 00 00       	jmp    c01035b3 <__alltraps>

c0103487 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103487:	6a 00                	push   $0x0
  pushl $231
c0103489:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010348e:	e9 20 01 00 00       	jmp    c01035b3 <__alltraps>

c0103493 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103493:	6a 00                	push   $0x0
  pushl $232
c0103495:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010349a:	e9 14 01 00 00       	jmp    c01035b3 <__alltraps>

c010349f <vector233>:
.globl vector233
vector233:
  pushl $0
c010349f:	6a 00                	push   $0x0
  pushl $233
c01034a1:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034a6:	e9 08 01 00 00       	jmp    c01035b3 <__alltraps>

c01034ab <vector234>:
.globl vector234
vector234:
  pushl $0
c01034ab:	6a 00                	push   $0x0
  pushl $234
c01034ad:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034b2:	e9 fc 00 00 00       	jmp    c01035b3 <__alltraps>

c01034b7 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034b7:	6a 00                	push   $0x0
  pushl $235
c01034b9:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034be:	e9 f0 00 00 00       	jmp    c01035b3 <__alltraps>

c01034c3 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034c3:	6a 00                	push   $0x0
  pushl $236
c01034c5:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034ca:	e9 e4 00 00 00       	jmp    c01035b3 <__alltraps>

c01034cf <vector237>:
.globl vector237
vector237:
  pushl $0
c01034cf:	6a 00                	push   $0x0
  pushl $237
c01034d1:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034d6:	e9 d8 00 00 00       	jmp    c01035b3 <__alltraps>

c01034db <vector238>:
.globl vector238
vector238:
  pushl $0
c01034db:	6a 00                	push   $0x0
  pushl $238
c01034dd:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034e2:	e9 cc 00 00 00       	jmp    c01035b3 <__alltraps>

c01034e7 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034e7:	6a 00                	push   $0x0
  pushl $239
c01034e9:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034ee:	e9 c0 00 00 00       	jmp    c01035b3 <__alltraps>

c01034f3 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034f3:	6a 00                	push   $0x0
  pushl $240
c01034f5:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034fa:	e9 b4 00 00 00       	jmp    c01035b3 <__alltraps>

c01034ff <vector241>:
.globl vector241
vector241:
  pushl $0
c01034ff:	6a 00                	push   $0x0
  pushl $241
c0103501:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103506:	e9 a8 00 00 00       	jmp    c01035b3 <__alltraps>

c010350b <vector242>:
.globl vector242
vector242:
  pushl $0
c010350b:	6a 00                	push   $0x0
  pushl $242
c010350d:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103512:	e9 9c 00 00 00       	jmp    c01035b3 <__alltraps>

c0103517 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103517:	6a 00                	push   $0x0
  pushl $243
c0103519:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010351e:	e9 90 00 00 00       	jmp    c01035b3 <__alltraps>

c0103523 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103523:	6a 00                	push   $0x0
  pushl $244
c0103525:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010352a:	e9 84 00 00 00       	jmp    c01035b3 <__alltraps>

c010352f <vector245>:
.globl vector245
vector245:
  pushl $0
c010352f:	6a 00                	push   $0x0
  pushl $245
c0103531:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103536:	e9 78 00 00 00       	jmp    c01035b3 <__alltraps>

c010353b <vector246>:
.globl vector246
vector246:
  pushl $0
c010353b:	6a 00                	push   $0x0
  pushl $246
c010353d:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103542:	e9 6c 00 00 00       	jmp    c01035b3 <__alltraps>

c0103547 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103547:	6a 00                	push   $0x0
  pushl $247
c0103549:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010354e:	e9 60 00 00 00       	jmp    c01035b3 <__alltraps>

c0103553 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103553:	6a 00                	push   $0x0
  pushl $248
c0103555:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010355a:	e9 54 00 00 00       	jmp    c01035b3 <__alltraps>

c010355f <vector249>:
.globl vector249
vector249:
  pushl $0
c010355f:	6a 00                	push   $0x0
  pushl $249
c0103561:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103566:	e9 48 00 00 00       	jmp    c01035b3 <__alltraps>

c010356b <vector250>:
.globl vector250
vector250:
  pushl $0
c010356b:	6a 00                	push   $0x0
  pushl $250
c010356d:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103572:	e9 3c 00 00 00       	jmp    c01035b3 <__alltraps>

c0103577 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103577:	6a 00                	push   $0x0
  pushl $251
c0103579:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010357e:	e9 30 00 00 00       	jmp    c01035b3 <__alltraps>

c0103583 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103583:	6a 00                	push   $0x0
  pushl $252
c0103585:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010358a:	e9 24 00 00 00       	jmp    c01035b3 <__alltraps>

c010358f <vector253>:
.globl vector253
vector253:
  pushl $0
c010358f:	6a 00                	push   $0x0
  pushl $253
c0103591:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103596:	e9 18 00 00 00       	jmp    c01035b3 <__alltraps>

c010359b <vector254>:
.globl vector254
vector254:
  pushl $0
c010359b:	6a 00                	push   $0x0
  pushl $254
c010359d:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035a2:	e9 0c 00 00 00       	jmp    c01035b3 <__alltraps>

c01035a7 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035a7:	6a 00                	push   $0x0
  pushl $255
c01035a9:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035ae:	e9 00 00 00 00       	jmp    c01035b3 <__alltraps>

c01035b3 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01035b3:	1e                   	push   %ds
    pushl %es
c01035b4:	06                   	push   %es
    pushl %fs
c01035b5:	0f a0                	push   %fs
    pushl %gs
c01035b7:	0f a8                	push   %gs
    pushal
c01035b9:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01035ba:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01035bf:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01035c1:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035c3:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035c4:	e8 f0 f4 ff ff       	call   c0102ab9 <trap>

    # pop the pushed stack pointer
    popl %esp
c01035c9:	5c                   	pop    %esp

c01035ca <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035ca:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035cb:	0f a9                	pop    %gs
    popl %fs
c01035cd:	0f a1                	pop    %fs
    popl %es
c01035cf:	07                   	pop    %es
    popl %ds
c01035d0:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035d1:	83 c4 08             	add    $0x8,%esp
    iret
c01035d4:	cf                   	iret   

c01035d5 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035d5:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035d9:	eb ef                	jmp    c01035ca <__trapret>

c01035db <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c01035db:	55                   	push   %ebp
c01035dc:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01035de:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e1:	8b 40 18             	mov    0x18(%eax),%eax
}
c01035e4:	5d                   	pop    %ebp
c01035e5:	c3                   	ret    

c01035e6 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01035e6:	55                   	push   %ebp
c01035e7:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01035e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035ef:	89 50 18             	mov    %edx,0x18(%eax)
}
c01035f2:	5d                   	pop    %ebp
c01035f3:	c3                   	ret    

c01035f4 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01035f4:	55                   	push   %ebp
c01035f5:	89 e5                	mov    %esp,%ebp
c01035f7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01035fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01035fd:	c1 e8 0c             	shr    $0xc,%eax
c0103600:	89 c2                	mov    %eax,%edx
c0103602:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0103607:	39 c2                	cmp    %eax,%edx
c0103609:	72 1c                	jb     c0103627 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010360b:	c7 44 24 08 70 61 11 	movl   $0xc0116170,0x8(%esp)
c0103612:	c0 
c0103613:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010361a:	00 
c010361b:	c7 04 24 8f 61 11 c0 	movl   $0xc011618f,(%esp)
c0103622:	e8 cc ce ff ff       	call   c01004f3 <__panic>
    }
    return &pages[PPN(pa)];
c0103627:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c010362d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103630:	c1 e8 0c             	shr    $0xc,%eax
c0103633:	89 c2                	mov    %eax,%edx
c0103635:	89 d0                	mov    %edx,%eax
c0103637:	c1 e0 03             	shl    $0x3,%eax
c010363a:	01 d0                	add    %edx,%eax
c010363c:	c1 e0 02             	shl    $0x2,%eax
c010363f:	01 c8                	add    %ecx,%eax
}
c0103641:	c9                   	leave  
c0103642:	c3                   	ret    

c0103643 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103643:	55                   	push   %ebp
c0103644:	89 e5                	mov    %esp,%ebp
c0103646:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0103649:	8b 45 08             	mov    0x8(%ebp),%eax
c010364c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103651:	89 04 24             	mov    %eax,(%esp)
c0103654:	e8 9b ff ff ff       	call   c01035f4 <pa2page>
}
c0103659:	c9                   	leave  
c010365a:	c3                   	ret    

c010365b <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c010365b:	55                   	push   %ebp
c010365c:	89 e5                	mov    %esp,%ebp
c010365e:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103661:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0103668:	e8 95 25 00 00       	call   c0105c02 <kmalloc>
c010366d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103670:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103674:	0f 84 81 00 00 00    	je     c01036fb <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c010367a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010367d:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103680:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103683:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103686:	89 50 04             	mov    %edx,0x4(%eax)
c0103689:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010368c:	8b 50 04             	mov    0x4(%eax),%edx
c010368f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103692:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103694:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103697:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010369e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01036a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ab:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01036b2:	a1 68 2f 15 c0       	mov    0xc0152f68,%eax
c01036b7:	85 c0                	test   %eax,%eax
c01036b9:	74 0d                	je     c01036c8 <mm_create+0x6d>
c01036bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036be:	89 04 24             	mov    %eax,(%esp)
c01036c1:	e8 de 13 00 00       	call   c0104aa4 <swap_init_mm>
c01036c6:	eb 0a                	jmp    c01036d2 <mm_create+0x77>
        else mm->sm_priv = NULL;
c01036c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cb:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01036d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036d9:	00 
c01036da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036dd:	89 04 24             	mov    %eax,(%esp)
c01036e0:	e8 01 ff ff ff       	call   c01035e6 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c01036e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e8:	83 c0 1c             	add    $0x1c,%eax
c01036eb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01036f2:	00 
c01036f3:	89 04 24             	mov    %eax,(%esp)
c01036f6:	e8 01 68 00 00       	call   c0109efc <sem_init>
    }    
    return mm;
c01036fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036fe:	c9                   	leave  
c01036ff:	c3                   	ret    

c0103700 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0103700:	55                   	push   %ebp
c0103701:	89 e5                	mov    %esp,%ebp
c0103703:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103706:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010370d:	e8 f0 24 00 00       	call   c0105c02 <kmalloc>
c0103712:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103715:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103719:	74 1b                	je     c0103736 <vma_create+0x36>
        vma->vm_start = vm_start;
c010371b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010371e:	8b 55 08             	mov    0x8(%ebp),%edx
c0103721:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103724:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103727:	8b 55 0c             	mov    0xc(%ebp),%edx
c010372a:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010372d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103730:	8b 55 10             	mov    0x10(%ebp),%edx
c0103733:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103736:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103739:	c9                   	leave  
c010373a:	c3                   	ret    

c010373b <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010373b:	55                   	push   %ebp
c010373c:	89 e5                	mov    %esp,%ebp
c010373e:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103741:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103748:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010374c:	0f 84 95 00 00 00    	je     c01037e7 <find_vma+0xac>
        vma = mm->mmap_cache;
c0103752:	8b 45 08             	mov    0x8(%ebp),%eax
c0103755:	8b 40 08             	mov    0x8(%eax),%eax
c0103758:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010375b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010375f:	74 16                	je     c0103777 <find_vma+0x3c>
c0103761:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103764:	8b 40 04             	mov    0x4(%eax),%eax
c0103767:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010376a:	77 0b                	ja     c0103777 <find_vma+0x3c>
c010376c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010376f:	8b 40 08             	mov    0x8(%eax),%eax
c0103772:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103775:	77 61                	ja     c01037d8 <find_vma+0x9d>
                bool found = 0;
c0103777:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c010377e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103781:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103784:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103787:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010378a:	eb 28                	jmp    c01037b4 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c010378c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010378f:	83 e8 10             	sub    $0x10,%eax
c0103792:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103795:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103798:	8b 40 04             	mov    0x4(%eax),%eax
c010379b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010379e:	77 14                	ja     c01037b4 <find_vma+0x79>
c01037a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01037a3:	8b 40 08             	mov    0x8(%eax),%eax
c01037a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01037a9:	76 09                	jbe    c01037b4 <find_vma+0x79>
                        found = 1;
c01037ab:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01037b2:	eb 17                	jmp    c01037cb <find_vma+0x90>
c01037b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037bd:	8b 40 04             	mov    0x4(%eax),%eax
                while ((le = list_next(le)) != list) {
c01037c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01037c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01037c9:	75 c1                	jne    c010378c <find_vma+0x51>
                    }
                }
                if (!found) {
c01037cb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01037cf:	75 07                	jne    c01037d8 <find_vma+0x9d>
                    vma = NULL;
c01037d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01037d8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01037dc:	74 09                	je     c01037e7 <find_vma+0xac>
            mm->mmap_cache = vma;
c01037de:	8b 45 08             	mov    0x8(%ebp),%eax
c01037e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01037e4:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01037e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01037ea:	c9                   	leave  
c01037eb:	c3                   	ret    

c01037ec <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01037ec:	55                   	push   %ebp
c01037ed:	89 e5                	mov    %esp,%ebp
c01037ef:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c01037f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01037f5:	8b 50 04             	mov    0x4(%eax),%edx
c01037f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01037fb:	8b 40 08             	mov    0x8(%eax),%eax
c01037fe:	39 c2                	cmp    %eax,%edx
c0103800:	72 24                	jb     c0103826 <check_vma_overlap+0x3a>
c0103802:	c7 44 24 0c 9d 61 11 	movl   $0xc011619d,0xc(%esp)
c0103809:	c0 
c010380a:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103811:	c0 
c0103812:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0103819:	00 
c010381a:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103821:	e8 cd cc ff ff       	call   c01004f3 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0103826:	8b 45 08             	mov    0x8(%ebp),%eax
c0103829:	8b 50 08             	mov    0x8(%eax),%edx
c010382c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010382f:	8b 40 04             	mov    0x4(%eax),%eax
c0103832:	39 c2                	cmp    %eax,%edx
c0103834:	76 24                	jbe    c010385a <check_vma_overlap+0x6e>
c0103836:	c7 44 24 0c e0 61 11 	movl   $0xc01161e0,0xc(%esp)
c010383d:	c0 
c010383e:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103845:	c0 
c0103846:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010384d:	00 
c010384e:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103855:	e8 99 cc ff ff       	call   c01004f3 <__panic>
    assert(next->vm_start < next->vm_end);
c010385a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010385d:	8b 50 04             	mov    0x4(%eax),%edx
c0103860:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103863:	8b 40 08             	mov    0x8(%eax),%eax
c0103866:	39 c2                	cmp    %eax,%edx
c0103868:	72 24                	jb     c010388e <check_vma_overlap+0xa2>
c010386a:	c7 44 24 0c ff 61 11 	movl   $0xc01161ff,0xc(%esp)
c0103871:	c0 
c0103872:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103879:	c0 
c010387a:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0103881:	00 
c0103882:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103889:	e8 65 cc ff ff       	call   c01004f3 <__panic>
}
c010388e:	c9                   	leave  
c010388f:	c3                   	ret    

c0103890 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103890:	55                   	push   %ebp
c0103891:	89 e5                	mov    %esp,%ebp
c0103893:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0103896:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103899:	8b 50 04             	mov    0x4(%eax),%edx
c010389c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010389f:	8b 40 08             	mov    0x8(%eax),%eax
c01038a2:	39 c2                	cmp    %eax,%edx
c01038a4:	72 24                	jb     c01038ca <insert_vma_struct+0x3a>
c01038a6:	c7 44 24 0c 1d 62 11 	movl   $0xc011621d,0xc(%esp)
c01038ad:	c0 
c01038ae:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01038b5:	c0 
c01038b6:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01038bd:	00 
c01038be:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01038c5:	e8 29 cc ff ff       	call   c01004f3 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01038ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01038cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01038d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01038d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01038dc:	eb 21                	jmp    c01038ff <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01038de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038e1:	83 e8 10             	sub    $0x10,%eax
c01038e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01038e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038ea:	8b 50 04             	mov    0x4(%eax),%edx
c01038ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038f0:	8b 40 04             	mov    0x4(%eax),%eax
c01038f3:	39 c2                	cmp    %eax,%edx
c01038f5:	76 02                	jbe    c01038f9 <insert_vma_struct+0x69>
                break;
c01038f7:	eb 1d                	jmp    c0103916 <insert_vma_struct+0x86>
            }
            le_prev = le;
c01038f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103902:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103905:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103908:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010390b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103911:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103914:	75 c8                	jne    c01038de <insert_vma_struct+0x4e>
c0103916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103919:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010391c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010391f:	8b 40 04             	mov    0x4(%eax),%eax
        }

    le_next = list_next(le_prev);
c0103922:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0103925:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103928:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010392b:	74 15                	je     c0103942 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010392d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103930:	8d 50 f0             	lea    -0x10(%eax),%edx
c0103933:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103936:	89 44 24 04          	mov    %eax,0x4(%esp)
c010393a:	89 14 24             	mov    %edx,(%esp)
c010393d:	e8 aa fe ff ff       	call   c01037ec <check_vma_overlap>
    }
    if (le_next != list) {
c0103942:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103945:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103948:	74 15                	je     c010395f <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010394a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010394d:	83 e8 10             	sub    $0x10,%eax
c0103950:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103954:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103957:	89 04 24             	mov    %eax,(%esp)
c010395a:	e8 8d fe ff ff       	call   c01037ec <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010395f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103962:	8b 55 08             	mov    0x8(%ebp),%edx
c0103965:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0103967:	8b 45 0c             	mov    0xc(%ebp),%eax
c010396a:	8d 50 10             	lea    0x10(%eax),%edx
c010396d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103970:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103973:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c0103976:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103979:	8b 40 04             	mov    0x4(%eax),%eax
c010397c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010397f:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103982:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103985:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103988:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010398b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010398e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103991:	89 10                	mov    %edx,(%eax)
c0103993:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103996:	8b 10                	mov    (%eax),%edx
c0103998:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010399b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010399e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039a1:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01039a4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039aa:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039ad:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01039af:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b2:	8b 40 10             	mov    0x10(%eax),%eax
c01039b5:	8d 50 01             	lea    0x1(%eax),%edx
c01039b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039bb:	89 50 10             	mov    %edx,0x10(%eax)
}
c01039be:	c9                   	leave  
c01039bf:	c3                   	ret    

c01039c0 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01039c0:	55                   	push   %ebp
c01039c1:	89 e5                	mov    %esp,%ebp
c01039c3:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01039c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039c9:	89 04 24             	mov    %eax,(%esp)
c01039cc:	e8 0a fc ff ff       	call   c01035db <mm_count>
c01039d1:	85 c0                	test   %eax,%eax
c01039d3:	74 24                	je     c01039f9 <mm_destroy+0x39>
c01039d5:	c7 44 24 0c 39 62 11 	movl   $0xc0116239,0xc(%esp)
c01039dc:	c0 
c01039dd:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01039e4:	c0 
c01039e5:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01039ec:	00 
c01039ed:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01039f4:	e8 fa ca ff ff       	call   c01004f3 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01039f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01039fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01039ff:	eb 36                	jmp    c0103a37 <mm_destroy+0x77>
c0103a01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a04:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c0103a07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a0a:	8b 40 04             	mov    0x4(%eax),%eax
c0103a0d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103a10:	8b 12                	mov    (%edx),%edx
c0103a12:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0103a15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103a18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103a1e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a24:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103a27:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0103a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a2c:	83 e8 10             	sub    $0x10,%eax
c0103a2f:	89 04 24             	mov    %eax,(%esp)
c0103a32:	e8 e6 21 00 00       	call   c0105c1d <kfree>
c0103a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c0103a3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a40:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(list)) != list) {
c0103a43:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a4c:	75 b3                	jne    c0103a01 <mm_destroy+0x41>
    }
    kfree(mm); //kfree mm
c0103a4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a51:	89 04 24             	mov    %eax,(%esp)
c0103a54:	e8 c4 21 00 00       	call   c0105c1d <kfree>
    mm=NULL;
c0103a59:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103a60:	c9                   	leave  
c0103a61:	c3                   	ret    

c0103a62 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103a62:	55                   	push   %ebp
c0103a63:	89 e5                	mov    %esp,%ebp
c0103a65:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103a68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a71:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a79:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a80:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a83:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a86:	01 c2                	add    %eax,%edx
c0103a88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a8b:	01 d0                	add    %edx,%eax
c0103a8d:	83 e8 01             	sub    $0x1,%eax
c0103a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a96:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a9b:	f7 75 e8             	divl   -0x18(%ebp)
c0103a9e:	89 d0                	mov    %edx,%eax
c0103aa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103aa3:	29 c2                	sub    %eax,%edx
c0103aa5:	89 d0                	mov    %edx,%eax
c0103aa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103aaa:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103ab1:	76 11                	jbe    c0103ac4 <mm_map+0x62>
c0103ab3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ab6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ab9:	73 09                	jae    c0103ac4 <mm_map+0x62>
c0103abb:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103ac2:	76 0a                	jbe    c0103ace <mm_map+0x6c>
        return -E_INVAL;
c0103ac4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103ac9:	e9 ae 00 00 00       	jmp    c0103b7c <mm_map+0x11a>
    }

    assert(mm != NULL);
c0103ace:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103ad2:	75 24                	jne    c0103af8 <mm_map+0x96>
c0103ad4:	c7 44 24 0c 4b 62 11 	movl   $0xc011624b,0xc(%esp)
c0103adb:	c0 
c0103adc:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103ae3:	c0 
c0103ae4:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0103aeb:	00 
c0103aec:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103af3:	e8 fb c9 ff ff       	call   c01004f3 <__panic>

    int ret = -E_INVAL;
c0103af8:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b02:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b09:	89 04 24             	mov    %eax,(%esp)
c0103b0c:	e8 2a fc ff ff       	call   c010373b <find_vma>
c0103b11:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103b14:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103b18:	74 0d                	je     c0103b27 <mm_map+0xc5>
c0103b1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b1d:	8b 40 04             	mov    0x4(%eax),%eax
c0103b20:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103b23:	73 02                	jae    c0103b27 <mm_map+0xc5>
        goto out;
c0103b25:	eb 52                	jmp    c0103b79 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0103b27:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103b2e:	8b 45 14             	mov    0x14(%ebp),%eax
c0103b31:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b3f:	89 04 24             	mov    %eax,(%esp)
c0103b42:	e8 b9 fb ff ff       	call   c0103700 <vma_create>
c0103b47:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103b4a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103b4e:	75 02                	jne    c0103b52 <mm_map+0xf0>
        goto out;
c0103b50:	eb 27                	jmp    c0103b79 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0103b52:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b5c:	89 04 24             	mov    %eax,(%esp)
c0103b5f:	e8 2c fd ff ff       	call   c0103890 <insert_vma_struct>
    if (vma_store != NULL) {
c0103b64:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103b68:	74 08                	je     c0103b72 <mm_map+0x110>
        *vma_store = vma;
c0103b6a:	8b 45 18             	mov    0x18(%ebp),%eax
c0103b6d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103b70:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103b72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0103b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103b7c:	c9                   	leave  
c0103b7d:	c3                   	ret    

c0103b7e <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103b7e:	55                   	push   %ebp
c0103b7f:	89 e5                	mov    %esp,%ebp
c0103b81:	56                   	push   %esi
c0103b82:	53                   	push   %ebx
c0103b83:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0103b86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b8a:	74 06                	je     c0103b92 <dup_mmap+0x14>
c0103b8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b90:	75 24                	jne    c0103bb6 <dup_mmap+0x38>
c0103b92:	c7 44 24 0c 56 62 11 	movl   $0xc0116256,0xc(%esp)
c0103b99:	c0 
c0103b9a:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103ba1:	c0 
c0103ba2:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0103ba9:	00 
c0103baa:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103bb1:	e8 3d c9 ff ff       	call   c01004f3 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103bb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103bb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103bc2:	e9 92 00 00 00       	jmp    c0103c59 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bca:	83 e8 10             	sub    $0x10,%eax
c0103bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103bd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd3:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd9:	8b 50 08             	mov    0x8(%eax),%edx
c0103bdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bdf:	8b 40 04             	mov    0x4(%eax),%eax
c0103be2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103be6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103bea:	89 04 24             	mov    %eax,(%esp)
c0103bed:	e8 0e fb ff ff       	call   c0103700 <vma_create>
c0103bf2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103bf5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103bf9:	75 07                	jne    c0103c02 <dup_mmap+0x84>
            return -E_NO_MEM;
c0103bfb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103c00:	eb 76                	jmp    c0103c78 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0103c02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c09:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c0c:	89 04 24             	mov    %eax,(%esp)
c0103c0f:	e8 7c fc ff ff       	call   c0103890 <insert_vma_struct>

        bool share = 0;
c0103c14:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103c1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c1e:	8b 58 08             	mov    0x8(%eax),%ebx
c0103c21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c24:	8b 48 04             	mov    0x4(%eax),%ecx
c0103c27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c2a:	8b 50 0c             	mov    0xc(%eax),%edx
c0103c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c30:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c33:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0103c36:	89 74 24 10          	mov    %esi,0x10(%esp)
c0103c3a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0103c3e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103c42:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103c46:	89 04 24             	mov    %eax,(%esp)
c0103c49:	e8 71 46 00 00       	call   c01082bf <copy_range>
c0103c4e:	85 c0                	test   %eax,%eax
c0103c50:	74 07                	je     c0103c59 <dup_mmap+0xdb>
            return -E_NO_MEM;
c0103c52:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103c57:	eb 1f                	jmp    c0103c78 <dup_mmap+0xfa>
c0103c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->prev;
c0103c5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c62:	8b 00                	mov    (%eax),%eax
    while ((le = list_prev(le)) != list) {
c0103c64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c6a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c6d:	0f 85 54 ff ff ff    	jne    c0103bc7 <dup_mmap+0x49>
        }
    }
    return 0;
c0103c73:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c78:	83 c4 40             	add    $0x40,%esp
c0103c7b:	5b                   	pop    %ebx
c0103c7c:	5e                   	pop    %esi
c0103c7d:	5d                   	pop    %ebp
c0103c7e:	c3                   	ret    

c0103c7f <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103c7f:	55                   	push   %ebp
c0103c80:	89 e5                	mov    %esp,%ebp
c0103c82:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103c85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103c89:	74 0f                	je     c0103c9a <exit_mmap+0x1b>
c0103c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c8e:	89 04 24             	mov    %eax,(%esp)
c0103c91:	e8 45 f9 ff ff       	call   c01035db <mm_count>
c0103c96:	85 c0                	test   %eax,%eax
c0103c98:	74 24                	je     c0103cbe <exit_mmap+0x3f>
c0103c9a:	c7 44 24 0c 74 62 11 	movl   $0xc0116274,0xc(%esp)
c0103ca1:	c0 
c0103ca2:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103ca9:	c0 
c0103caa:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103cb1:	00 
c0103cb2:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103cb9:	e8 35 c8 ff ff       	call   c01004f3 <__panic>
    pde_t *pgdir = mm->pgdir;
c0103cbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc1:	8b 40 0c             	mov    0xc(%eax),%eax
c0103cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103ccd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103cd3:	eb 28                	jmp    c0103cfd <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0103cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd8:	83 e8 10             	sub    $0x10,%eax
c0103cdb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103cde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ce1:	8b 50 08             	mov    0x8(%eax),%edx
c0103ce4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ce7:	8b 40 04             	mov    0x4(%eax),%eax
c0103cea:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103cee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cf5:	89 04 24             	mov    %eax,(%esp)
c0103cf8:	e8 c7 43 00 00       	call   c01080c4 <unmap_range>
c0103cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d00:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c0103d03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d06:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0103d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d0f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d12:	75 c1                	jne    c0103cd5 <exit_mmap+0x56>
    }
    while ((le = list_next(le)) != list) {
c0103d14:	eb 28                	jmp    c0103d3e <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d19:	83 e8 10             	sub    $0x10,%eax
c0103d1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103d1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d22:	8b 50 08             	mov    0x8(%eax),%edx
c0103d25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d28:	8b 40 04             	mov    0x4(%eax),%eax
c0103d2b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d36:	89 04 24             	mov    %eax,(%esp)
c0103d39:	e8 7a 44 00 00       	call   c01081b8 <exit_range>
c0103d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d41:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103d44:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d47:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0103d4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d50:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d53:	75 c1                	jne    c0103d16 <exit_mmap+0x97>
    }
}
c0103d55:	c9                   	leave  
c0103d56:	c3                   	ret    

c0103d57 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103d57:	55                   	push   %ebp
c0103d58:	89 e5                	mov    %esp,%ebp
c0103d5a:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103d5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d60:	8b 55 18             	mov    0x18(%ebp),%edx
c0103d63:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103d67:	8b 55 14             	mov    0x14(%ebp),%edx
c0103d6a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d75:	89 04 24             	mov    %eax,(%esp)
c0103d78:	e8 e5 09 00 00       	call   c0104762 <user_mem_check>
c0103d7d:	85 c0                	test   %eax,%eax
c0103d7f:	75 07                	jne    c0103d88 <copy_from_user+0x31>
        return 0;
c0103d81:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d86:	eb 1e                	jmp    c0103da6 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0103d88:	8b 45 14             	mov    0x14(%ebp),%eax
c0103d8b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103d8f:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d92:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d99:	89 04 24             	mov    %eax,(%esp)
c0103d9c:	e8 c6 11 01 00       	call   c0114f67 <memcpy>
    return 1;
c0103da1:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103da6:	c9                   	leave  
c0103da7:	c3                   	ret    

c0103da8 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103da8:	55                   	push   %ebp
c0103da9:	89 e5                	mov    %esp,%ebp
c0103dab:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103dae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103db1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0103db8:	00 
c0103db9:	8b 55 14             	mov    0x14(%ebp),%edx
c0103dbc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103dc7:	89 04 24             	mov    %eax,(%esp)
c0103dca:	e8 93 09 00 00       	call   c0104762 <user_mem_check>
c0103dcf:	85 c0                	test   %eax,%eax
c0103dd1:	75 07                	jne    c0103dda <copy_to_user+0x32>
        return 0;
c0103dd3:	b8 00 00 00 00       	mov    $0x0,%eax
c0103dd8:	eb 1e                	jmp    c0103df8 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0103dda:	8b 45 14             	mov    0x14(%ebp),%eax
c0103ddd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103de1:	8b 45 10             	mov    0x10(%ebp),%eax
c0103de4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103de8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103deb:	89 04 24             	mov    %eax,(%esp)
c0103dee:	e8 74 11 01 00       	call   c0114f67 <memcpy>
    return 1;
c0103df3:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103df8:	c9                   	leave  
c0103df9:	c3                   	ret    

c0103dfa <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103dfa:	55                   	push   %ebp
c0103dfb:	89 e5                	mov    %esp,%ebp
c0103dfd:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103e00:	e8 02 00 00 00       	call   c0103e07 <check_vmm>
}
c0103e05:	c9                   	leave  
c0103e06:	c3                   	ret    

c0103e07 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103e07:	55                   	push   %ebp
c0103e08:	89 e5                	mov    %esp,%ebp
c0103e0a:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103e0d:	e8 69 3a 00 00       	call   c010787b <nr_free_pages>
c0103e12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103e15:	e8 13 00 00 00       	call   c0103e2d <check_vma_struct>
    check_pgfault();
c0103e1a:	e8 a7 04 00 00       	call   c01042c6 <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0103e1f:	c7 04 24 94 62 11 c0 	movl   $0xc0116294,(%esp)
c0103e26:	e8 71 c5 ff ff       	call   c010039c <cprintf>
}
c0103e2b:	c9                   	leave  
c0103e2c:	c3                   	ret    

c0103e2d <check_vma_struct>:

static void
check_vma_struct(void) {
c0103e2d:	55                   	push   %ebp
c0103e2e:	89 e5                	mov    %esp,%ebp
c0103e30:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103e33:	e8 43 3a 00 00       	call   c010787b <nr_free_pages>
c0103e38:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103e3b:	e8 1b f8 ff ff       	call   c010365b <mm_create>
c0103e40:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103e43:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103e47:	75 24                	jne    c0103e6d <check_vma_struct+0x40>
c0103e49:	c7 44 24 0c 4b 62 11 	movl   $0xc011624b,0xc(%esp)
c0103e50:	c0 
c0103e51:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103e58:	c0 
c0103e59:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0103e60:	00 
c0103e61:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103e68:	e8 86 c6 ff ff       	call   c01004f3 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103e6d:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103e74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103e77:	89 d0                	mov    %edx,%eax
c0103e79:	c1 e0 02             	shl    $0x2,%eax
c0103e7c:	01 d0                	add    %edx,%eax
c0103e7e:	01 c0                	add    %eax,%eax
c0103e80:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103e83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e89:	eb 70                	jmp    c0103efb <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e8e:	89 d0                	mov    %edx,%eax
c0103e90:	c1 e0 02             	shl    $0x2,%eax
c0103e93:	01 d0                	add    %edx,%eax
c0103e95:	83 c0 02             	add    $0x2,%eax
c0103e98:	89 c1                	mov    %eax,%ecx
c0103e9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e9d:	89 d0                	mov    %edx,%eax
c0103e9f:	c1 e0 02             	shl    $0x2,%eax
c0103ea2:	01 d0                	add    %edx,%eax
c0103ea4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103eab:	00 
c0103eac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103eb0:	89 04 24             	mov    %eax,(%esp)
c0103eb3:	e8 48 f8 ff ff       	call   c0103700 <vma_create>
c0103eb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103ebb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ebf:	75 24                	jne    c0103ee5 <check_vma_struct+0xb8>
c0103ec1:	c7 44 24 0c ac 62 11 	movl   $0xc01162ac,0xc(%esp)
c0103ec8:	c0 
c0103ec9:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103ed0:	c0 
c0103ed1:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0103ed8:	00 
c0103ed9:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103ee0:	e8 0e c6 ff ff       	call   c01004f3 <__panic>
        insert_vma_struct(mm, vma);
c0103ee5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103ee8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eef:	89 04 24             	mov    %eax,(%esp)
c0103ef2:	e8 99 f9 ff ff       	call   c0103890 <insert_vma_struct>
    for (i = step1; i >= 1; i --) {
c0103ef7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103efb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103eff:	7f 8a                	jg     c0103e8b <check_vma_struct+0x5e>
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f04:	83 c0 01             	add    $0x1,%eax
c0103f07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103f0a:	eb 70                	jmp    c0103f7c <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103f0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f0f:	89 d0                	mov    %edx,%eax
c0103f11:	c1 e0 02             	shl    $0x2,%eax
c0103f14:	01 d0                	add    %edx,%eax
c0103f16:	83 c0 02             	add    $0x2,%eax
c0103f19:	89 c1                	mov    %eax,%ecx
c0103f1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f1e:	89 d0                	mov    %edx,%eax
c0103f20:	c1 e0 02             	shl    $0x2,%eax
c0103f23:	01 d0                	add    %edx,%eax
c0103f25:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103f2c:	00 
c0103f2d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103f31:	89 04 24             	mov    %eax,(%esp)
c0103f34:	e8 c7 f7 ff ff       	call   c0103700 <vma_create>
c0103f39:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103f3c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103f40:	75 24                	jne    c0103f66 <check_vma_struct+0x139>
c0103f42:	c7 44 24 0c ac 62 11 	movl   $0xc01162ac,0xc(%esp)
c0103f49:	c0 
c0103f4a:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103f51:	c0 
c0103f52:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0103f59:	00 
c0103f5a:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103f61:	e8 8d c5 ff ff       	call   c01004f3 <__panic>
        insert_vma_struct(mm, vma);
c0103f66:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103f6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f70:	89 04 24             	mov    %eax,(%esp)
c0103f73:	e8 18 f9 ff ff       	call   c0103890 <insert_vma_struct>
    for (i = step1 + 1; i <= step2; i ++) {
c0103f78:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f7f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f82:	7e 88                	jle    c0103f0c <check_vma_struct+0xdf>
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103f84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f87:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103f8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103f8d:	8b 40 04             	mov    0x4(%eax),%eax
c0103f90:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103f93:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103f9a:	e9 97 00 00 00       	jmp    c0104036 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0103f9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fa2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103fa5:	75 24                	jne    c0103fcb <check_vma_struct+0x19e>
c0103fa7:	c7 44 24 0c b8 62 11 	movl   $0xc01162b8,0xc(%esp)
c0103fae:	c0 
c0103faf:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0103fb6:	c0 
c0103fb7:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0103fbe:	00 
c0103fbf:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0103fc6:	e8 28 c5 ff ff       	call   c01004f3 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103fcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fce:	83 e8 10             	sub    $0x10,%eax
c0103fd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103fd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103fd7:	8b 48 04             	mov    0x4(%eax),%ecx
c0103fda:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103fdd:	89 d0                	mov    %edx,%eax
c0103fdf:	c1 e0 02             	shl    $0x2,%eax
c0103fe2:	01 d0                	add    %edx,%eax
c0103fe4:	39 c1                	cmp    %eax,%ecx
c0103fe6:	75 17                	jne    c0103fff <check_vma_struct+0x1d2>
c0103fe8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103feb:	8b 48 08             	mov    0x8(%eax),%ecx
c0103fee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ff1:	89 d0                	mov    %edx,%eax
c0103ff3:	c1 e0 02             	shl    $0x2,%eax
c0103ff6:	01 d0                	add    %edx,%eax
c0103ff8:	83 c0 02             	add    $0x2,%eax
c0103ffb:	39 c1                	cmp    %eax,%ecx
c0103ffd:	74 24                	je     c0104023 <check_vma_struct+0x1f6>
c0103fff:	c7 44 24 0c d0 62 11 	movl   $0xc01162d0,0xc(%esp)
c0104006:	c0 
c0104007:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c010400e:	c0 
c010400f:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0104016:	00 
c0104017:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c010401e:	e8 d0 c4 ff ff       	call   c01004f3 <__panic>
c0104023:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104026:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0104029:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010402c:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010402f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 1; i <= step2; i ++) {
c0104032:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104036:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104039:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010403c:	0f 8e 5d ff ff ff    	jle    c0103f9f <check_vma_struct+0x172>
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104042:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0104049:	e9 cd 01 00 00       	jmp    c010421b <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c010404e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104051:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104055:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104058:	89 04 24             	mov    %eax,(%esp)
c010405b:	e8 db f6 ff ff       	call   c010373b <find_vma>
c0104060:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0104063:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0104067:	75 24                	jne    c010408d <check_vma_struct+0x260>
c0104069:	c7 44 24 0c 05 63 11 	movl   $0xc0116305,0xc(%esp)
c0104070:	c0 
c0104071:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104078:	c0 
c0104079:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0104080:	00 
c0104081:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104088:	e8 66 c4 ff ff       	call   c01004f3 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c010408d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104090:	83 c0 01             	add    $0x1,%eax
c0104093:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104097:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010409a:	89 04 24             	mov    %eax,(%esp)
c010409d:	e8 99 f6 ff ff       	call   c010373b <find_vma>
c01040a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01040a5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01040a9:	75 24                	jne    c01040cf <check_vma_struct+0x2a2>
c01040ab:	c7 44 24 0c 12 63 11 	movl   $0xc0116312,0xc(%esp)
c01040b2:	c0 
c01040b3:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01040ba:	c0 
c01040bb:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01040c2:	00 
c01040c3:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01040ca:	e8 24 c4 ff ff       	call   c01004f3 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01040cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040d2:	83 c0 02             	add    $0x2,%eax
c01040d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01040d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040dc:	89 04 24             	mov    %eax,(%esp)
c01040df:	e8 57 f6 ff ff       	call   c010373b <find_vma>
c01040e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01040e7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040eb:	74 24                	je     c0104111 <check_vma_struct+0x2e4>
c01040ed:	c7 44 24 0c 1f 63 11 	movl   $0xc011631f,0xc(%esp)
c01040f4:	c0 
c01040f5:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01040fc:	c0 
c01040fd:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0104104:	00 
c0104105:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c010410c:	e8 e2 c3 ff ff       	call   c01004f3 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0104111:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104114:	83 c0 03             	add    $0x3,%eax
c0104117:	89 44 24 04          	mov    %eax,0x4(%esp)
c010411b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010411e:	89 04 24             	mov    %eax,(%esp)
c0104121:	e8 15 f6 ff ff       	call   c010373b <find_vma>
c0104126:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0104129:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010412d:	74 24                	je     c0104153 <check_vma_struct+0x326>
c010412f:	c7 44 24 0c 2c 63 11 	movl   $0xc011632c,0xc(%esp)
c0104136:	c0 
c0104137:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c010413e:	c0 
c010413f:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0104146:	00 
c0104147:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c010414e:	e8 a0 c3 ff ff       	call   c01004f3 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104153:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104156:	83 c0 04             	add    $0x4,%eax
c0104159:	89 44 24 04          	mov    %eax,0x4(%esp)
c010415d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104160:	89 04 24             	mov    %eax,(%esp)
c0104163:	e8 d3 f5 ff ff       	call   c010373b <find_vma>
c0104168:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c010416b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010416f:	74 24                	je     c0104195 <check_vma_struct+0x368>
c0104171:	c7 44 24 0c 39 63 11 	movl   $0xc0116339,0xc(%esp)
c0104178:	c0 
c0104179:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104180:	c0 
c0104181:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0104188:	00 
c0104189:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104190:	e8 5e c3 ff ff       	call   c01004f3 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0104195:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104198:	8b 50 04             	mov    0x4(%eax),%edx
c010419b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010419e:	39 c2                	cmp    %eax,%edx
c01041a0:	75 10                	jne    c01041b2 <check_vma_struct+0x385>
c01041a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01041a5:	8b 50 08             	mov    0x8(%eax),%edx
c01041a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041ab:	83 c0 02             	add    $0x2,%eax
c01041ae:	39 c2                	cmp    %eax,%edx
c01041b0:	74 24                	je     c01041d6 <check_vma_struct+0x3a9>
c01041b2:	c7 44 24 0c 48 63 11 	movl   $0xc0116348,0xc(%esp)
c01041b9:	c0 
c01041ba:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01041c1:	c0 
c01041c2:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c01041c9:	00 
c01041ca:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01041d1:	e8 1d c3 ff ff       	call   c01004f3 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01041d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01041d9:	8b 50 04             	mov    0x4(%eax),%edx
c01041dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041df:	39 c2                	cmp    %eax,%edx
c01041e1:	75 10                	jne    c01041f3 <check_vma_struct+0x3c6>
c01041e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01041e6:	8b 50 08             	mov    0x8(%eax),%edx
c01041e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041ec:	83 c0 02             	add    $0x2,%eax
c01041ef:	39 c2                	cmp    %eax,%edx
c01041f1:	74 24                	je     c0104217 <check_vma_struct+0x3ea>
c01041f3:	c7 44 24 0c 78 63 11 	movl   $0xc0116378,0xc(%esp)
c01041fa:	c0 
c01041fb:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104202:	c0 
c0104203:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c010420a:	00 
c010420b:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104212:	e8 dc c2 ff ff       	call   c01004f3 <__panic>
    for (i = 5; i <= 5 * step2; i +=5) {
c0104217:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c010421b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010421e:	89 d0                	mov    %edx,%eax
c0104220:	c1 e0 02             	shl    $0x2,%eax
c0104223:	01 d0                	add    %edx,%eax
c0104225:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104228:	0f 8d 20 fe ff ff    	jge    c010404e <check_vma_struct+0x221>
    }

    for (i =4; i>=0; i--) {
c010422e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0104235:	eb 70                	jmp    c01042a7 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0104237:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010423a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010423e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104241:	89 04 24             	mov    %eax,(%esp)
c0104244:	e8 f2 f4 ff ff       	call   c010373b <find_vma>
c0104249:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c010424c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104250:	74 27                	je     c0104279 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0104252:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104255:	8b 50 08             	mov    0x8(%eax),%edx
c0104258:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010425b:	8b 40 04             	mov    0x4(%eax),%eax
c010425e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0104262:	89 44 24 08          	mov    %eax,0x8(%esp)
c0104266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104269:	89 44 24 04          	mov    %eax,0x4(%esp)
c010426d:	c7 04 24 a8 63 11 c0 	movl   $0xc01163a8,(%esp)
c0104274:	e8 23 c1 ff ff       	call   c010039c <cprintf>
        }
        assert(vma_below_5 == NULL);
c0104279:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010427d:	74 24                	je     c01042a3 <check_vma_struct+0x476>
c010427f:	c7 44 24 0c cd 63 11 	movl   $0xc01163cd,0xc(%esp)
c0104286:	c0 
c0104287:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c010428e:	c0 
c010428f:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0104296:	00 
c0104297:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c010429e:	e8 50 c2 ff ff       	call   c01004f3 <__panic>
    for (i =4; i>=0; i--) {
c01042a3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01042a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01042ab:	79 8a                	jns    c0104237 <check_vma_struct+0x40a>
    }

    mm_destroy(mm);
c01042ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01042b0:	89 04 24             	mov    %eax,(%esp)
c01042b3:	e8 08 f7 ff ff       	call   c01039c0 <mm_destroy>

  //  assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c01042b8:	c7 04 24 e4 63 11 c0 	movl   $0xc01163e4,(%esp)
c01042bf:	e8 d8 c0 ff ff       	call   c010039c <cprintf>
}
c01042c4:	c9                   	leave  
c01042c5:	c3                   	ret    

c01042c6 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01042c6:	55                   	push   %ebp
c01042c7:	89 e5                	mov    %esp,%ebp
c01042c9:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01042cc:	e8 aa 35 00 00       	call   c010787b <nr_free_pages>
c01042d1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01042d4:	e8 82 f3 ff ff       	call   c010365b <mm_create>
c01042d9:	a3 04 61 15 c0       	mov    %eax,0xc0156104
    assert(check_mm_struct != NULL);
c01042de:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c01042e3:	85 c0                	test   %eax,%eax
c01042e5:	75 24                	jne    c010430b <check_pgfault+0x45>
c01042e7:	c7 44 24 0c 03 64 11 	movl   $0xc0116403,0xc(%esp)
c01042ee:	c0 
c01042ef:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01042f6:	c0 
c01042f7:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c01042fe:	00 
c01042ff:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104306:	e8 e8 c1 ff ff       	call   c01004f3 <__panic>

    struct mm_struct *mm = check_mm_struct;
c010430b:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c0104310:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104313:	8b 15 20 fa 14 c0    	mov    0xc014fa20,%edx
c0104319:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010431c:	89 50 0c             	mov    %edx,0xc(%eax)
c010431f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104322:	8b 40 0c             	mov    0xc(%eax),%eax
c0104325:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0104328:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010432b:	8b 00                	mov    (%eax),%eax
c010432d:	85 c0                	test   %eax,%eax
c010432f:	74 24                	je     c0104355 <check_pgfault+0x8f>
c0104331:	c7 44 24 0c 1b 64 11 	movl   $0xc011641b,0xc(%esp)
c0104338:	c0 
c0104339:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104340:	c0 
c0104341:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0104348:	00 
c0104349:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104350:	e8 9e c1 ff ff       	call   c01004f3 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0104355:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010435c:	00 
c010435d:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0104364:	00 
c0104365:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010436c:	e8 8f f3 ff ff       	call   c0103700 <vma_create>
c0104371:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0104374:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104378:	75 24                	jne    c010439e <check_pgfault+0xd8>
c010437a:	c7 44 24 0c ac 62 11 	movl   $0xc01162ac,0xc(%esp)
c0104381:	c0 
c0104382:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104389:	c0 
c010438a:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c0104391:	00 
c0104392:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104399:	e8 55 c1 ff ff       	call   c01004f3 <__panic>

    insert_vma_struct(mm, vma);
c010439e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01043a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01043a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043a8:	89 04 24             	mov    %eax,(%esp)
c01043ab:	e8 e0 f4 ff ff       	call   c0103890 <insert_vma_struct>

    uintptr_t addr = 0x100;
c01043b0:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01043b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01043be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043c1:	89 04 24             	mov    %eax,(%esp)
c01043c4:	e8 72 f3 ff ff       	call   c010373b <find_vma>
c01043c9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01043cc:	74 24                	je     c01043f2 <check_pgfault+0x12c>
c01043ce:	c7 44 24 0c 29 64 11 	movl   $0xc0116429,0xc(%esp)
c01043d5:	c0 
c01043d6:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01043dd:	c0 
c01043de:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c01043e5:	00 
c01043e6:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01043ed:	e8 01 c1 ff ff       	call   c01004f3 <__panic>

    int i, sum = 0;
c01043f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01043f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104400:	eb 17                	jmp    c0104419 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0104402:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104405:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104408:	01 d0                	add    %edx,%eax
c010440a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010440d:	88 10                	mov    %dl,(%eax)
        sum += i;
c010440f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104412:	01 45 f0             	add    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104415:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104419:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010441d:	7e e3                	jle    c0104402 <check_pgfault+0x13c>
    }
    for (i = 0; i < 100; i ++) {
c010441f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104426:	eb 15                	jmp    c010443d <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0104428:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010442b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010442e:	01 d0                	add    %edx,%eax
c0104430:	0f b6 00             	movzbl (%eax),%eax
c0104433:	0f be c0             	movsbl %al,%eax
c0104436:	29 45 f0             	sub    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104439:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010443d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104441:	7e e5                	jle    c0104428 <check_pgfault+0x162>
    }
    assert(sum == 0);
c0104443:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104447:	74 24                	je     c010446d <check_pgfault+0x1a7>
c0104449:	c7 44 24 0c 43 64 11 	movl   $0xc0116443,0xc(%esp)
c0104450:	c0 
c0104451:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c0104458:	c0 
c0104459:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c0104460:	00 
c0104461:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c0104468:	e8 86 c0 ff ff       	call   c01004f3 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010446d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104470:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104473:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104476:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010447b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010447f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104482:	89 04 24             	mov    %eax,(%esp)
c0104485:	e8 58 40 00 00       	call   c01084e2 <page_remove>
    free_page(pde2page(pgdir[0]));
c010448a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010448d:	8b 00                	mov    (%eax),%eax
c010448f:	89 04 24             	mov    %eax,(%esp)
c0104492:	e8 ac f1 ff ff       	call   c0103643 <pde2page>
c0104497:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010449e:	00 
c010449f:	89 04 24             	mov    %eax,(%esp)
c01044a2:	e8 a2 33 00 00       	call   c0107849 <free_pages>
    pgdir[0] = 0;
c01044a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01044b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01044ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044bd:	89 04 24             	mov    %eax,(%esp)
c01044c0:	e8 fb f4 ff ff       	call   c01039c0 <mm_destroy>
    check_mm_struct = NULL;
c01044c5:	c7 05 04 61 15 c0 00 	movl   $0x0,0xc0156104
c01044cc:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c01044cf:	e8 a7 33 00 00       	call   c010787b <nr_free_pages>
c01044d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01044d7:	74 24                	je     c01044fd <check_pgfault+0x237>
c01044d9:	c7 44 24 0c 4c 64 11 	movl   $0xc011644c,0xc(%esp)
c01044e0:	c0 
c01044e1:	c7 44 24 08 bb 61 11 	movl   $0xc01161bb,0x8(%esp)
c01044e8:	c0 
c01044e9:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c01044f0:	00 
c01044f1:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01044f8:	e8 f6 bf ff ff       	call   c01004f3 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c01044fd:	c7 04 24 73 64 11 c0 	movl   $0xc0116473,(%esp)
c0104504:	e8 93 be ff ff       	call   c010039c <cprintf>
}
c0104509:	c9                   	leave  
c010450a:	c3                   	ret    

c010450b <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010450b:	55                   	push   %ebp
c010450c:	89 e5                	mov    %esp,%ebp
c010450e:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0104511:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104518:	8b 45 10             	mov    0x10(%ebp),%eax
c010451b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010451f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104522:	89 04 24             	mov    %eax,(%esp)
c0104525:	e8 11 f2 ff ff       	call   c010373b <find_vma>
c010452a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010452d:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104532:	83 c0 01             	add    $0x1,%eax
c0104535:	a3 64 2f 15 c0       	mov    %eax,0xc0152f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010453a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010453e:	74 0b                	je     c010454b <do_pgfault+0x40>
c0104540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104543:	8b 40 04             	mov    0x4(%eax),%eax
c0104546:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104549:	76 18                	jbe    c0104563 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010454b:	8b 45 10             	mov    0x10(%ebp),%eax
c010454e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104552:	c7 04 24 90 64 11 c0 	movl   $0xc0116490,(%esp)
c0104559:	e8 3e be ff ff       	call   c010039c <cprintf>
        goto failed;
c010455e:	e9 fa 01 00 00       	jmp    c010475d <do_pgfault+0x252>
    }
    //check the error_code
    switch (error_code & 3) {
c0104563:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104566:	83 e0 03             	and    $0x3,%eax
c0104569:	85 c0                	test   %eax,%eax
c010456b:	74 36                	je     c01045a3 <do_pgfault+0x98>
c010456d:	83 f8 01             	cmp    $0x1,%eax
c0104570:	74 20                	je     c0104592 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0104572:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104575:	8b 40 0c             	mov    0xc(%eax),%eax
c0104578:	83 e0 02             	and    $0x2,%eax
c010457b:	85 c0                	test   %eax,%eax
c010457d:	75 11                	jne    c0104590 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010457f:	c7 04 24 c0 64 11 c0 	movl   $0xc01164c0,(%esp)
c0104586:	e8 11 be ff ff       	call   c010039c <cprintf>
            goto failed;
c010458b:	e9 cd 01 00 00       	jmp    c010475d <do_pgfault+0x252>
        }
        break;
c0104590:	eb 2f                	jmp    c01045c1 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0104592:	c7 04 24 20 65 11 c0 	movl   $0xc0116520,(%esp)
c0104599:	e8 fe bd ff ff       	call   c010039c <cprintf>
        goto failed;
c010459e:	e9 ba 01 00 00       	jmp    c010475d <do_pgfault+0x252>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01045a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01045a6:	8b 40 0c             	mov    0xc(%eax),%eax
c01045a9:	83 e0 05             	and    $0x5,%eax
c01045ac:	85 c0                	test   %eax,%eax
c01045ae:	75 11                	jne    c01045c1 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01045b0:	c7 04 24 58 65 11 c0 	movl   $0xc0116558,(%esp)
c01045b7:	e8 e0 bd ff ff       	call   c010039c <cprintf>
            goto failed;
c01045bc:	e9 9c 01 00 00       	jmp    c010475d <do_pgfault+0x252>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c01045c1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c01045c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01045cb:	8b 40 0c             	mov    0xc(%eax),%eax
c01045ce:	83 e0 02             	and    $0x2,%eax
c01045d1:	85 c0                	test   %eax,%eax
c01045d3:	74 04                	je     c01045d9 <do_pgfault+0xce>
        perm |= PTE_W;
c01045d5:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c01045d9:	8b 45 10             	mov    0x10(%ebp),%eax
c01045dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01045df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01045e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01045e7:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c01045ea:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c01045f1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c01045f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01045fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01045fe:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0104605:	00 
c0104606:	8b 55 10             	mov    0x10(%ebp),%edx
c0104609:	89 54 24 04          	mov    %edx,0x4(%esp)
c010460d:	89 04 24             	mov    %eax,(%esp)
c0104610:	e8 bd 38 00 00       	call   c0107ed2 <get_pte>
c0104615:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104618:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010461c:	75 11                	jne    c010462f <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c010461e:	c7 04 24 bb 65 11 c0 	movl   $0xc01165bb,(%esp)
c0104625:	e8 72 bd ff ff       	call   c010039c <cprintf>
        goto failed;
c010462a:	e9 2e 01 00 00       	jmp    c010475d <do_pgfault+0x252>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104632:	8b 00                	mov    (%eax),%eax
c0104634:	85 c0                	test   %eax,%eax
c0104636:	75 35                	jne    c010466d <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0104638:	8b 45 08             	mov    0x8(%ebp),%eax
c010463b:	8b 40 0c             	mov    0xc(%eax),%eax
c010463e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104641:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104645:	8b 55 10             	mov    0x10(%ebp),%edx
c0104648:	89 54 24 04          	mov    %edx,0x4(%esp)
c010464c:	89 04 24             	mov    %eax,(%esp)
c010464f:	e8 e8 3f 00 00       	call   c010863c <pgdir_alloc_page>
c0104654:	85 c0                	test   %eax,%eax
c0104656:	0f 85 fa 00 00 00    	jne    c0104756 <do_pgfault+0x24b>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c010465c:	c7 04 24 dc 65 11 c0 	movl   $0xc01165dc,(%esp)
c0104663:	e8 34 bd ff ff       	call   c010039c <cprintf>
            goto failed;
c0104668:	e9 f0 00 00 00       	jmp    c010475d <do_pgfault+0x252>
        }
    }
    else {
        struct Page *page=NULL;
c010466d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0104674:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104677:	8b 00                	mov    (%eax),%eax
c0104679:	89 44 24 08          	mov    %eax,0x8(%esp)
c010467d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104680:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104684:	c7 04 24 03 66 11 c0 	movl   $0xc0116603,(%esp)
c010468b:	e8 0c bd ff ff       	call   c010039c <cprintf>
        if (*ptep & PTE_P) {
c0104690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104693:	8b 00                	mov    (%eax),%eax
c0104695:	83 e0 01             	and    $0x1,%eax
c0104698:	85 c0                	test   %eax,%eax
c010469a:	74 1c                	je     c01046b8 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c010469c:	c7 44 24 08 20 66 11 	movl   $0xc0116620,0x8(%esp)
c01046a3:	c0 
c01046a4:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c01046ab:	00 
c01046ac:	c7 04 24 d0 61 11 c0 	movl   $0xc01161d0,(%esp)
c01046b3:	e8 3b be ff ff       	call   c01004f3 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c01046b8:	a1 68 2f 15 c0       	mov    0xc0152f68,%eax
c01046bd:	85 c0                	test   %eax,%eax
c01046bf:	74 30                	je     c01046f1 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c01046c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01046c4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01046c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01046cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01046d2:	89 04 24             	mov    %eax,(%esp)
c01046d5:	e8 c3 05 00 00       	call   c0104c9d <swap_in>
c01046da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01046e1:	74 26                	je     c0104709 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c01046e3:	c7 04 24 3f 66 11 c0 	movl   $0xc011663f,(%esp)
c01046ea:	e8 ad bc ff ff       	call   c010039c <cprintf>
                   goto failed;
c01046ef:	eb 6c                	jmp    c010475d <do_pgfault+0x252>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c01046f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046f4:	8b 00                	mov    (%eax),%eax
c01046f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046fa:	c7 04 24 60 66 11 c0 	movl   $0xc0116660,(%esp)
c0104701:	e8 96 bc ff ff       	call   c010039c <cprintf>
            goto failed;
c0104706:	90                   	nop
c0104707:	eb 54                	jmp    c010475d <do_pgfault+0x252>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0104709:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010470c:	8b 45 08             	mov    0x8(%ebp),%eax
c010470f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104712:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104715:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0104719:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010471c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104720:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104724:	89 04 24             	mov    %eax,(%esp)
c0104727:	e8 fa 3d 00 00       	call   c0108526 <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c010472c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010472f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0104736:	00 
c0104737:	89 44 24 08          	mov    %eax,0x8(%esp)
c010473b:	8b 45 10             	mov    0x10(%ebp),%eax
c010473e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104742:	8b 45 08             	mov    0x8(%ebp),%eax
c0104745:	89 04 24             	mov    %eax,(%esp)
c0104748:	e8 87 03 00 00       	call   c0104ad4 <swap_map_swappable>
       page->pra_vaddr = addr;
c010474d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104750:	8b 55 10             	mov    0x10(%ebp),%edx
c0104753:	89 50 20             	mov    %edx,0x20(%eax)
   }
   ret = 0;
c0104756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010475d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104760:	c9                   	leave  
c0104761:	c3                   	ret    

c0104762 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104762:	55                   	push   %ebp
c0104763:	89 e5                	mov    %esp,%ebp
c0104765:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0104768:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010476c:	0f 84 e0 00 00 00    	je     c0104852 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0104772:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0104779:	76 1c                	jbe    c0104797 <user_mem_check+0x35>
c010477b:	8b 45 10             	mov    0x10(%ebp),%eax
c010477e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104781:	01 d0                	add    %edx,%eax
c0104783:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104786:	76 0f                	jbe    c0104797 <user_mem_check+0x35>
c0104788:	8b 45 10             	mov    0x10(%ebp),%eax
c010478b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010478e:	01 d0                	add    %edx,%eax
c0104790:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0104795:	76 0a                	jbe    c01047a1 <user_mem_check+0x3f>
            return 0;
c0104797:	b8 00 00 00 00       	mov    $0x0,%eax
c010479c:	e9 e2 00 00 00       	jmp    c0104883 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01047a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01047a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01047aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01047ad:	01 d0                	add    %edx,%eax
c01047af:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01047b2:	e9 88 00 00 00       	jmp    c010483f <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01047b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01047ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01047be:	8b 45 08             	mov    0x8(%ebp),%eax
c01047c1:	89 04 24             	mov    %eax,(%esp)
c01047c4:	e8 72 ef ff ff       	call   c010373b <find_vma>
c01047c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047d0:	74 0b                	je     c01047dd <user_mem_check+0x7b>
c01047d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047d5:	8b 40 04             	mov    0x4(%eax),%eax
c01047d8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01047db:	76 0a                	jbe    c01047e7 <user_mem_check+0x85>
                return 0;
c01047dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01047e2:	e9 9c 00 00 00       	jmp    c0104883 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01047e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ea:	8b 50 0c             	mov    0xc(%eax),%edx
c01047ed:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01047f1:	74 07                	je     c01047fa <user_mem_check+0x98>
c01047f3:	b8 02 00 00 00       	mov    $0x2,%eax
c01047f8:	eb 05                	jmp    c01047ff <user_mem_check+0x9d>
c01047fa:	b8 01 00 00 00       	mov    $0x1,%eax
c01047ff:	21 d0                	and    %edx,%eax
c0104801:	85 c0                	test   %eax,%eax
c0104803:	75 07                	jne    c010480c <user_mem_check+0xaa>
                return 0;
c0104805:	b8 00 00 00 00       	mov    $0x0,%eax
c010480a:	eb 77                	jmp    c0104883 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010480c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104810:	74 24                	je     c0104836 <user_mem_check+0xd4>
c0104812:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104815:	8b 40 0c             	mov    0xc(%eax),%eax
c0104818:	83 e0 08             	and    $0x8,%eax
c010481b:	85 c0                	test   %eax,%eax
c010481d:	74 17                	je     c0104836 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010481f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104822:	8b 40 04             	mov    0x4(%eax),%eax
c0104825:	05 00 10 00 00       	add    $0x1000,%eax
c010482a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010482d:	76 07                	jbe    c0104836 <user_mem_check+0xd4>
                    return 0;
c010482f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104834:	eb 4d                	jmp    c0104883 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0104836:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104839:	8b 40 08             	mov    0x8(%eax),%eax
c010483c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < end) {
c010483f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104842:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104845:	0f 82 6c ff ff ff    	jb     c01047b7 <user_mem_check+0x55>
        }
        return 1;
c010484b:	b8 01 00 00 00       	mov    $0x1,%eax
c0104850:	eb 31                	jmp    c0104883 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0104852:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104859:	76 23                	jbe    c010487e <user_mem_check+0x11c>
c010485b:	8b 45 10             	mov    0x10(%ebp),%eax
c010485e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104861:	01 d0                	add    %edx,%eax
c0104863:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104866:	76 16                	jbe    c010487e <user_mem_check+0x11c>
c0104868:	8b 45 10             	mov    0x10(%ebp),%eax
c010486b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010486e:	01 d0                	add    %edx,%eax
c0104870:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104875:	77 07                	ja     c010487e <user_mem_check+0x11c>
c0104877:	b8 01 00 00 00       	mov    $0x1,%eax
c010487c:	eb 05                	jmp    c0104883 <user_mem_check+0x121>
c010487e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104883:	c9                   	leave  
c0104884:	c3                   	ret    

c0104885 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0104885:	55                   	push   %ebp
c0104886:	89 e5                	mov    %esp,%ebp
c0104888:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c010488b:	8b 45 10             	mov    0x10(%ebp),%eax
c010488e:	05 00 10 00 00       	add    $0x1000,%eax
c0104893:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104896:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104899:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010489e:	89 c2                	mov    %eax,%edx
c01048a0:	8b 45 10             	mov    0x10(%ebp),%eax
c01048a3:	29 c2                	sub    %eax,%edx
c01048a5:	89 d0                	mov    %edx,%eax
c01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c01048aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ad:	3b 45 14             	cmp    0x14(%ebp),%eax
c01048b0:	76 06                	jbe    c01048b8 <copy_string+0x33>
            part = maxn;
c01048b2:	8b 45 14             	mov    0x14(%ebp),%eax
c01048b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01048b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01048bb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01048c2:	00 
c01048c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01048c6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01048ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01048ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01048d1:	89 04 24             	mov    %eax,(%esp)
c01048d4:	e8 89 fe ff ff       	call   c0104762 <user_mem_check>
c01048d9:	85 c0                	test   %eax,%eax
c01048db:	75 0a                	jne    c01048e7 <copy_string+0x62>
            return 0;
c01048dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01048e2:	e9 86 00 00 00       	jmp    c010496d <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01048e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01048ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01048f1:	89 04 24             	mov    %eax,(%esp)
c01048f4:	e8 5e 02 01 00       	call   c0114b57 <strnlen>
c01048f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01048fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104902:	73 23                	jae    c0104927 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c0104904:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104907:	83 c0 01             	add    $0x1,%eax
c010490a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010490e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104911:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104915:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104918:	89 04 24             	mov    %eax,(%esp)
c010491b:	e8 47 06 01 00       	call   c0114f67 <memcpy>
            return 1;
c0104920:	b8 01 00 00 00       	mov    $0x1,%eax
c0104925:	eb 46                	jmp    c010496d <copy_string+0xe8>
        }
        if (part == maxn) {
c0104927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010492a:	3b 45 14             	cmp    0x14(%ebp),%eax
c010492d:	75 07                	jne    c0104936 <copy_string+0xb1>
            return 0;
c010492f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104934:	eb 37                	jmp    c010496d <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0104936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104939:	89 44 24 08          	mov    %eax,0x8(%esp)
c010493d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104940:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104944:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104947:	89 04 24             	mov    %eax,(%esp)
c010494a:	e8 18 06 01 00       	call   c0114f67 <memcpy>
        dst += part, src += part, maxn -= part;
c010494f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104952:	01 45 0c             	add    %eax,0xc(%ebp)
c0104955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104958:	01 45 10             	add    %eax,0x10(%ebp)
c010495b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010495e:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0104961:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0104968:	e9 3d ff ff ff       	jmp    c01048aa <copy_string+0x25>
}
c010496d:	c9                   	leave  
c010496e:	c3                   	ret    

c010496f <pa2page>:
pa2page(uintptr_t pa) {
c010496f:	55                   	push   %ebp
c0104970:	89 e5                	mov    %esp,%ebp
c0104972:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104975:	8b 45 08             	mov    0x8(%ebp),%eax
c0104978:	c1 e8 0c             	shr    $0xc,%eax
c010497b:	89 c2                	mov    %eax,%edx
c010497d:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0104982:	39 c2                	cmp    %eax,%edx
c0104984:	72 1c                	jb     c01049a2 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104986:	c7 44 24 08 88 66 11 	movl   $0xc0116688,0x8(%esp)
c010498d:	c0 
c010498e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104995:	00 
c0104996:	c7 04 24 a7 66 11 c0 	movl   $0xc01166a7,(%esp)
c010499d:	e8 51 bb ff ff       	call   c01004f3 <__panic>
    return &pages[PPN(pa)];
c01049a2:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01049ab:	c1 e8 0c             	shr    $0xc,%eax
c01049ae:	89 c2                	mov    %eax,%edx
c01049b0:	89 d0                	mov    %edx,%eax
c01049b2:	c1 e0 03             	shl    $0x3,%eax
c01049b5:	01 d0                	add    %edx,%eax
c01049b7:	c1 e0 02             	shl    $0x2,%eax
c01049ba:	01 c8                	add    %ecx,%eax
}
c01049bc:	c9                   	leave  
c01049bd:	c3                   	ret    

c01049be <pte2page>:
pte2page(pte_t pte) {
c01049be:	55                   	push   %ebp
c01049bf:	89 e5                	mov    %esp,%ebp
c01049c1:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c01049c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01049c7:	83 e0 01             	and    $0x1,%eax
c01049ca:	85 c0                	test   %eax,%eax
c01049cc:	75 1c                	jne    c01049ea <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c01049ce:	c7 44 24 08 b8 66 11 	movl   $0xc01166b8,0x8(%esp)
c01049d5:	c0 
c01049d6:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01049dd:	00 
c01049de:	c7 04 24 a7 66 11 c0 	movl   $0xc01166a7,(%esp)
c01049e5:	e8 09 bb ff ff       	call   c01004f3 <__panic>
    return pa2page(PTE_ADDR(pte));
c01049ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01049ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01049f2:	89 04 24             	mov    %eax,(%esp)
c01049f5:	e8 75 ff ff ff       	call   c010496f <pa2page>
}
c01049fa:	c9                   	leave  
c01049fb:	c3                   	ret    

c01049fc <pde2page>:
pde2page(pde_t pde) {
c01049fc:	55                   	push   %ebp
c01049fd:	89 e5                	mov    %esp,%ebp
c01049ff:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104a0a:	89 04 24             	mov    %eax,(%esp)
c0104a0d:	e8 5d ff ff ff       	call   c010496f <pa2page>
}
c0104a12:	c9                   	leave  
c0104a13:	c3                   	ret    

c0104a14 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0104a14:	55                   	push   %ebp
c0104a15:	89 e5                	mov    %esp,%ebp
c0104a17:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0104a1a:	e8 ed a5 00 00       	call   c010f00c <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0104a1f:	a1 bc 61 15 c0       	mov    0xc01561bc,%eax
c0104a24:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0104a29:	76 0c                	jbe    c0104a37 <swap_init+0x23>
c0104a2b:	a1 bc 61 15 c0       	mov    0xc01561bc,%eax
c0104a30:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0104a35:	76 25                	jbe    c0104a5c <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0104a37:	a1 bc 61 15 c0       	mov    0xc01561bc,%eax
c0104a3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104a40:	c7 44 24 08 d9 66 11 	movl   $0xc01166d9,0x8(%esp)
c0104a47:	c0 
c0104a48:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0104a4f:	00 
c0104a50:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104a57:	e8 97 ba ff ff       	call   c01004f3 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0104a5c:	c7 05 70 2f 15 c0 00 	movl   $0xc014fa00,0xc0152f70
c0104a63:	fa 14 c0 
     int r = sm->init();
c0104a66:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104a6b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a6e:	ff d0                	call   *%eax
c0104a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0104a73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104a77:	75 26                	jne    c0104a9f <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0104a79:	c7 05 68 2f 15 c0 01 	movl   $0x1,0xc0152f68
c0104a80:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0104a83:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104a88:	8b 00                	mov    (%eax),%eax
c0104a8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104a8e:	c7 04 24 03 67 11 c0 	movl   $0xc0116703,(%esp)
c0104a95:	e8 02 b9 ff ff       	call   c010039c <cprintf>
          check_swap();
c0104a9a:	e8 a4 04 00 00       	call   c0104f43 <check_swap>
     }

     return r;
c0104a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104aa2:	c9                   	leave  
c0104aa3:	c3                   	ret    

c0104aa4 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0104aa4:	55                   	push   %ebp
c0104aa5:	89 e5                	mov    %esp,%ebp
c0104aa7:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0104aaa:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104aaf:	8b 40 08             	mov    0x8(%eax),%eax
c0104ab2:	8b 55 08             	mov    0x8(%ebp),%edx
c0104ab5:	89 14 24             	mov    %edx,(%esp)
c0104ab8:	ff d0                	call   *%eax
}
c0104aba:	c9                   	leave  
c0104abb:	c3                   	ret    

c0104abc <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0104abc:	55                   	push   %ebp
c0104abd:	89 e5                	mov    %esp,%ebp
c0104abf:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0104ac2:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104ac7:	8b 40 0c             	mov    0xc(%eax),%eax
c0104aca:	8b 55 08             	mov    0x8(%ebp),%edx
c0104acd:	89 14 24             	mov    %edx,(%esp)
c0104ad0:	ff d0                	call   *%eax
}
c0104ad2:	c9                   	leave  
c0104ad3:	c3                   	ret    

c0104ad4 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0104ad4:	55                   	push   %ebp
c0104ad5:	89 e5                	mov    %esp,%ebp
c0104ad7:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0104ada:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104adf:	8b 40 10             	mov    0x10(%eax),%eax
c0104ae2:	8b 55 14             	mov    0x14(%ebp),%edx
c0104ae5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0104ae9:	8b 55 10             	mov    0x10(%ebp),%edx
c0104aec:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104af0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104af3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104af7:	8b 55 08             	mov    0x8(%ebp),%edx
c0104afa:	89 14 24             	mov    %edx,(%esp)
c0104afd:	ff d0                	call   *%eax
}
c0104aff:	c9                   	leave  
c0104b00:	c3                   	ret    

c0104b01 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104b01:	55                   	push   %ebp
c0104b02:	89 e5                	mov    %esp,%ebp
c0104b04:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0104b07:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104b0c:	8b 40 14             	mov    0x14(%eax),%eax
c0104b0f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b12:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104b16:	8b 55 08             	mov    0x8(%ebp),%edx
c0104b19:	89 14 24             	mov    %edx,(%esp)
c0104b1c:	ff d0                	call   *%eax
}
c0104b1e:	c9                   	leave  
c0104b1f:	c3                   	ret    

c0104b20 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0104b20:	55                   	push   %ebp
c0104b21:	89 e5                	mov    %esp,%ebp
c0104b23:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0104b26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104b2d:	e9 5a 01 00 00       	jmp    c0104c8c <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0104b32:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104b37:	8b 40 18             	mov    0x18(%eax),%eax
c0104b3a:	8b 55 10             	mov    0x10(%ebp),%edx
c0104b3d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104b41:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0104b44:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104b48:	8b 55 08             	mov    0x8(%ebp),%edx
c0104b4b:	89 14 24             	mov    %edx,(%esp)
c0104b4e:	ff d0                	call   *%eax
c0104b50:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0104b53:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b57:	74 18                	je     c0104b71 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0104b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b60:	c7 04 24 18 67 11 c0 	movl   $0xc0116718,(%esp)
c0104b67:	e8 30 b8 ff ff       	call   c010039c <cprintf>
c0104b6c:	e9 27 01 00 00       	jmp    c0104c98 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0104b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b74:	8b 40 20             	mov    0x20(%eax),%eax
c0104b77:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0104b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b80:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b87:	00 
c0104b88:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104b8f:	89 04 24             	mov    %eax,(%esp)
c0104b92:	e8 3b 33 00 00       	call   c0107ed2 <get_pte>
c0104b97:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0104b9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104b9d:	8b 00                	mov    (%eax),%eax
c0104b9f:	83 e0 01             	and    $0x1,%eax
c0104ba2:	85 c0                	test   %eax,%eax
c0104ba4:	75 24                	jne    c0104bca <swap_out+0xaa>
c0104ba6:	c7 44 24 0c 45 67 11 	movl   $0xc0116745,0xc(%esp)
c0104bad:	c0 
c0104bae:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104bb5:	c0 
c0104bb6:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0104bbd:	00 
c0104bbe:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104bc5:	e8 29 b9 ff ff       	call   c01004f3 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0104bca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bcd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104bd0:	8b 52 20             	mov    0x20(%edx),%edx
c0104bd3:	c1 ea 0c             	shr    $0xc,%edx
c0104bd6:	83 c2 01             	add    $0x1,%edx
c0104bd9:	c1 e2 08             	shl    $0x8,%edx
c0104bdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104be0:	89 14 24             	mov    %edx,(%esp)
c0104be3:	e8 de a4 00 00       	call   c010f0c6 <swapfs_write>
c0104be8:	85 c0                	test   %eax,%eax
c0104bea:	74 34                	je     c0104c20 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0104bec:	c7 04 24 6f 67 11 c0 	movl   $0xc011676f,(%esp)
c0104bf3:	e8 a4 b7 ff ff       	call   c010039c <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0104bf8:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104bfd:	8b 40 10             	mov    0x10(%eax),%eax
c0104c00:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104c03:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104c0a:	00 
c0104c0b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104c0f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104c12:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104c16:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c19:	89 14 24             	mov    %edx,(%esp)
c0104c1c:	ff d0                	call   *%eax
c0104c1e:	eb 68                	jmp    c0104c88 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0104c20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104c23:	8b 40 20             	mov    0x20(%eax),%eax
c0104c26:	c1 e8 0c             	shr    $0xc,%eax
c0104c29:	83 c0 01             	add    $0x1,%eax
c0104c2c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104c30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c33:	89 44 24 08          	mov    %eax,0x8(%esp)
c0104c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c3e:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0104c45:	e8 52 b7 ff ff       	call   c010039c <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0104c4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104c4d:	8b 40 20             	mov    0x20(%eax),%eax
c0104c50:	c1 e8 0c             	shr    $0xc,%eax
c0104c53:	83 c0 01             	add    $0x1,%eax
c0104c56:	c1 e0 08             	shl    $0x8,%eax
c0104c59:	89 c2                	mov    %eax,%edx
c0104c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104c5e:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0104c60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104c63:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104c6a:	00 
c0104c6b:	89 04 24             	mov    %eax,(%esp)
c0104c6e:	e8 d6 2b 00 00       	call   c0107849 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0104c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c76:	8b 40 0c             	mov    0xc(%eax),%eax
c0104c79:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104c7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104c80:	89 04 24             	mov    %eax,(%esp)
c0104c83:	e8 57 39 00 00       	call   c01085df <tlb_invalidate>
     for (i = 0; i != n; ++ i)
c0104c88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c8f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104c92:	0f 85 9a fe ff ff    	jne    c0104b32 <swap_out+0x12>
     }
     return i;
c0104c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104c9b:	c9                   	leave  
c0104c9c:	c3                   	ret    

c0104c9d <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0104c9d:	55                   	push   %ebp
c0104c9e:	89 e5                	mov    %esp,%ebp
c0104ca0:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0104ca3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104caa:	e8 2f 2b 00 00       	call   c01077de <alloc_pages>
c0104caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0104cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cb6:	75 24                	jne    c0104cdc <swap_in+0x3f>
c0104cb8:	c7 44 24 0c c8 67 11 	movl   $0xc01167c8,0xc(%esp)
c0104cbf:	c0 
c0104cc0:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104cc7:	c0 
c0104cc8:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0104ccf:	00 
c0104cd0:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104cd7:	e8 17 b8 ff ff       	call   c01004f3 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0104cdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cdf:	8b 40 0c             	mov    0xc(%eax),%eax
c0104ce2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104ce9:	00 
c0104cea:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104ced:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104cf1:	89 04 24             	mov    %eax,(%esp)
c0104cf4:	e8 d9 31 00 00       	call   c0107ed2 <get_pte>
c0104cf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0104cfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cff:	8b 00                	mov    (%eax),%eax
c0104d01:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104d04:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d08:	89 04 24             	mov    %eax,(%esp)
c0104d0b:	e8 44 a3 00 00       	call   c010f054 <swapfs_read>
c0104d10:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104d13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104d17:	74 2a                	je     c0104d43 <swap_in+0xa6>
     {
        assert(r!=0);
c0104d19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104d1d:	75 24                	jne    c0104d43 <swap_in+0xa6>
c0104d1f:	c7 44 24 0c d5 67 11 	movl   $0xc01167d5,0xc(%esp)
c0104d26:	c0 
c0104d27:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104d2e:	c0 
c0104d2f:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0104d36:	00 
c0104d37:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104d3e:	e8 b0 b7 ff ff       	call   c01004f3 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0104d43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d46:	8b 00                	mov    (%eax),%eax
c0104d48:	c1 e8 08             	shr    $0x8,%eax
c0104d4b:	89 c2                	mov    %eax,%edx
c0104d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d50:	89 44 24 08          	mov    %eax,0x8(%esp)
c0104d54:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d58:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0104d5f:	e8 38 b6 ff ff       	call   c010039c <cprintf>
     *ptr_result=result;
c0104d64:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d67:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104d6a:	89 10                	mov    %edx,(%eax)
     return 0;
c0104d6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d71:	c9                   	leave  
c0104d72:	c3                   	ret    

c0104d73 <check_content_set>:



static inline void
check_content_set(void)
{
c0104d73:	55                   	push   %ebp
c0104d74:	89 e5                	mov    %esp,%ebp
c0104d76:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0104d79:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104d7e:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0104d81:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104d86:	83 f8 01             	cmp    $0x1,%eax
c0104d89:	74 24                	je     c0104daf <check_content_set+0x3c>
c0104d8b:	c7 44 24 0c 1a 68 11 	movl   $0xc011681a,0xc(%esp)
c0104d92:	c0 
c0104d93:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104d9a:	c0 
c0104d9b:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0104da2:	00 
c0104da3:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104daa:	e8 44 b7 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0104daf:	b8 10 10 00 00       	mov    $0x1010,%eax
c0104db4:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0104db7:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104dbc:	83 f8 01             	cmp    $0x1,%eax
c0104dbf:	74 24                	je     c0104de5 <check_content_set+0x72>
c0104dc1:	c7 44 24 0c 1a 68 11 	movl   $0xc011681a,0xc(%esp)
c0104dc8:	c0 
c0104dc9:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104dd0:	c0 
c0104dd1:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0104dd8:	00 
c0104dd9:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104de0:	e8 0e b7 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0104de5:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104dea:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0104ded:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104df2:	83 f8 02             	cmp    $0x2,%eax
c0104df5:	74 24                	je     c0104e1b <check_content_set+0xa8>
c0104df7:	c7 44 24 0c 29 68 11 	movl   $0xc0116829,0xc(%esp)
c0104dfe:	c0 
c0104dff:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104e06:	c0 
c0104e07:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0104e0e:	00 
c0104e0f:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104e16:	e8 d8 b6 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0104e1b:	b8 10 20 00 00       	mov    $0x2010,%eax
c0104e20:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0104e23:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104e28:	83 f8 02             	cmp    $0x2,%eax
c0104e2b:	74 24                	je     c0104e51 <check_content_set+0xde>
c0104e2d:	c7 44 24 0c 29 68 11 	movl   $0xc0116829,0xc(%esp)
c0104e34:	c0 
c0104e35:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104e3c:	c0 
c0104e3d:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0104e44:	00 
c0104e45:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104e4c:	e8 a2 b6 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0104e51:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104e56:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0104e59:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104e5e:	83 f8 03             	cmp    $0x3,%eax
c0104e61:	74 24                	je     c0104e87 <check_content_set+0x114>
c0104e63:	c7 44 24 0c 38 68 11 	movl   $0xc0116838,0xc(%esp)
c0104e6a:	c0 
c0104e6b:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104e72:	c0 
c0104e73:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0104e7a:	00 
c0104e7b:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104e82:	e8 6c b6 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0104e87:	b8 10 30 00 00       	mov    $0x3010,%eax
c0104e8c:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0104e8f:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104e94:	83 f8 03             	cmp    $0x3,%eax
c0104e97:	74 24                	je     c0104ebd <check_content_set+0x14a>
c0104e99:	c7 44 24 0c 38 68 11 	movl   $0xc0116838,0xc(%esp)
c0104ea0:	c0 
c0104ea1:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104ea8:	c0 
c0104ea9:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0104eb0:	00 
c0104eb1:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104eb8:	e8 36 b6 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0104ebd:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104ec2:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0104ec5:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104eca:	83 f8 04             	cmp    $0x4,%eax
c0104ecd:	74 24                	je     c0104ef3 <check_content_set+0x180>
c0104ecf:	c7 44 24 0c 47 68 11 	movl   $0xc0116847,0xc(%esp)
c0104ed6:	c0 
c0104ed7:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104ede:	c0 
c0104edf:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0104ee6:	00 
c0104ee7:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104eee:	e8 00 b6 ff ff       	call   c01004f3 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0104ef3:	b8 10 40 00 00       	mov    $0x4010,%eax
c0104ef8:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0104efb:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0104f00:	83 f8 04             	cmp    $0x4,%eax
c0104f03:	74 24                	je     c0104f29 <check_content_set+0x1b6>
c0104f05:	c7 44 24 0c 47 68 11 	movl   $0xc0116847,0xc(%esp)
c0104f0c:	c0 
c0104f0d:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104f14:	c0 
c0104f15:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0104f1c:	00 
c0104f1d:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104f24:	e8 ca b5 ff ff       	call   c01004f3 <__panic>
}
c0104f29:	c9                   	leave  
c0104f2a:	c3                   	ret    

c0104f2b <check_content_access>:

static inline int
check_content_access(void)
{
c0104f2b:	55                   	push   %ebp
c0104f2c:	89 e5                	mov    %esp,%ebp
c0104f2e:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0104f31:	a1 70 2f 15 c0       	mov    0xc0152f70,%eax
c0104f36:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104f39:	ff d0                	call   *%eax
c0104f3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104f41:	c9                   	leave  
c0104f42:	c3                   	ret    

c0104f43 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0104f43:	55                   	push   %ebp
c0104f44:	89 e5                	mov    %esp,%ebp
c0104f46:	53                   	push   %ebx
c0104f47:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0104f4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104f51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0104f58:	c7 45 e8 ec 61 15 c0 	movl   $0xc01561ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0104f5f:	eb 6b                	jmp    c0104fcc <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0104f61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104f64:	83 e8 10             	sub    $0x10,%eax
c0104f67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0104f6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104f6d:	83 c0 04             	add    $0x4,%eax
c0104f70:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0104f77:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104f7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104f7d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104f80:	0f a3 10             	bt     %edx,(%eax)
c0104f83:	19 c0                	sbb    %eax,%eax
c0104f85:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0104f88:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104f8c:	0f 95 c0             	setne  %al
c0104f8f:	0f b6 c0             	movzbl %al,%eax
c0104f92:	85 c0                	test   %eax,%eax
c0104f94:	75 24                	jne    c0104fba <check_swap+0x77>
c0104f96:	c7 44 24 0c 56 68 11 	movl   $0xc0116856,0xc(%esp)
c0104f9d:	c0 
c0104f9e:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0104fa5:	c0 
c0104fa6:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0104fad:	00 
c0104fae:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0104fb5:	e8 39 b5 ff ff       	call   c01004f3 <__panic>
        count ++, total += p->property;
c0104fba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104fbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104fc1:	8b 50 08             	mov    0x8(%eax),%edx
c0104fc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc7:	01 d0                	add    %edx,%eax
c0104fc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104fcf:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0104fd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104fd5:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c0104fd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104fdb:	81 7d e8 ec 61 15 c0 	cmpl   $0xc01561ec,-0x18(%ebp)
c0104fe2:	0f 85 79 ff ff ff    	jne    c0104f61 <check_swap+0x1e>
     }
     assert(total == nr_free_pages());
c0104fe8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104feb:	e8 8b 28 00 00       	call   c010787b <nr_free_pages>
c0104ff0:	39 c3                	cmp    %eax,%ebx
c0104ff2:	74 24                	je     c0105018 <check_swap+0xd5>
c0104ff4:	c7 44 24 0c 66 68 11 	movl   $0xc0116866,0xc(%esp)
c0104ffb:	c0 
c0104ffc:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0105003:	c0 
c0105004:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010500b:	00 
c010500c:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0105013:	e8 db b4 ff ff       	call   c01004f3 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105018:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010501b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105022:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105026:	c7 04 24 80 68 11 c0 	movl   $0xc0116880,(%esp)
c010502d:	e8 6a b3 ff ff       	call   c010039c <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105032:	e8 24 e6 ff ff       	call   c010365b <mm_create>
c0105037:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010503a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010503e:	75 24                	jne    c0105064 <check_swap+0x121>
c0105040:	c7 44 24 0c a6 68 11 	movl   $0xc01168a6,0xc(%esp)
c0105047:	c0 
c0105048:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010504f:	c0 
c0105050:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0105057:	00 
c0105058:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010505f:	e8 8f b4 ff ff       	call   c01004f3 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0105064:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c0105069:	85 c0                	test   %eax,%eax
c010506b:	74 24                	je     c0105091 <check_swap+0x14e>
c010506d:	c7 44 24 0c b1 68 11 	movl   $0xc01168b1,0xc(%esp)
c0105074:	c0 
c0105075:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010507c:	c0 
c010507d:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0105084:	00 
c0105085:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010508c:	e8 62 b4 ff ff       	call   c01004f3 <__panic>

     check_mm_struct = mm;
c0105091:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105094:	a3 04 61 15 c0       	mov    %eax,0xc0156104

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0105099:	8b 15 20 fa 14 c0    	mov    0xc014fa20,%edx
c010509f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01050a2:	89 50 0c             	mov    %edx,0xc(%eax)
c01050a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01050a8:	8b 40 0c             	mov    0xc(%eax),%eax
c01050ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01050ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01050b1:	8b 00                	mov    (%eax),%eax
c01050b3:	85 c0                	test   %eax,%eax
c01050b5:	74 24                	je     c01050db <check_swap+0x198>
c01050b7:	c7 44 24 0c c9 68 11 	movl   $0xc01168c9,0xc(%esp)
c01050be:	c0 
c01050bf:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c01050c6:	c0 
c01050c7:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01050ce:	00 
c01050cf:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c01050d6:	e8 18 b4 ff ff       	call   c01004f3 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01050db:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01050e2:	00 
c01050e3:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01050ea:	00 
c01050eb:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01050f2:	e8 09 e6 ff ff       	call   c0103700 <vma_create>
c01050f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01050fa:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01050fe:	75 24                	jne    c0105124 <check_swap+0x1e1>
c0105100:	c7 44 24 0c d7 68 11 	movl   $0xc01168d7,0xc(%esp)
c0105107:	c0 
c0105108:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010510f:	c0 
c0105110:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0105117:	00 
c0105118:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010511f:	e8 cf b3 ff ff       	call   c01004f3 <__panic>

     insert_vma_struct(mm, vma);
c0105124:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105127:	89 44 24 04          	mov    %eax,0x4(%esp)
c010512b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010512e:	89 04 24             	mov    %eax,(%esp)
c0105131:	e8 5a e7 ff ff       	call   c0103890 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0105136:	c7 04 24 e4 68 11 c0 	movl   $0xc01168e4,(%esp)
c010513d:	e8 5a b2 ff ff       	call   c010039c <cprintf>
     pte_t *temp_ptep=NULL;
c0105142:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0105149:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010514c:	8b 40 0c             	mov    0xc(%eax),%eax
c010514f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105156:	00 
c0105157:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010515e:	00 
c010515f:	89 04 24             	mov    %eax,(%esp)
c0105162:	e8 6b 2d 00 00       	call   c0107ed2 <get_pte>
c0105167:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010516a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010516e:	75 24                	jne    c0105194 <check_swap+0x251>
c0105170:	c7 44 24 0c 18 69 11 	movl   $0xc0116918,0xc(%esp)
c0105177:	c0 
c0105178:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010517f:	c0 
c0105180:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0105187:	00 
c0105188:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010518f:	e8 5f b3 ff ff       	call   c01004f3 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0105194:	c7 04 24 2c 69 11 c0 	movl   $0xc011692c,(%esp)
c010519b:	e8 fc b1 ff ff       	call   c010039c <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01051a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01051a7:	e9 a3 00 00 00       	jmp    c010524f <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01051ac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01051b3:	e8 26 26 00 00       	call   c01077de <alloc_pages>
c01051b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01051bb:	89 04 95 20 61 15 c0 	mov    %eax,-0x3fea9ee0(,%edx,4)
          assert(check_rp[i] != NULL );
c01051c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051c5:	8b 04 85 20 61 15 c0 	mov    -0x3fea9ee0(,%eax,4),%eax
c01051cc:	85 c0                	test   %eax,%eax
c01051ce:	75 24                	jne    c01051f4 <check_swap+0x2b1>
c01051d0:	c7 44 24 0c 50 69 11 	movl   $0xc0116950,0xc(%esp)
c01051d7:	c0 
c01051d8:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c01051df:	c0 
c01051e0:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01051e7:	00 
c01051e8:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c01051ef:	e8 ff b2 ff ff       	call   c01004f3 <__panic>
          assert(!PageProperty(check_rp[i]));
c01051f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051f7:	8b 04 85 20 61 15 c0 	mov    -0x3fea9ee0(,%eax,4),%eax
c01051fe:	83 c0 04             	add    $0x4,%eax
c0105201:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0105208:	89 45 b0             	mov    %eax,-0x50(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010520b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010520e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105211:	0f a3 10             	bt     %edx,(%eax)
c0105214:	19 c0                	sbb    %eax,%eax
c0105216:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0105219:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010521d:	0f 95 c0             	setne  %al
c0105220:	0f b6 c0             	movzbl %al,%eax
c0105223:	85 c0                	test   %eax,%eax
c0105225:	74 24                	je     c010524b <check_swap+0x308>
c0105227:	c7 44 24 0c 64 69 11 	movl   $0xc0116964,0xc(%esp)
c010522e:	c0 
c010522f:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0105236:	c0 
c0105237:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010523e:	00 
c010523f:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0105246:	e8 a8 b2 ff ff       	call   c01004f3 <__panic>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010524b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010524f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105253:	0f 8e 53 ff ff ff    	jle    c01051ac <check_swap+0x269>
     }
     list_entry_t free_list_store = free_list;
c0105259:	a1 ec 61 15 c0       	mov    0xc01561ec,%eax
c010525e:	8b 15 f0 61 15 c0    	mov    0xc01561f0,%edx
c0105264:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105267:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010526a:	c7 45 a8 ec 61 15 c0 	movl   $0xc01561ec,-0x58(%ebp)
    elm->prev = elm->next = elm;
c0105271:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105274:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105277:	89 50 04             	mov    %edx,0x4(%eax)
c010527a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010527d:	8b 50 04             	mov    0x4(%eax),%edx
c0105280:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105283:	89 10                	mov    %edx,(%eax)
c0105285:	c7 45 a4 ec 61 15 c0 	movl   $0xc01561ec,-0x5c(%ebp)
    return list->next == list;
c010528c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010528f:	8b 40 04             	mov    0x4(%eax),%eax
c0105292:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0105295:	0f 94 c0             	sete   %al
c0105298:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010529b:	85 c0                	test   %eax,%eax
c010529d:	75 24                	jne    c01052c3 <check_swap+0x380>
c010529f:	c7 44 24 0c 7f 69 11 	movl   $0xc011697f,0xc(%esp)
c01052a6:	c0 
c01052a7:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c01052ae:	c0 
c01052af:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01052b6:	00 
c01052b7:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c01052be:	e8 30 b2 ff ff       	call   c01004f3 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01052c3:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c01052c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01052cb:	c7 05 f4 61 15 c0 00 	movl   $0x0,0xc01561f4
c01052d2:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01052d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01052dc:	eb 1e                	jmp    c01052fc <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01052de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052e1:	8b 04 85 20 61 15 c0 	mov    -0x3fea9ee0(,%eax,4),%eax
c01052e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01052ef:	00 
c01052f0:	89 04 24             	mov    %eax,(%esp)
c01052f3:	e8 51 25 00 00       	call   c0107849 <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01052f8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01052fc:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105300:	7e dc                	jle    c01052de <check_swap+0x39b>
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105302:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0105307:	83 f8 04             	cmp    $0x4,%eax
c010530a:	74 24                	je     c0105330 <check_swap+0x3ed>
c010530c:	c7 44 24 0c 98 69 11 	movl   $0xc0116998,0xc(%esp)
c0105313:	c0 
c0105314:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010531b:	c0 
c010531c:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105323:	00 
c0105324:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010532b:	e8 c3 b1 ff ff       	call   c01004f3 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105330:	c7 04 24 bc 69 11 c0 	movl   $0xc01169bc,(%esp)
c0105337:	e8 60 b0 ff ff       	call   c010039c <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010533c:	c7 05 64 2f 15 c0 00 	movl   $0x0,0xc0152f64
c0105343:	00 00 00 
     
     check_content_set();
c0105346:	e8 28 fa ff ff       	call   c0104d73 <check_content_set>
     assert( nr_free == 0);         
c010534b:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0105350:	85 c0                	test   %eax,%eax
c0105352:	74 24                	je     c0105378 <check_swap+0x435>
c0105354:	c7 44 24 0c e3 69 11 	movl   $0xc01169e3,0xc(%esp)
c010535b:	c0 
c010535c:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0105363:	c0 
c0105364:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010536b:	00 
c010536c:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0105373:	e8 7b b1 ff ff       	call   c01004f3 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105378:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010537f:	eb 26                	jmp    c01053a7 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105381:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105384:	c7 04 85 40 61 15 c0 	movl   $0xffffffff,-0x3fea9ec0(,%eax,4)
c010538b:	ff ff ff ff 
c010538f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105392:	8b 14 85 40 61 15 c0 	mov    -0x3fea9ec0(,%eax,4),%edx
c0105399:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010539c:	89 14 85 80 61 15 c0 	mov    %edx,-0x3fea9e80(,%eax,4)
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01053a3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01053a7:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01053ab:	7e d4                	jle    c0105381 <check_swap+0x43e>
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01053ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01053b4:	e9 eb 00 00 00       	jmp    c01054a4 <check_swap+0x561>
         check_ptep[i]=0;
c01053b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01053bc:	c7 04 85 d4 61 15 c0 	movl   $0x0,-0x3fea9e2c(,%eax,4)
c01053c3:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01053c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01053ca:	83 c0 01             	add    $0x1,%eax
c01053cd:	c1 e0 0c             	shl    $0xc,%eax
c01053d0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01053d7:	00 
c01053d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01053dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01053df:	89 04 24             	mov    %eax,(%esp)
c01053e2:	e8 eb 2a 00 00       	call   c0107ed2 <get_pte>
c01053e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01053ea:	89 04 95 d4 61 15 c0 	mov    %eax,-0x3fea9e2c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01053f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01053f4:	8b 04 85 d4 61 15 c0 	mov    -0x3fea9e2c(,%eax,4),%eax
c01053fb:	85 c0                	test   %eax,%eax
c01053fd:	75 24                	jne    c0105423 <check_swap+0x4e0>
c01053ff:	c7 44 24 0c f0 69 11 	movl   $0xc01169f0,0xc(%esp)
c0105406:	c0 
c0105407:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010540e:	c0 
c010540f:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0105416:	00 
c0105417:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010541e:	e8 d0 b0 ff ff       	call   c01004f3 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105423:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105426:	8b 04 85 d4 61 15 c0 	mov    -0x3fea9e2c(,%eax,4),%eax
c010542d:	8b 00                	mov    (%eax),%eax
c010542f:	89 04 24             	mov    %eax,(%esp)
c0105432:	e8 87 f5 ff ff       	call   c01049be <pte2page>
c0105437:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010543a:	8b 14 95 20 61 15 c0 	mov    -0x3fea9ee0(,%edx,4),%edx
c0105441:	39 d0                	cmp    %edx,%eax
c0105443:	74 24                	je     c0105469 <check_swap+0x526>
c0105445:	c7 44 24 0c 08 6a 11 	movl   $0xc0116a08,0xc(%esp)
c010544c:	c0 
c010544d:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c0105454:	c0 
c0105455:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010545c:	00 
c010545d:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c0105464:	e8 8a b0 ff ff       	call   c01004f3 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010546c:	8b 04 85 d4 61 15 c0 	mov    -0x3fea9e2c(,%eax,4),%eax
c0105473:	8b 00                	mov    (%eax),%eax
c0105475:	83 e0 01             	and    $0x1,%eax
c0105478:	85 c0                	test   %eax,%eax
c010547a:	75 24                	jne    c01054a0 <check_swap+0x55d>
c010547c:	c7 44 24 0c 30 6a 11 	movl   $0xc0116a30,0xc(%esp)
c0105483:	c0 
c0105484:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c010548b:	c0 
c010548c:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0105493:	00 
c0105494:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c010549b:	e8 53 b0 ff ff       	call   c01004f3 <__panic>
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01054a0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01054a4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01054a8:	0f 8e 0b ff ff ff    	jle    c01053b9 <check_swap+0x476>
     }
     cprintf("set up init env for check_swap over!\n");
c01054ae:	c7 04 24 4c 6a 11 c0 	movl   $0xc0116a4c,(%esp)
c01054b5:	e8 e2 ae ff ff       	call   c010039c <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01054ba:	e8 6c fa ff ff       	call   c0104f2b <check_content_access>
c01054bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01054c2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054c6:	74 24                	je     c01054ec <check_swap+0x5a9>
c01054c8:	c7 44 24 0c 72 6a 11 	movl   $0xc0116a72,0xc(%esp)
c01054cf:	c0 
c01054d0:	c7 44 24 08 5a 67 11 	movl   $0xc011675a,0x8(%esp)
c01054d7:	c0 
c01054d8:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01054df:	00 
c01054e0:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c01054e7:	e8 07 b0 ff ff       	call   c01004f3 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01054ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01054f3:	eb 1e                	jmp    c0105513 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01054f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054f8:	8b 04 85 20 61 15 c0 	mov    -0x3fea9ee0(,%eax,4),%eax
c01054ff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105506:	00 
c0105507:	89 04 24             	mov    %eax,(%esp)
c010550a:	e8 3a 23 00 00       	call   c0107849 <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010550f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105513:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105517:	7e dc                	jle    c01054f5 <check_swap+0x5b2>
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105519:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010551c:	8b 00                	mov    (%eax),%eax
c010551e:	89 04 24             	mov    %eax,(%esp)
c0105521:	e8 d6 f4 ff ff       	call   c01049fc <pde2page>
c0105526:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010552d:	00 
c010552e:	89 04 24             	mov    %eax,(%esp)
c0105531:	e8 13 23 00 00       	call   c0107849 <free_pages>
     pgdir[0] = 0;
c0105536:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105539:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010553f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105542:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105549:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010554c:	89 04 24             	mov    %eax,(%esp)
c010554f:	e8 6c e4 ff ff       	call   c01039c0 <mm_destroy>
     check_mm_struct = NULL;
c0105554:	c7 05 04 61 15 c0 00 	movl   $0x0,0xc0156104
c010555b:	00 00 00 
     
     nr_free = nr_free_store;
c010555e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105561:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4
     free_list = free_list_store;
c0105566:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105569:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010556c:	a3 ec 61 15 c0       	mov    %eax,0xc01561ec
c0105571:	89 15 f0 61 15 c0    	mov    %edx,0xc01561f0

     
     le = &free_list;
c0105577:	c7 45 e8 ec 61 15 c0 	movl   $0xc01561ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010557e:	eb 1d                	jmp    c010559d <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0105580:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105583:	83 e8 10             	sub    $0x10,%eax
c0105586:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0105589:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010558d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105590:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105593:	8b 40 08             	mov    0x8(%eax),%eax
c0105596:	29 c2                	sub    %eax,%edx
c0105598:	89 d0                	mov    %edx,%eax
c010559a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010559d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055a0:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return listelm->next;
c01055a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055a6:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c01055a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01055ac:	81 7d e8 ec 61 15 c0 	cmpl   $0xc01561ec,-0x18(%ebp)
c01055b3:	75 cb                	jne    c0105580 <check_swap+0x63d>
     }
     cprintf("count is %d, total is %d\n",count,total);
c01055b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055b8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01055bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01055c3:	c7 04 24 79 6a 11 c0 	movl   $0xc0116a79,(%esp)
c01055ca:	e8 cd ad ff ff       	call   c010039c <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01055cf:	c7 04 24 93 6a 11 c0 	movl   $0xc0116a93,(%esp)
c01055d6:	e8 c1 ad ff ff       	call   c010039c <cprintf>
}
c01055db:	83 c4 74             	add    $0x74,%esp
c01055de:	5b                   	pop    %ebx
c01055df:	5d                   	pop    %ebp
c01055e0:	c3                   	ret    

c01055e1 <__intr_save>:
__intr_save(void) {
c01055e1:	55                   	push   %ebp
c01055e2:	89 e5                	mov    %esp,%ebp
c01055e4:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01055e7:	9c                   	pushf  
c01055e8:	58                   	pop    %eax
c01055e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01055ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01055ef:	25 00 02 00 00       	and    $0x200,%eax
c01055f4:	85 c0                	test   %eax,%eax
c01055f6:	74 0c                	je     c0105604 <__intr_save+0x23>
        intr_disable();
c01055f8:	e8 0b cd ff ff       	call   c0102308 <intr_disable>
        return 1;
c01055fd:	b8 01 00 00 00       	mov    $0x1,%eax
c0105602:	eb 05                	jmp    c0105609 <__intr_save+0x28>
    return 0;
c0105604:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105609:	c9                   	leave  
c010560a:	c3                   	ret    

c010560b <__intr_restore>:
__intr_restore(bool flag) {
c010560b:	55                   	push   %ebp
c010560c:	89 e5                	mov    %esp,%ebp
c010560e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105611:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105615:	74 05                	je     c010561c <__intr_restore+0x11>
        intr_enable();
c0105617:	e8 e6 cc ff ff       	call   c0102302 <intr_enable>
}
c010561c:	c9                   	leave  
c010561d:	c3                   	ret    

c010561e <page2ppn>:
page2ppn(struct Page *page) {
c010561e:	55                   	push   %ebp
c010561f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105621:	8b 55 08             	mov    0x8(%ebp),%edx
c0105624:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c0105629:	29 c2                	sub    %eax,%edx
c010562b:	89 d0                	mov    %edx,%eax
c010562d:	c1 f8 02             	sar    $0x2,%eax
c0105630:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0105636:	5d                   	pop    %ebp
c0105637:	c3                   	ret    

c0105638 <page2pa>:
page2pa(struct Page *page) {
c0105638:	55                   	push   %ebp
c0105639:	89 e5                	mov    %esp,%ebp
c010563b:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010563e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105641:	89 04 24             	mov    %eax,(%esp)
c0105644:	e8 d5 ff ff ff       	call   c010561e <page2ppn>
c0105649:	c1 e0 0c             	shl    $0xc,%eax
}
c010564c:	c9                   	leave  
c010564d:	c3                   	ret    

c010564e <pa2page>:
pa2page(uintptr_t pa) {
c010564e:	55                   	push   %ebp
c010564f:	89 e5                	mov    %esp,%ebp
c0105651:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105654:	8b 45 08             	mov    0x8(%ebp),%eax
c0105657:	c1 e8 0c             	shr    $0xc,%eax
c010565a:	89 c2                	mov    %eax,%edx
c010565c:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0105661:	39 c2                	cmp    %eax,%edx
c0105663:	72 1c                	jb     c0105681 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105665:	c7 44 24 08 ac 6a 11 	movl   $0xc0116aac,0x8(%esp)
c010566c:	c0 
c010566d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0105674:	00 
c0105675:	c7 04 24 cb 6a 11 c0 	movl   $0xc0116acb,(%esp)
c010567c:	e8 72 ae ff ff       	call   c01004f3 <__panic>
    return &pages[PPN(pa)];
c0105681:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c0105687:	8b 45 08             	mov    0x8(%ebp),%eax
c010568a:	c1 e8 0c             	shr    $0xc,%eax
c010568d:	89 c2                	mov    %eax,%edx
c010568f:	89 d0                	mov    %edx,%eax
c0105691:	c1 e0 03             	shl    $0x3,%eax
c0105694:	01 d0                	add    %edx,%eax
c0105696:	c1 e0 02             	shl    $0x2,%eax
c0105699:	01 c8                	add    %ecx,%eax
}
c010569b:	c9                   	leave  
c010569c:	c3                   	ret    

c010569d <page2kva>:
page2kva(struct Page *page) {
c010569d:	55                   	push   %ebp
c010569e:	89 e5                	mov    %esp,%ebp
c01056a0:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01056a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01056a6:	89 04 24             	mov    %eax,(%esp)
c01056a9:	e8 8a ff ff ff       	call   c0105638 <page2pa>
c01056ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01056b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056b4:	c1 e8 0c             	shr    $0xc,%eax
c01056b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01056ba:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c01056bf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01056c2:	72 23                	jb     c01056e7 <page2kva+0x4a>
c01056c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01056cb:	c7 44 24 08 dc 6a 11 	movl   $0xc0116adc,0x8(%esp)
c01056d2:	c0 
c01056d3:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01056da:	00 
c01056db:	c7 04 24 cb 6a 11 c0 	movl   $0xc0116acb,(%esp)
c01056e2:	e8 0c ae ff ff       	call   c01004f3 <__panic>
c01056e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056ea:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01056ef:	c9                   	leave  
c01056f0:	c3                   	ret    

c01056f1 <kva2page>:
kva2page(void *kva) {
c01056f1:	55                   	push   %ebp
c01056f2:	89 e5                	mov    %esp,%ebp
c01056f4:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01056f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01056fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01056fd:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105704:	77 23                	ja     c0105729 <kva2page+0x38>
c0105706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105709:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010570d:	c7 44 24 08 00 6b 11 	movl   $0xc0116b00,0x8(%esp)
c0105714:	c0 
c0105715:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010571c:	00 
c010571d:	c7 04 24 cb 6a 11 c0 	movl   $0xc0116acb,(%esp)
c0105724:	e8 ca ad ff ff       	call   c01004f3 <__panic>
c0105729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010572c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105731:	89 04 24             	mov    %eax,(%esp)
c0105734:	e8 15 ff ff ff       	call   c010564e <pa2page>
}
c0105739:	c9                   	leave  
c010573a:	c3                   	ret    

c010573b <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c010573b:	55                   	push   %ebp
c010573c:	89 e5                	mov    %esp,%ebp
c010573e:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0105741:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105744:	ba 01 00 00 00       	mov    $0x1,%edx
c0105749:	89 c1                	mov    %eax,%ecx
c010574b:	d3 e2                	shl    %cl,%edx
c010574d:	89 d0                	mov    %edx,%eax
c010574f:	89 04 24             	mov    %eax,(%esp)
c0105752:	e8 87 20 00 00       	call   c01077de <alloc_pages>
c0105757:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010575a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010575e:	75 07                	jne    c0105767 <__slob_get_free_pages+0x2c>
    return NULL;
c0105760:	b8 00 00 00 00       	mov    $0x0,%eax
c0105765:	eb 0b                	jmp    c0105772 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010576a:	89 04 24             	mov    %eax,(%esp)
c010576d:	e8 2b ff ff ff       	call   c010569d <page2kva>
}
c0105772:	c9                   	leave  
c0105773:	c3                   	ret    

c0105774 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0105774:	55                   	push   %ebp
c0105775:	89 e5                	mov    %esp,%ebp
c0105777:	53                   	push   %ebx
c0105778:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c010577b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010577e:	ba 01 00 00 00       	mov    $0x1,%edx
c0105783:	89 c1                	mov    %eax,%ecx
c0105785:	d3 e2                	shl    %cl,%edx
c0105787:	89 d0                	mov    %edx,%eax
c0105789:	89 c3                	mov    %eax,%ebx
c010578b:	8b 45 08             	mov    0x8(%ebp),%eax
c010578e:	89 04 24             	mov    %eax,(%esp)
c0105791:	e8 5b ff ff ff       	call   c01056f1 <kva2page>
c0105796:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010579a:	89 04 24             	mov    %eax,(%esp)
c010579d:	e8 a7 20 00 00       	call   c0107849 <free_pages>
}
c01057a2:	83 c4 14             	add    $0x14,%esp
c01057a5:	5b                   	pop    %ebx
c01057a6:	5d                   	pop    %ebp
c01057a7:	c3                   	ret    

c01057a8 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01057a8:	55                   	push   %ebp
c01057a9:	89 e5                	mov    %esp,%ebp
c01057ab:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01057ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01057b1:	83 c0 08             	add    $0x8,%eax
c01057b4:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01057b9:	76 24                	jbe    c01057df <slob_alloc+0x37>
c01057bb:	c7 44 24 0c 24 6b 11 	movl   $0xc0116b24,0xc(%esp)
c01057c2:	c0 
c01057c3:	c7 44 24 08 43 6b 11 	movl   $0xc0116b43,0x8(%esp)
c01057ca:	c0 
c01057cb:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01057d2:	00 
c01057d3:	c7 04 24 58 6b 11 c0 	movl   $0xc0116b58,(%esp)
c01057da:	e8 14 ad ff ff       	call   c01004f3 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01057df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01057e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01057ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01057f0:	83 c0 07             	add    $0x7,%eax
c01057f3:	c1 e8 03             	shr    $0x3,%eax
c01057f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01057f9:	e8 e3 fd ff ff       	call   c01055e1 <__intr_save>
c01057fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105801:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010580c:	8b 40 04             	mov    0x4(%eax),%eax
c010580f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105812:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105816:	74 25                	je     c010583d <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0105818:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010581b:	8b 45 10             	mov    0x10(%ebp),%eax
c010581e:	01 d0                	add    %edx,%eax
c0105820:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105823:	8b 45 10             	mov    0x10(%ebp),%eax
c0105826:	f7 d8                	neg    %eax
c0105828:	21 d0                	and    %edx,%eax
c010582a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010582d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105830:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105833:	29 c2                	sub    %eax,%edx
c0105835:	89 d0                	mov    %edx,%eax
c0105837:	c1 f8 03             	sar    $0x3,%eax
c010583a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c010583d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105840:	8b 00                	mov    (%eax),%eax
c0105842:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105845:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105848:	01 ca                	add    %ecx,%edx
c010584a:	39 d0                	cmp    %edx,%eax
c010584c:	0f 8c aa 00 00 00    	jl     c01058fc <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0105852:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105856:	74 38                	je     c0105890 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0105858:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010585b:	8b 00                	mov    (%eax),%eax
c010585d:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105860:	89 c2                	mov    %eax,%edx
c0105862:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105865:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105867:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010586a:	8b 50 04             	mov    0x4(%eax),%edx
c010586d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105870:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105873:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105876:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105879:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010587c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010587f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105882:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0105884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105887:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010588a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010588d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0105890:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105893:	8b 00                	mov    (%eax),%eax
c0105895:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105898:	75 0e                	jne    c01058a8 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010589a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010589d:	8b 50 04             	mov    0x4(%eax),%edx
c01058a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058a3:	89 50 04             	mov    %edx,0x4(%eax)
c01058a6:	eb 3c                	jmp    c01058e4 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c01058a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01058b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058b5:	01 c2                	add    %eax,%edx
c01058b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058ba:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01058bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058c0:	8b 40 04             	mov    0x4(%eax),%eax
c01058c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01058c6:	8b 12                	mov    (%edx),%edx
c01058c8:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01058cb:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01058cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058d0:	8b 40 04             	mov    0x4(%eax),%eax
c01058d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01058d6:	8b 52 04             	mov    0x4(%edx),%edx
c01058d9:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01058dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058df:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01058e2:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01058e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058e7:	a3 e8 f9 14 c0       	mov    %eax,0xc014f9e8
			spin_unlock_irqrestore(&slob_lock, flags);
c01058ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01058ef:	89 04 24             	mov    %eax,(%esp)
c01058f2:	e8 14 fd ff ff       	call   c010560b <__intr_restore>
			return cur;
c01058f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058fa:	eb 7f                	jmp    c010597b <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01058fc:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0105901:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105904:	75 61                	jne    c0105967 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0105906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105909:	89 04 24             	mov    %eax,(%esp)
c010590c:	e8 fa fc ff ff       	call   c010560b <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0105911:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105918:	75 07                	jne    c0105921 <slob_alloc+0x179>
				return 0;
c010591a:	b8 00 00 00 00       	mov    $0x0,%eax
c010591f:	eb 5a                	jmp    c010597b <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105921:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105928:	00 
c0105929:	8b 45 0c             	mov    0xc(%ebp),%eax
c010592c:	89 04 24             	mov    %eax,(%esp)
c010592f:	e8 07 fe ff ff       	call   c010573b <__slob_get_free_pages>
c0105934:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105937:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010593b:	75 07                	jne    c0105944 <slob_alloc+0x19c>
				return 0;
c010593d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105942:	eb 37                	jmp    c010597b <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0105944:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010594b:	00 
c010594c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010594f:	89 04 24             	mov    %eax,(%esp)
c0105952:	e8 26 00 00 00       	call   c010597d <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0105957:	e8 85 fc ff ff       	call   c01055e1 <__intr_save>
c010595c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c010595f:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c0105964:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105967:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010596a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010596d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105970:	8b 40 04             	mov    0x4(%eax),%eax
c0105973:	89 45 f0             	mov    %eax,-0x10(%ebp)
		}
	}
c0105976:	e9 97 fe ff ff       	jmp    c0105812 <slob_alloc+0x6a>
}
c010597b:	c9                   	leave  
c010597c:	c3                   	ret    

c010597d <slob_free>:

static void slob_free(void *block, int size)
{
c010597d:	55                   	push   %ebp
c010597e:	89 e5                	mov    %esp,%ebp
c0105980:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105983:	8b 45 08             	mov    0x8(%ebp),%eax
c0105986:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105989:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010598d:	75 05                	jne    c0105994 <slob_free+0x17>
		return;
c010598f:	e9 ff 00 00 00       	jmp    c0105a93 <slob_free+0x116>

	if (size)
c0105994:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105998:	74 10                	je     c01059aa <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010599a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010599d:	83 c0 07             	add    $0x7,%eax
c01059a0:	c1 e8 03             	shr    $0x3,%eax
c01059a3:	89 c2                	mov    %eax,%edx
c01059a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059a8:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01059aa:	e8 32 fc ff ff       	call   c01055e1 <__intr_save>
c01059af:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01059b2:	a1 e8 f9 14 c0       	mov    0xc014f9e8,%eax
c01059b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01059ba:	eb 27                	jmp    c01059e3 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01059bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059bf:	8b 40 04             	mov    0x4(%eax),%eax
c01059c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01059c5:	77 13                	ja     c01059da <slob_free+0x5d>
c01059c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01059cd:	77 27                	ja     c01059f6 <slob_free+0x79>
c01059cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059d2:	8b 40 04             	mov    0x4(%eax),%eax
c01059d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01059d8:	77 1c                	ja     c01059f6 <slob_free+0x79>
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01059da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059dd:	8b 40 04             	mov    0x4(%eax),%eax
c01059e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01059e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01059e9:	76 d1                	jbe    c01059bc <slob_free+0x3f>
c01059eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059ee:	8b 40 04             	mov    0x4(%eax),%eax
c01059f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01059f4:	76 c6                	jbe    c01059bc <slob_free+0x3f>
			break;

	if (b + b->units == cur->next) {
c01059f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059f9:	8b 00                	mov    (%eax),%eax
c01059fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a05:	01 c2                	add    %eax,%edx
c0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a0a:	8b 40 04             	mov    0x4(%eax),%eax
c0105a0d:	39 c2                	cmp    %eax,%edx
c0105a0f:	75 25                	jne    c0105a36 <slob_free+0xb9>
		b->units += cur->next->units;
c0105a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a14:	8b 10                	mov    (%eax),%edx
c0105a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a19:	8b 40 04             	mov    0x4(%eax),%eax
c0105a1c:	8b 00                	mov    (%eax),%eax
c0105a1e:	01 c2                	add    %eax,%edx
c0105a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a23:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105a25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a28:	8b 40 04             	mov    0x4(%eax),%eax
c0105a2b:	8b 50 04             	mov    0x4(%eax),%edx
c0105a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a31:	89 50 04             	mov    %edx,0x4(%eax)
c0105a34:	eb 0c                	jmp    c0105a42 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0105a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a39:	8b 50 04             	mov    0x4(%eax),%edx
c0105a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a3f:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0105a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a45:	8b 00                	mov    (%eax),%eax
c0105a47:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a51:	01 d0                	add    %edx,%eax
c0105a53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105a56:	75 1f                	jne    c0105a77 <slob_free+0xfa>
		cur->units += b->units;
c0105a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a5b:	8b 10                	mov    (%eax),%edx
c0105a5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a60:	8b 00                	mov    (%eax),%eax
c0105a62:	01 c2                	add    %eax,%edx
c0105a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a67:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105a69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a6c:	8b 50 04             	mov    0x4(%eax),%edx
c0105a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a72:	89 50 04             	mov    %edx,0x4(%eax)
c0105a75:	eb 09                	jmp    c0105a80 <slob_free+0x103>
	} else
		cur->next = b;
c0105a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105a7d:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a83:	a3 e8 f9 14 c0       	mov    %eax,0xc014f9e8

	spin_unlock_irqrestore(&slob_lock, flags);
c0105a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a8b:	89 04 24             	mov    %eax,(%esp)
c0105a8e:	e8 78 fb ff ff       	call   c010560b <__intr_restore>
}
c0105a93:	c9                   	leave  
c0105a94:	c3                   	ret    

c0105a95 <check_slab>:



void check_slab(void) {
c0105a95:	55                   	push   %ebp
c0105a96:	89 e5                	mov    %esp,%ebp
c0105a98:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() succeeded!\n");
c0105a9b:	c7 04 24 6a 6b 11 c0 	movl   $0xc0116b6a,(%esp)
c0105aa2:	e8 f5 a8 ff ff       	call   c010039c <cprintf>
}
c0105aa7:	c9                   	leave  
c0105aa8:	c3                   	ret    

c0105aa9 <slab_init>:

void
slab_init(void) {
c0105aa9:	55                   	push   %ebp
c0105aaa:	89 e5                	mov    %esp,%ebp
c0105aac:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0105aaf:	c7 04 24 83 6b 11 c0 	movl   $0xc0116b83,(%esp)
c0105ab6:	e8 e1 a8 ff ff       	call   c010039c <cprintf>
  check_slab();
c0105abb:	e8 d5 ff ff ff       	call   c0105a95 <check_slab>
}
c0105ac0:	c9                   	leave  
c0105ac1:	c3                   	ret    

c0105ac2 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105ac2:	55                   	push   %ebp
c0105ac3:	89 e5                	mov    %esp,%ebp
c0105ac5:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0105ac8:	e8 dc ff ff ff       	call   c0105aa9 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105acd:	c7 04 24 97 6b 11 c0 	movl   $0xc0116b97,(%esp)
c0105ad4:	e8 c3 a8 ff ff       	call   c010039c <cprintf>
}
c0105ad9:	c9                   	leave  
c0105ada:	c3                   	ret    

c0105adb <slab_allocated>:

size_t
slab_allocated(void) {
c0105adb:	55                   	push   %ebp
c0105adc:	89 e5                	mov    %esp,%ebp
  return 0;
c0105ade:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ae3:	5d                   	pop    %ebp
c0105ae4:	c3                   	ret    

c0105ae5 <kallocated>:

size_t
kallocated(void) {
c0105ae5:	55                   	push   %ebp
c0105ae6:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0105ae8:	e8 ee ff ff ff       	call   c0105adb <slab_allocated>
}
c0105aed:	5d                   	pop    %ebp
c0105aee:	c3                   	ret    

c0105aef <find_order>:

static int find_order(int size)
{
c0105aef:	55                   	push   %ebp
c0105af0:	89 e5                	mov    %esp,%ebp
c0105af2:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105af5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105afc:	eb 07                	jmp    c0105b05 <find_order+0x16>
		order++;
c0105afe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105b02:	d1 7d 08             	sarl   0x8(%ebp)
c0105b05:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105b0c:	7f f0                	jg     c0105afe <find_order+0xf>
	return order;
c0105b0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105b11:	c9                   	leave  
c0105b12:	c3                   	ret    

c0105b13 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105b13:	55                   	push   %ebp
c0105b14:	89 e5                	mov    %esp,%ebp
c0105b16:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105b19:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105b20:	77 38                	ja     c0105b5a <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105b22:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b25:	8d 50 08             	lea    0x8(%eax),%edx
c0105b28:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b2f:	00 
c0105b30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b37:	89 14 24             	mov    %edx,(%esp)
c0105b3a:	e8 69 fc ff ff       	call   c01057a8 <slob_alloc>
c0105b3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0105b42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b46:	74 08                	je     c0105b50 <__kmalloc+0x3d>
c0105b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b4b:	83 c0 08             	add    $0x8,%eax
c0105b4e:	eb 05                	jmp    c0105b55 <__kmalloc+0x42>
c0105b50:	b8 00 00 00 00       	mov    $0x0,%eax
c0105b55:	e9 a6 00 00 00       	jmp    c0105c00 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105b5a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b61:	00 
c0105b62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b69:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0105b70:	e8 33 fc ff ff       	call   c01057a8 <slob_alloc>
c0105b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105b78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b7c:	75 07                	jne    c0105b85 <__kmalloc+0x72>
		return 0;
c0105b7e:	b8 00 00 00 00       	mov    $0x0,%eax
c0105b83:	eb 7b                	jmp    c0105c00 <__kmalloc+0xed>

	bb->order = find_order(size);
c0105b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b88:	89 04 24             	mov    %eax,(%esp)
c0105b8b:	e8 5f ff ff ff       	call   c0105aef <find_order>
c0105b90:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105b93:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0105b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b98:	8b 00                	mov    (%eax),%eax
c0105b9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ba1:	89 04 24             	mov    %eax,(%esp)
c0105ba4:	e8 92 fb ff ff       	call   c010573b <__slob_get_free_pages>
c0105ba9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105bac:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0105baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bb2:	8b 40 04             	mov    0x4(%eax),%eax
c0105bb5:	85 c0                	test   %eax,%eax
c0105bb7:	74 2f                	je     c0105be8 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0105bb9:	e8 23 fa ff ff       	call   c01055e1 <__intr_save>
c0105bbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0105bc1:	8b 15 74 2f 15 c0    	mov    0xc0152f74,%edx
c0105bc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bca:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bd0:	a3 74 2f 15 c0       	mov    %eax,0xc0152f74
		spin_unlock_irqrestore(&block_lock, flags);
c0105bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bd8:	89 04 24             	mov    %eax,(%esp)
c0105bdb:	e8 2b fa ff ff       	call   c010560b <__intr_restore>
		return bb->pages;
c0105be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105be3:	8b 40 04             	mov    0x4(%eax),%eax
c0105be6:	eb 18                	jmp    c0105c00 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105be8:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0105bef:	00 
c0105bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bf3:	89 04 24             	mov    %eax,(%esp)
c0105bf6:	e8 82 fd ff ff       	call   c010597d <slob_free>
	return 0;
c0105bfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105c00:	c9                   	leave  
c0105c01:	c3                   	ret    

c0105c02 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105c02:	55                   	push   %ebp
c0105c03:	89 e5                	mov    %esp,%ebp
c0105c05:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0105c08:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105c0f:	00 
c0105c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c13:	89 04 24             	mov    %eax,(%esp)
c0105c16:	e8 f8 fe ff ff       	call   c0105b13 <__kmalloc>
}
c0105c1b:	c9                   	leave  
c0105c1c:	c3                   	ret    

c0105c1d <kfree>:


void kfree(void *block)
{
c0105c1d:	55                   	push   %ebp
c0105c1e:	89 e5                	mov    %esp,%ebp
c0105c20:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0105c23:	c7 45 f0 74 2f 15 c0 	movl   $0xc0152f74,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105c2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105c2e:	75 05                	jne    c0105c35 <kfree+0x18>
		return;
c0105c30:	e9 a2 00 00 00       	jmp    c0105cd7 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105c35:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c38:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c3d:	85 c0                	test   %eax,%eax
c0105c3f:	75 7f                	jne    c0105cc0 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0105c41:	e8 9b f9 ff ff       	call   c01055e1 <__intr_save>
c0105c46:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105c49:	a1 74 2f 15 c0       	mov    0xc0152f74,%eax
c0105c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c51:	eb 5c                	jmp    c0105caf <kfree+0x92>
			if (bb->pages == block) {
c0105c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c56:	8b 40 04             	mov    0x4(%eax),%eax
c0105c59:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105c5c:	75 3f                	jne    c0105c9d <kfree+0x80>
				*last = bb->next;
c0105c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c61:	8b 50 08             	mov    0x8(%eax),%edx
c0105c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c67:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105c69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c6c:	89 04 24             	mov    %eax,(%esp)
c0105c6f:	e8 97 f9 ff ff       	call   c010560b <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0105c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c77:	8b 10                	mov    (%eax),%edx
c0105c79:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105c80:	89 04 24             	mov    %eax,(%esp)
c0105c83:	e8 ec fa ff ff       	call   c0105774 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0105c88:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0105c8f:	00 
c0105c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c93:	89 04 24             	mov    %eax,(%esp)
c0105c96:	e8 e2 fc ff ff       	call   c010597d <slob_free>
				return;
c0105c9b:	eb 3a                	jmp    c0105cd7 <kfree+0xba>
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ca0:	83 c0 08             	add    $0x8,%eax
c0105ca3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105ca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ca9:	8b 40 08             	mov    0x8(%eax),%eax
c0105cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cb3:	75 9e                	jne    c0105c53 <kfree+0x36>
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105cb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cb8:	89 04 24             	mov    %eax,(%esp)
c0105cbb:	e8 4b f9 ff ff       	call   c010560b <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0105cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc3:	83 e8 08             	sub    $0x8,%eax
c0105cc6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105ccd:	00 
c0105cce:	89 04 24             	mov    %eax,(%esp)
c0105cd1:	e8 a7 fc ff ff       	call   c010597d <slob_free>
	return;
c0105cd6:	90                   	nop
}
c0105cd7:	c9                   	leave  
c0105cd8:	c3                   	ret    

c0105cd9 <ksize>:


unsigned int ksize(const void *block)
{
c0105cd9:	55                   	push   %ebp
c0105cda:	89 e5                	mov    %esp,%ebp
c0105cdc:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105cdf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105ce3:	75 07                	jne    c0105cec <ksize+0x13>
		return 0;
c0105ce5:	b8 00 00 00 00       	mov    $0x0,%eax
c0105cea:	eb 6b                	jmp    c0105d57 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105cec:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cef:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cf4:	85 c0                	test   %eax,%eax
c0105cf6:	75 54                	jne    c0105d4c <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0105cf8:	e8 e4 f8 ff ff       	call   c01055e1 <__intr_save>
c0105cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0105d00:	a1 74 2f 15 c0       	mov    0xc0152f74,%eax
c0105d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105d08:	eb 31                	jmp    c0105d3b <ksize+0x62>
			if (bb->pages == block) {
c0105d0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d0d:	8b 40 04             	mov    0x4(%eax),%eax
c0105d10:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105d13:	75 1d                	jne    c0105d32 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0105d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d18:	89 04 24             	mov    %eax,(%esp)
c0105d1b:	e8 eb f8 ff ff       	call   c010560b <__intr_restore>
				return PAGE_SIZE << bb->order;
c0105d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d23:	8b 00                	mov    (%eax),%eax
c0105d25:	ba 00 10 00 00       	mov    $0x1000,%edx
c0105d2a:	89 c1                	mov    %eax,%ecx
c0105d2c:	d3 e2                	shl    %cl,%edx
c0105d2e:	89 d0                	mov    %edx,%eax
c0105d30:	eb 25                	jmp    c0105d57 <ksize+0x7e>
		for (bb = bigblocks; bb; bb = bb->next)
c0105d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d35:	8b 40 08             	mov    0x8(%eax),%eax
c0105d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d3f:	75 c9                	jne    c0105d0a <ksize+0x31>
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0105d41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d44:	89 04 24             	mov    %eax,(%esp)
c0105d47:	e8 bf f8 ff ff       	call   c010560b <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0105d4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d4f:	83 e8 08             	sub    $0x8,%eax
c0105d52:	8b 00                	mov    (%eax),%eax
c0105d54:	c1 e0 03             	shl    $0x3,%eax
}
c0105d57:	c9                   	leave  
c0105d58:	c3                   	ret    

c0105d59 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0105d59:	55                   	push   %ebp
c0105d5a:	89 e5                	mov    %esp,%ebp
c0105d5c:	83 ec 10             	sub    $0x10,%esp
c0105d5f:	c7 45 fc e4 61 15 c0 	movl   $0xc01561e4,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0105d66:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105d69:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105d6c:	89 50 04             	mov    %edx,0x4(%eax)
c0105d6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105d72:	8b 50 04             	mov    0x4(%eax),%edx
c0105d75:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105d78:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0105d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d7d:	c7 40 14 e4 61 15 c0 	movl   $0xc01561e4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0105d84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105d89:	c9                   	leave  
c0105d8a:	c3                   	ret    

c0105d8b <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105d8b:	55                   	push   %ebp
c0105d8c:	89 e5                	mov    %esp,%ebp
c0105d8e:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0105d91:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d94:	8b 40 14             	mov    0x14(%eax),%eax
c0105d97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0105d9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d9d:	83 c0 18             	add    $0x18,%eax
c0105da0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0105da3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105da7:	74 06                	je     c0105daf <_fifo_map_swappable+0x24>
c0105da9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105dad:	75 24                	jne    c0105dd3 <_fifo_map_swappable+0x48>
c0105daf:	c7 44 24 0c b4 6b 11 	movl   $0xc0116bb4,0xc(%esp)
c0105db6:	c0 
c0105db7:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105dbe:	c0 
c0105dbf:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0105dc6:	00 
c0105dc7:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105dce:	e8 20 a7 ff ff       	call   c01004f3 <__panic>
c0105dd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105dd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ddc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105ddf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105de2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105de5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105de8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c0105deb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105dee:	8b 40 04             	mov    0x4(%eax),%eax
c0105df1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105df4:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0105df7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105dfa:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0105dfd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0105e00:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e03:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105e06:	89 10                	mov    %edx,(%eax)
c0105e08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e0b:	8b 10                	mov    (%eax),%edx
c0105e0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e10:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105e13:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105e16:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105e19:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105e1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105e1f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105e22:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0105e24:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e29:	c9                   	leave  
c0105e2a:	c3                   	ret    

c0105e2b <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0105e2b:	55                   	push   %ebp
c0105e2c:	89 e5                	mov    %esp,%ebp
c0105e2e:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0105e31:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e34:	8b 40 14             	mov    0x14(%eax),%eax
c0105e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0105e3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e3e:	75 24                	jne    c0105e64 <_fifo_swap_out_victim+0x39>
c0105e40:	c7 44 24 0c fb 6b 11 	movl   $0xc0116bfb,0xc(%esp)
c0105e47:	c0 
c0105e48:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105e4f:	c0 
c0105e50:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0105e57:	00 
c0105e58:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105e5f:	e8 8f a6 ff ff       	call   c01004f3 <__panic>
     assert(in_tick==0);
c0105e64:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e68:	74 24                	je     c0105e8e <_fifo_swap_out_victim+0x63>
c0105e6a:	c7 44 24 0c 08 6c 11 	movl   $0xc0116c08,0xc(%esp)
c0105e71:	c0 
c0105e72:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105e79:	c0 
c0105e7a:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0105e81:	00 
c0105e82:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105e89:	e8 65 a6 ff ff       	call   c01004f3 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0105e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e91:	8b 00                	mov    (%eax),%eax
c0105e93:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0105e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105e9c:	75 24                	jne    c0105ec2 <_fifo_swap_out_victim+0x97>
c0105e9e:	c7 44 24 0c 13 6c 11 	movl   $0xc0116c13,0xc(%esp)
c0105ea5:	c0 
c0105ea6:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105ead:	c0 
c0105eae:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0105eb5:	00 
c0105eb6:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105ebd:	e8 31 a6 ff ff       	call   c01004f3 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0105ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ec5:	83 e8 18             	sub    $0x18,%eax
c0105ec8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105ecb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ece:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0105ed1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ed4:	8b 40 04             	mov    0x4(%eax),%eax
c0105ed7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105eda:	8b 12                	mov    (%edx),%edx
c0105edc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0105edf:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next;
c0105ee2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ee5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105ee8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0105eeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105eee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105ef1:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0105ef3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105ef7:	75 24                	jne    c0105f1d <_fifo_swap_out_victim+0xf2>
c0105ef9:	c7 44 24 0c 1c 6c 11 	movl   $0xc0116c1c,0xc(%esp)
c0105f00:	c0 
c0105f01:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105f08:	c0 
c0105f09:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0105f10:	00 
c0105f11:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105f18:	e8 d6 a5 ff ff       	call   c01004f3 <__panic>
     *ptr_page = p;
c0105f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f20:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f23:	89 10                	mov    %edx,(%eax)
     return 0;
c0105f25:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f2a:	c9                   	leave  
c0105f2b:	c3                   	ret    

c0105f2c <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0105f2c:	55                   	push   %ebp
c0105f2d:	89 e5                	mov    %esp,%ebp
c0105f2f:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0105f32:	c7 04 24 28 6c 11 c0 	movl   $0xc0116c28,(%esp)
c0105f39:	e8 5e a4 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0105f3e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105f43:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0105f46:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0105f4b:	83 f8 04             	cmp    $0x4,%eax
c0105f4e:	74 24                	je     c0105f74 <_fifo_check_swap+0x48>
c0105f50:	c7 44 24 0c 4e 6c 11 	movl   $0xc0116c4e,0xc(%esp)
c0105f57:	c0 
c0105f58:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105f5f:	c0 
c0105f60:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0105f67:	00 
c0105f68:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105f6f:	e8 7f a5 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105f74:	c7 04 24 60 6c 11 c0 	movl   $0xc0116c60,(%esp)
c0105f7b:	e8 1c a4 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0105f80:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105f85:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0105f88:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0105f8d:	83 f8 04             	cmp    $0x4,%eax
c0105f90:	74 24                	je     c0105fb6 <_fifo_check_swap+0x8a>
c0105f92:	c7 44 24 0c 4e 6c 11 	movl   $0xc0116c4e,0xc(%esp)
c0105f99:	c0 
c0105f9a:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105fa1:	c0 
c0105fa2:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0105fa9:	00 
c0105faa:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105fb1:	e8 3d a5 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0105fb6:	c7 04 24 88 6c 11 c0 	movl   $0xc0116c88,(%esp)
c0105fbd:	e8 da a3 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0105fc2:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105fc7:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0105fca:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0105fcf:	83 f8 04             	cmp    $0x4,%eax
c0105fd2:	74 24                	je     c0105ff8 <_fifo_check_swap+0xcc>
c0105fd4:	c7 44 24 0c 4e 6c 11 	movl   $0xc0116c4e,0xc(%esp)
c0105fdb:	c0 
c0105fdc:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0105fe3:	c0 
c0105fe4:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0105feb:	00 
c0105fec:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0105ff3:	e8 fb a4 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105ff8:	c7 04 24 b0 6c 11 c0 	movl   $0xc0116cb0,(%esp)
c0105fff:	e8 98 a3 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0106004:	b8 00 20 00 00       	mov    $0x2000,%eax
c0106009:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010600c:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0106011:	83 f8 04             	cmp    $0x4,%eax
c0106014:	74 24                	je     c010603a <_fifo_check_swap+0x10e>
c0106016:	c7 44 24 0c 4e 6c 11 	movl   $0xc0116c4e,0xc(%esp)
c010601d:	c0 
c010601e:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0106025:	c0 
c0106026:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010602d:	00 
c010602e:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0106035:	e8 b9 a4 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010603a:	c7 04 24 d8 6c 11 c0 	movl   $0xc0116cd8,(%esp)
c0106041:	e8 56 a3 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0106046:	b8 00 50 00 00       	mov    $0x5000,%eax
c010604b:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010604e:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0106053:	83 f8 05             	cmp    $0x5,%eax
c0106056:	74 24                	je     c010607c <_fifo_check_swap+0x150>
c0106058:	c7 44 24 0c fe 6c 11 	movl   $0xc0116cfe,0xc(%esp)
c010605f:	c0 
c0106060:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0106067:	c0 
c0106068:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010606f:	00 
c0106070:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0106077:	e8 77 a4 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010607c:	c7 04 24 b0 6c 11 c0 	movl   $0xc0116cb0,(%esp)
c0106083:	e8 14 a3 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0106088:	b8 00 20 00 00       	mov    $0x2000,%eax
c010608d:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0106090:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0106095:	83 f8 05             	cmp    $0x5,%eax
c0106098:	74 24                	je     c01060be <_fifo_check_swap+0x192>
c010609a:	c7 44 24 0c fe 6c 11 	movl   $0xc0116cfe,0xc(%esp)
c01060a1:	c0 
c01060a2:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c01060a9:	c0 
c01060aa:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01060b1:	00 
c01060b2:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c01060b9:	e8 35 a4 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01060be:	c7 04 24 60 6c 11 c0 	movl   $0xc0116c60,(%esp)
c01060c5:	e8 d2 a2 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01060ca:	b8 00 10 00 00       	mov    $0x1000,%eax
c01060cf:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01060d2:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c01060d7:	83 f8 06             	cmp    $0x6,%eax
c01060da:	74 24                	je     c0106100 <_fifo_check_swap+0x1d4>
c01060dc:	c7 44 24 0c 0d 6d 11 	movl   $0xc0116d0d,0xc(%esp)
c01060e3:	c0 
c01060e4:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c01060eb:	c0 
c01060ec:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01060f3:	00 
c01060f4:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c01060fb:	e8 f3 a3 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0106100:	c7 04 24 b0 6c 11 c0 	movl   $0xc0116cb0,(%esp)
c0106107:	e8 90 a2 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010610c:	b8 00 20 00 00       	mov    $0x2000,%eax
c0106111:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0106114:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0106119:	83 f8 07             	cmp    $0x7,%eax
c010611c:	74 24                	je     c0106142 <_fifo_check_swap+0x216>
c010611e:	c7 44 24 0c 1c 6d 11 	movl   $0xc0116d1c,0xc(%esp)
c0106125:	c0 
c0106126:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c010612d:	c0 
c010612e:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0106135:	00 
c0106136:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c010613d:	e8 b1 a3 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0106142:	c7 04 24 28 6c 11 c0 	movl   $0xc0116c28,(%esp)
c0106149:	e8 4e a2 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010614e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0106153:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0106156:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c010615b:	83 f8 08             	cmp    $0x8,%eax
c010615e:	74 24                	je     c0106184 <_fifo_check_swap+0x258>
c0106160:	c7 44 24 0c 2b 6d 11 	movl   $0xc0116d2b,0xc(%esp)
c0106167:	c0 
c0106168:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c010616f:	c0 
c0106170:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0106177:	00 
c0106178:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c010617f:	e8 6f a3 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0106184:	c7 04 24 88 6c 11 c0 	movl   $0xc0116c88,(%esp)
c010618b:	e8 0c a2 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0106190:	b8 00 40 00 00       	mov    $0x4000,%eax
c0106195:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0106198:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c010619d:	83 f8 09             	cmp    $0x9,%eax
c01061a0:	74 24                	je     c01061c6 <_fifo_check_swap+0x29a>
c01061a2:	c7 44 24 0c 3a 6d 11 	movl   $0xc0116d3a,0xc(%esp)
c01061a9:	c0 
c01061aa:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c01061b1:	c0 
c01061b2:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01061b9:	00 
c01061ba:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c01061c1:	e8 2d a3 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01061c6:	c7 04 24 d8 6c 11 c0 	movl   $0xc0116cd8,(%esp)
c01061cd:	e8 ca a1 ff ff       	call   c010039c <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c01061d2:	b8 00 50 00 00       	mov    $0x5000,%eax
c01061d7:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c01061da:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c01061df:	83 f8 0a             	cmp    $0xa,%eax
c01061e2:	74 24                	je     c0106208 <_fifo_check_swap+0x2dc>
c01061e4:	c7 44 24 0c 49 6d 11 	movl   $0xc0116d49,0xc(%esp)
c01061eb:	c0 
c01061ec:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c01061f3:	c0 
c01061f4:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c01061fb:	00 
c01061fc:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0106203:	e8 eb a2 ff ff       	call   c01004f3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0106208:	c7 04 24 60 6c 11 c0 	movl   $0xc0116c60,(%esp)
c010620f:	e8 88 a1 ff ff       	call   c010039c <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0106214:	b8 00 10 00 00       	mov    $0x1000,%eax
c0106219:	0f b6 00             	movzbl (%eax),%eax
c010621c:	3c 0a                	cmp    $0xa,%al
c010621e:	74 24                	je     c0106244 <_fifo_check_swap+0x318>
c0106220:	c7 44 24 0c 5c 6d 11 	movl   $0xc0116d5c,0xc(%esp)
c0106227:	c0 
c0106228:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c010622f:	c0 
c0106230:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0106237:	00 
c0106238:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c010623f:	e8 af a2 ff ff       	call   c01004f3 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0106244:	b8 00 10 00 00       	mov    $0x1000,%eax
c0106249:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c010624c:	a1 64 2f 15 c0       	mov    0xc0152f64,%eax
c0106251:	83 f8 0b             	cmp    $0xb,%eax
c0106254:	74 24                	je     c010627a <_fifo_check_swap+0x34e>
c0106256:	c7 44 24 0c 7d 6d 11 	movl   $0xc0116d7d,0xc(%esp)
c010625d:	c0 
c010625e:	c7 44 24 08 d2 6b 11 	movl   $0xc0116bd2,0x8(%esp)
c0106265:	c0 
c0106266:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c010626d:	00 
c010626e:	c7 04 24 e7 6b 11 c0 	movl   $0xc0116be7,(%esp)
c0106275:	e8 79 a2 ff ff       	call   c01004f3 <__panic>
    return 0;
c010627a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010627f:	c9                   	leave  
c0106280:	c3                   	ret    

c0106281 <_fifo_init>:


static int
_fifo_init(void)
{
c0106281:	55                   	push   %ebp
c0106282:	89 e5                	mov    %esp,%ebp
    return 0;
c0106284:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106289:	5d                   	pop    %ebp
c010628a:	c3                   	ret    

c010628b <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010628b:	55                   	push   %ebp
c010628c:	89 e5                	mov    %esp,%ebp
    return 0;
c010628e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106293:	5d                   	pop    %ebp
c0106294:	c3                   	ret    

c0106295 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0106295:	55                   	push   %ebp
c0106296:	89 e5                	mov    %esp,%ebp
c0106298:	b8 00 00 00 00       	mov    $0x0,%eax
c010629d:	5d                   	pop    %ebp
c010629e:	c3                   	ret    

c010629f <page2ppn>:
page2ppn(struct Page *page) {
c010629f:	55                   	push   %ebp
c01062a0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01062a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01062a5:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c01062aa:	29 c2                	sub    %eax,%edx
c01062ac:	89 d0                	mov    %edx,%eax
c01062ae:	c1 f8 02             	sar    $0x2,%eax
c01062b1:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01062b7:	5d                   	pop    %ebp
c01062b8:	c3                   	ret    

c01062b9 <page2pa>:
page2pa(struct Page *page) {
c01062b9:	55                   	push   %ebp
c01062ba:	89 e5                	mov    %esp,%ebp
c01062bc:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01062bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01062c2:	89 04 24             	mov    %eax,(%esp)
c01062c5:	e8 d5 ff ff ff       	call   c010629f <page2ppn>
c01062ca:	c1 e0 0c             	shl    $0xc,%eax
}
c01062cd:	c9                   	leave  
c01062ce:	c3                   	ret    

c01062cf <page_ref>:

static inline int
page_ref(struct Page *page) {
c01062cf:	55                   	push   %ebp
c01062d0:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01062d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01062d5:	8b 00                	mov    (%eax),%eax
}
c01062d7:	5d                   	pop    %ebp
c01062d8:	c3                   	ret    

c01062d9 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01062d9:	55                   	push   %ebp
c01062da:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01062dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01062df:	8b 55 0c             	mov    0xc(%ebp),%edx
c01062e2:	89 10                	mov    %edx,(%eax)
}
c01062e4:	5d                   	pop    %ebp
c01062e5:	c3                   	ret    

c01062e6 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01062e6:	55                   	push   %ebp
c01062e7:	89 e5                	mov    %esp,%ebp
c01062e9:	83 ec 10             	sub    $0x10,%esp
c01062ec:	c7 45 fc ec 61 15 c0 	movl   $0xc01561ec,-0x4(%ebp)
    elm->prev = elm->next = elm;
c01062f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01062f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01062f9:	89 50 04             	mov    %edx,0x4(%eax)
c01062fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01062ff:	8b 50 04             	mov    0x4(%eax),%edx
c0106302:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106305:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0106307:	c7 05 f4 61 15 c0 00 	movl   $0x0,0xc01561f4
c010630e:	00 00 00 
}
c0106311:	c9                   	leave  
c0106312:	c3                   	ret    

c0106313 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0106313:	55                   	push   %ebp
c0106314:	89 e5                	mov    %esp,%ebp
c0106316:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0106319:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010631d:	75 24                	jne    c0106343 <default_init_memmap+0x30>
c010631f:	c7 44 24 0c a0 6d 11 	movl   $0xc0116da0,0xc(%esp)
c0106326:	c0 
c0106327:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c010632e:	c0 
c010632f:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0106336:	00 
c0106337:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c010633e:	e8 b0 a1 ff ff       	call   c01004f3 <__panic>
    struct Page *p = base;
c0106343:	8b 45 08             	mov    0x8(%ebp),%eax
c0106346:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106349:	eb 7d                	jmp    c01063c8 <default_init_memmap+0xb5>
        assert(PageReserved(p));
c010634b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010634e:	83 c0 04             	add    $0x4,%eax
c0106351:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0106358:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010635b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010635e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106361:	0f a3 10             	bt     %edx,(%eax)
c0106364:	19 c0                	sbb    %eax,%eax
c0106366:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0106369:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010636d:	0f 95 c0             	setne  %al
c0106370:	0f b6 c0             	movzbl %al,%eax
c0106373:	85 c0                	test   %eax,%eax
c0106375:	75 24                	jne    c010639b <default_init_memmap+0x88>
c0106377:	c7 44 24 0c d1 6d 11 	movl   $0xc0116dd1,0xc(%esp)
c010637e:	c0 
c010637f:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106386:	c0 
c0106387:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010638e:	00 
c010638f:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106396:	e8 58 a1 ff ff       	call   c01004f3 <__panic>
        p->flags = p->property = 0;
c010639b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010639e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01063a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063a8:	8b 50 08             	mov    0x8(%eax),%edx
c01063ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063ae:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01063b1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01063b8:	00 
c01063b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063bc:	89 04 24             	mov    %eax,(%esp)
c01063bf:	e8 15 ff ff ff       	call   c01062d9 <set_page_ref>
    for (; p != base + n; p ++) {
c01063c4:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c01063c8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01063cb:	89 d0                	mov    %edx,%eax
c01063cd:	c1 e0 03             	shl    $0x3,%eax
c01063d0:	01 d0                	add    %edx,%eax
c01063d2:	c1 e0 02             	shl    $0x2,%eax
c01063d5:	89 c2                	mov    %eax,%edx
c01063d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01063da:	01 d0                	add    %edx,%eax
c01063dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01063df:	0f 85 66 ff ff ff    	jne    c010634b <default_init_memmap+0x38>
    }
    base->property = n;
c01063e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01063e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01063eb:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01063ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01063f1:	83 c0 04             	add    $0x4,%eax
c01063f4:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01063fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01063fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106401:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106404:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0106407:	8b 15 f4 61 15 c0    	mov    0xc01561f4,%edx
c010640d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106410:	01 d0                	add    %edx,%eax
c0106412:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4
    list_add_before(&free_list, &(base->page_link));
c0106417:	8b 45 08             	mov    0x8(%ebp),%eax
c010641a:	83 c0 10             	add    $0x10,%eax
c010641d:	c7 45 dc ec 61 15 c0 	movl   $0xc01561ec,-0x24(%ebp)
c0106424:	89 45 d8             	mov    %eax,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c0106427:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010642a:	8b 00                	mov    (%eax),%eax
c010642c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010642f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106432:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106435:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106438:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c010643b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010643e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106441:	89 10                	mov    %edx,(%eax)
c0106443:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106446:	8b 10                	mov    (%eax),%edx
c0106448:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010644b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010644e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106451:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106454:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106457:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010645a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010645d:	89 10                	mov    %edx,(%eax)
}
c010645f:	c9                   	leave  
c0106460:	c3                   	ret    

c0106461 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0106461:	55                   	push   %ebp
c0106462:	89 e5                	mov    %esp,%ebp
c0106464:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0106467:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010646b:	75 24                	jne    c0106491 <default_alloc_pages+0x30>
c010646d:	c7 44 24 0c a0 6d 11 	movl   $0xc0116da0,0xc(%esp)
c0106474:	c0 
c0106475:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c010647c:	c0 
c010647d:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c0106484:	00 
c0106485:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c010648c:	e8 62 a0 ff ff       	call   c01004f3 <__panic>
    if (n > nr_free) {
c0106491:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0106496:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106499:	73 0a                	jae    c01064a5 <default_alloc_pages+0x44>
        return NULL;
c010649b:	b8 00 00 00 00       	mov    $0x0,%eax
c01064a0:	e9 3d 01 00 00       	jmp    c01065e2 <default_alloc_pages+0x181>
    }
    struct Page *page = NULL;
c01064a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01064ac:	c7 45 f0 ec 61 15 c0 	movl   $0xc01561ec,-0x10(%ebp)
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c01064b3:	eb 1c                	jmp    c01064d1 <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c01064b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064b8:	83 e8 10             	sub    $0x10,%eax
c01064bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c01064be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064c1:	8b 40 08             	mov    0x8(%eax),%eax
c01064c4:	3b 45 08             	cmp    0x8(%ebp),%eax
c01064c7:	72 08                	jb     c01064d1 <default_alloc_pages+0x70>
            page = p;
c01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c01064cf:	eb 18                	jmp    c01064e9 <default_alloc_pages+0x88>
c01064d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c01064d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064da:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c01064dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064e0:	81 7d f0 ec 61 15 c0 	cmpl   $0xc01561ec,-0x10(%ebp)
c01064e7:	75 cc                	jne    c01064b5 <default_alloc_pages+0x54>
        }
    }
    if (page != NULL) {
c01064e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01064ed:	0f 84 ec 00 00 00    	je     c01065df <default_alloc_pages+0x17e>
        if (page->property > n) {
c01064f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064f6:	8b 40 08             	mov    0x8(%eax),%eax
c01064f9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01064fc:	0f 86 8c 00 00 00    	jbe    c010658e <default_alloc_pages+0x12d>
            struct Page *p = page + n;
c0106502:	8b 55 08             	mov    0x8(%ebp),%edx
c0106505:	89 d0                	mov    %edx,%eax
c0106507:	c1 e0 03             	shl    $0x3,%eax
c010650a:	01 d0                	add    %edx,%eax
c010650c:	c1 e0 02             	shl    $0x2,%eax
c010650f:	89 c2                	mov    %eax,%edx
c0106511:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106514:	01 d0                	add    %edx,%eax
c0106516:	89 45 e8             	mov    %eax,-0x18(%ebp)
            p->property = page->property - n;
c0106519:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010651c:	8b 40 08             	mov    0x8(%eax),%eax
c010651f:	2b 45 08             	sub    0x8(%ebp),%eax
c0106522:	89 c2                	mov    %eax,%edx
c0106524:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106527:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c010652a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010652d:	83 c0 04             	add    $0x4,%eax
c0106530:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0106537:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010653a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010653d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106540:	0f ab 10             	bts    %edx,(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c0106543:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106546:	83 c0 10             	add    $0x10,%eax
c0106549:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010654c:	83 c2 10             	add    $0x10,%edx
c010654f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0106552:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c0106555:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106558:	8b 40 04             	mov    0x4(%eax),%eax
c010655b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010655e:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0106561:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106564:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106567:	89 45 c8             	mov    %eax,-0x38(%ebp)
    prev->next = next->prev = elm;
c010656a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010656d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106570:	89 10                	mov    %edx,(%eax)
c0106572:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106575:	8b 10                	mov    (%eax),%edx
c0106577:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010657a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010657d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106580:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106583:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106586:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106589:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010658c:	89 10                	mov    %edx,(%eax)
        }
        list_del(&(page->page_link));
c010658e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106591:	83 c0 10             	add    $0x10,%eax
c0106594:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    __list_del(listelm->prev, listelm->next);
c0106597:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010659a:	8b 40 04             	mov    0x4(%eax),%eax
c010659d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01065a0:	8b 12                	mov    (%edx),%edx
c01065a2:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01065a5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    prev->next = next;
c01065a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01065ab:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01065ae:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01065b1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01065b4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01065b7:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c01065b9:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c01065be:	2b 45 08             	sub    0x8(%ebp),%eax
c01065c1:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4
        ClearPageProperty(page);
c01065c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065c9:	83 c0 04             	add    $0x4,%eax
c01065cc:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c01065d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01065d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01065d9:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01065dc:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01065df:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01065e2:	c9                   	leave  
c01065e3:	c3                   	ret    

c01065e4 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01065e4:	55                   	push   %ebp
c01065e5:	89 e5                	mov    %esp,%ebp
c01065e7:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c01065ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01065f1:	75 24                	jne    c0106617 <default_free_pages+0x33>
c01065f3:	c7 44 24 0c a0 6d 11 	movl   $0xc0116da0,0xc(%esp)
c01065fa:	c0 
c01065fb:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106602:	c0 
c0106603:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010660a:	00 
c010660b:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106612:	e8 dc 9e ff ff       	call   c01004f3 <__panic>
    struct Page *p = base;
c0106617:	8b 45 08             	mov    0x8(%ebp),%eax
c010661a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010661d:	e9 9d 00 00 00       	jmp    c01066bf <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0106622:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106625:	83 c0 04             	add    $0x4,%eax
c0106628:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010662f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106632:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106635:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106638:	0f a3 10             	bt     %edx,(%eax)
c010663b:	19 c0                	sbb    %eax,%eax
c010663d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0106640:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106644:	0f 95 c0             	setne  %al
c0106647:	0f b6 c0             	movzbl %al,%eax
c010664a:	85 c0                	test   %eax,%eax
c010664c:	75 2c                	jne    c010667a <default_free_pages+0x96>
c010664e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106651:	83 c0 04             	add    $0x4,%eax
c0106654:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010665b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010665e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106661:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106664:	0f a3 10             	bt     %edx,(%eax)
c0106667:	19 c0                	sbb    %eax,%eax
c0106669:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c010666c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0106670:	0f 95 c0             	setne  %al
c0106673:	0f b6 c0             	movzbl %al,%eax
c0106676:	85 c0                	test   %eax,%eax
c0106678:	74 24                	je     c010669e <default_free_pages+0xba>
c010667a:	c7 44 24 0c e4 6d 11 	movl   $0xc0116de4,0xc(%esp)
c0106681:	c0 
c0106682:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106689:	c0 
c010668a:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
c0106691:	00 
c0106692:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106699:	e8 55 9e ff ff       	call   c01004f3 <__panic>
        p->flags = 0;
c010669e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01066a8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01066af:	00 
c01066b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066b3:	89 04 24             	mov    %eax,(%esp)
c01066b6:	e8 1e fc ff ff       	call   c01062d9 <set_page_ref>
    for (; p != base + n; p ++) {
c01066bb:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c01066bf:	8b 55 0c             	mov    0xc(%ebp),%edx
c01066c2:	89 d0                	mov    %edx,%eax
c01066c4:	c1 e0 03             	shl    $0x3,%eax
c01066c7:	01 d0                	add    %edx,%eax
c01066c9:	c1 e0 02             	shl    $0x2,%eax
c01066cc:	89 c2                	mov    %eax,%edx
c01066ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01066d1:	01 d0                	add    %edx,%eax
c01066d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01066d6:	0f 85 46 ff ff ff    	jne    c0106622 <default_free_pages+0x3e>
    }
    base->property = n;
c01066dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01066df:	8b 55 0c             	mov    0xc(%ebp),%edx
c01066e2:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01066e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01066e8:	83 c0 04             	add    $0x4,%eax
c01066eb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01066f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01066f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01066f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01066fb:	0f ab 10             	bts    %edx,(%eax)
c01066fe:	c7 45 cc ec 61 15 c0 	movl   $0xc01561ec,-0x34(%ebp)
    return listelm->next;
c0106705:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106708:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c010670b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010670e:	e9 08 01 00 00       	jmp    c010681b <default_free_pages+0x237>
        p = le2page(le, page_link);
c0106713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106716:	83 e8 10             	sub    $0x10,%eax
c0106719:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010671c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010671f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106722:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106725:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106728:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // TODO: optimize
        if (base + base->property == p) {
c010672b:	8b 45 08             	mov    0x8(%ebp),%eax
c010672e:	8b 50 08             	mov    0x8(%eax),%edx
c0106731:	89 d0                	mov    %edx,%eax
c0106733:	c1 e0 03             	shl    $0x3,%eax
c0106736:	01 d0                	add    %edx,%eax
c0106738:	c1 e0 02             	shl    $0x2,%eax
c010673b:	89 c2                	mov    %eax,%edx
c010673d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106740:	01 d0                	add    %edx,%eax
c0106742:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106745:	75 5a                	jne    c01067a1 <default_free_pages+0x1bd>
            base->property += p->property;
c0106747:	8b 45 08             	mov    0x8(%ebp),%eax
c010674a:	8b 50 08             	mov    0x8(%eax),%edx
c010674d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106750:	8b 40 08             	mov    0x8(%eax),%eax
c0106753:	01 c2                	add    %eax,%edx
c0106755:	8b 45 08             	mov    0x8(%ebp),%eax
c0106758:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c010675b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010675e:	83 c0 04             	add    $0x4,%eax
c0106761:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0106768:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010676b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010676e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0106771:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106777:	83 c0 10             	add    $0x10,%eax
c010677a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    __list_del(listelm->prev, listelm->next);
c010677d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106780:	8b 40 04             	mov    0x4(%eax),%eax
c0106783:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106786:	8b 12                	mov    (%edx),%edx
c0106788:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010678b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    prev->next = next;
c010678e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106791:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106794:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106797:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010679a:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010679d:	89 10                	mov    %edx,(%eax)
c010679f:	eb 7a                	jmp    c010681b <default_free_pages+0x237>
        }
        else if (p + p->property == base) {
c01067a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067a4:	8b 50 08             	mov    0x8(%eax),%edx
c01067a7:	89 d0                	mov    %edx,%eax
c01067a9:	c1 e0 03             	shl    $0x3,%eax
c01067ac:	01 d0                	add    %edx,%eax
c01067ae:	c1 e0 02             	shl    $0x2,%eax
c01067b1:	89 c2                	mov    %eax,%edx
c01067b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067b6:	01 d0                	add    %edx,%eax
c01067b8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01067bb:	75 5e                	jne    c010681b <default_free_pages+0x237>
            p->property += base->property;
c01067bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067c0:	8b 50 08             	mov    0x8(%eax),%edx
c01067c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01067c6:	8b 40 08             	mov    0x8(%eax),%eax
c01067c9:	01 c2                	add    %eax,%edx
c01067cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ce:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c01067d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01067d4:	83 c0 04             	add    $0x4,%eax
c01067d7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c01067de:	89 45 ac             	mov    %eax,-0x54(%ebp)
c01067e1:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01067e4:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01067e7:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c01067ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ed:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c01067f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067f3:	83 c0 10             	add    $0x10,%eax
c01067f6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    __list_del(listelm->prev, listelm->next);
c01067f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01067fc:	8b 40 04             	mov    0x4(%eax),%eax
c01067ff:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106802:	8b 12                	mov    (%edx),%edx
c0106804:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0106807:	89 45 a0             	mov    %eax,-0x60(%ebp)
    prev->next = next;
c010680a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010680d:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0106810:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106813:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106816:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106819:	89 10                	mov    %edx,(%eax)
    while (le != &free_list) {
c010681b:	81 7d f0 ec 61 15 c0 	cmpl   $0xc01561ec,-0x10(%ebp)
c0106822:	0f 85 eb fe ff ff    	jne    c0106713 <default_free_pages+0x12f>
        }
    }
    nr_free += n;
c0106828:	8b 15 f4 61 15 c0    	mov    0xc01561f4,%edx
c010682e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106831:	01 d0                	add    %edx,%eax
c0106833:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4
c0106838:	c7 45 9c ec 61 15 c0 	movl   $0xc01561ec,-0x64(%ebp)
    return listelm->next;
c010683f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106842:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c0106845:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106848:	eb 76                	jmp    c01068c0 <default_free_pages+0x2dc>
        p = le2page(le, page_link);
c010684a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010684d:	83 e8 10             	sub    $0x10,%eax
c0106850:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c0106853:	8b 45 08             	mov    0x8(%ebp),%eax
c0106856:	8b 50 08             	mov    0x8(%eax),%edx
c0106859:	89 d0                	mov    %edx,%eax
c010685b:	c1 e0 03             	shl    $0x3,%eax
c010685e:	01 d0                	add    %edx,%eax
c0106860:	c1 e0 02             	shl    $0x2,%eax
c0106863:	89 c2                	mov    %eax,%edx
c0106865:	8b 45 08             	mov    0x8(%ebp),%eax
c0106868:	01 d0                	add    %edx,%eax
c010686a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010686d:	77 42                	ja     c01068b1 <default_free_pages+0x2cd>
            assert(base + base->property != p);
c010686f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106872:	8b 50 08             	mov    0x8(%eax),%edx
c0106875:	89 d0                	mov    %edx,%eax
c0106877:	c1 e0 03             	shl    $0x3,%eax
c010687a:	01 d0                	add    %edx,%eax
c010687c:	c1 e0 02             	shl    $0x2,%eax
c010687f:	89 c2                	mov    %eax,%edx
c0106881:	8b 45 08             	mov    0x8(%ebp),%eax
c0106884:	01 d0                	add    %edx,%eax
c0106886:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106889:	75 24                	jne    c01068af <default_free_pages+0x2cb>
c010688b:	c7 44 24 0c 09 6e 11 	movl   $0xc0116e09,0xc(%esp)
c0106892:	c0 
c0106893:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c010689a:	c0 
c010689b:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c01068a2:	00 
c01068a3:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01068aa:	e8 44 9c ff ff       	call   c01004f3 <__panic>
            break;
c01068af:	eb 18                	jmp    c01068c9 <default_free_pages+0x2e5>
c01068b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b4:	89 45 98             	mov    %eax,-0x68(%ebp)
c01068b7:	8b 45 98             	mov    -0x68(%ebp),%eax
c01068ba:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c01068bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01068c0:	81 7d f0 ec 61 15 c0 	cmpl   $0xc01561ec,-0x10(%ebp)
c01068c7:	75 81                	jne    c010684a <default_free_pages+0x266>
    }
    list_add_before(le, &(base->page_link));
c01068c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01068cc:	8d 50 10             	lea    0x10(%eax),%edx
c01068cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068d2:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01068d5:	89 55 90             	mov    %edx,-0x70(%ebp)
    __list_add(elm, listelm->prev, listelm);
c01068d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01068db:	8b 00                	mov    (%eax),%eax
c01068dd:	8b 55 90             	mov    -0x70(%ebp),%edx
c01068e0:	89 55 8c             	mov    %edx,-0x74(%ebp)
c01068e3:	89 45 88             	mov    %eax,-0x78(%ebp)
c01068e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01068e9:	89 45 84             	mov    %eax,-0x7c(%ebp)
    prev->next = next->prev = elm;
c01068ec:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01068ef:	8b 55 8c             	mov    -0x74(%ebp),%edx
c01068f2:	89 10                	mov    %edx,(%eax)
c01068f4:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01068f7:	8b 10                	mov    (%eax),%edx
c01068f9:	8b 45 88             	mov    -0x78(%ebp),%eax
c01068fc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01068ff:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106902:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106905:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106908:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010690b:	8b 55 88             	mov    -0x78(%ebp),%edx
c010690e:	89 10                	mov    %edx,(%eax)
}
c0106910:	c9                   	leave  
c0106911:	c3                   	ret    

c0106912 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0106912:	55                   	push   %ebp
c0106913:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0106915:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
}
c010691a:	5d                   	pop    %ebp
c010691b:	c3                   	ret    

c010691c <basic_check>:

static void
basic_check(void) {
c010691c:	55                   	push   %ebp
c010691d:	89 e5                	mov    %esp,%ebp
c010691f:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106922:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106929:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010692c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010692f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106932:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106935:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010693c:	e8 9d 0e 00 00       	call   c01077de <alloc_pages>
c0106941:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106944:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106948:	75 24                	jne    c010696e <basic_check+0x52>
c010694a:	c7 44 24 0c 24 6e 11 	movl   $0xc0116e24,0xc(%esp)
c0106951:	c0 
c0106952:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106959:	c0 
c010695a:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0106961:	00 
c0106962:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106969:	e8 85 9b ff ff       	call   c01004f3 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010696e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106975:	e8 64 0e 00 00       	call   c01077de <alloc_pages>
c010697a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010697d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106981:	75 24                	jne    c01069a7 <basic_check+0x8b>
c0106983:	c7 44 24 0c 40 6e 11 	movl   $0xc0116e40,0xc(%esp)
c010698a:	c0 
c010698b:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106992:	c0 
c0106993:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010699a:	00 
c010699b:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01069a2:	e8 4c 9b ff ff       	call   c01004f3 <__panic>
    assert((p2 = alloc_page()) != NULL);
c01069a7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01069ae:	e8 2b 0e 00 00       	call   c01077de <alloc_pages>
c01069b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01069b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01069ba:	75 24                	jne    c01069e0 <basic_check+0xc4>
c01069bc:	c7 44 24 0c 5c 6e 11 	movl   $0xc0116e5c,0xc(%esp)
c01069c3:	c0 
c01069c4:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01069cb:	c0 
c01069cc:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c01069d3:	00 
c01069d4:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01069db:	e8 13 9b ff ff       	call   c01004f3 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c01069e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01069e6:	74 10                	je     c01069f8 <basic_check+0xdc>
c01069e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01069ee:	74 08                	je     c01069f8 <basic_check+0xdc>
c01069f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01069f6:	75 24                	jne    c0106a1c <basic_check+0x100>
c01069f8:	c7 44 24 0c 78 6e 11 	movl   $0xc0116e78,0xc(%esp)
c01069ff:	c0 
c0106a00:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106a07:	c0 
c0106a08:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0106a0f:	00 
c0106a10:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106a17:	e8 d7 9a ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a1f:	89 04 24             	mov    %eax,(%esp)
c0106a22:	e8 a8 f8 ff ff       	call   c01062cf <page_ref>
c0106a27:	85 c0                	test   %eax,%eax
c0106a29:	75 1e                	jne    c0106a49 <basic_check+0x12d>
c0106a2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a2e:	89 04 24             	mov    %eax,(%esp)
c0106a31:	e8 99 f8 ff ff       	call   c01062cf <page_ref>
c0106a36:	85 c0                	test   %eax,%eax
c0106a38:	75 0f                	jne    c0106a49 <basic_check+0x12d>
c0106a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a3d:	89 04 24             	mov    %eax,(%esp)
c0106a40:	e8 8a f8 ff ff       	call   c01062cf <page_ref>
c0106a45:	85 c0                	test   %eax,%eax
c0106a47:	74 24                	je     c0106a6d <basic_check+0x151>
c0106a49:	c7 44 24 0c 9c 6e 11 	movl   $0xc0116e9c,0xc(%esp)
c0106a50:	c0 
c0106a51:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106a58:	c0 
c0106a59:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0106a60:	00 
c0106a61:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106a68:	e8 86 9a ff ff       	call   c01004f3 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106a6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a70:	89 04 24             	mov    %eax,(%esp)
c0106a73:	e8 41 f8 ff ff       	call   c01062b9 <page2pa>
c0106a78:	8b 15 80 2f 15 c0    	mov    0xc0152f80,%edx
c0106a7e:	c1 e2 0c             	shl    $0xc,%edx
c0106a81:	39 d0                	cmp    %edx,%eax
c0106a83:	72 24                	jb     c0106aa9 <basic_check+0x18d>
c0106a85:	c7 44 24 0c d8 6e 11 	movl   $0xc0116ed8,0xc(%esp)
c0106a8c:	c0 
c0106a8d:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106a94:	c0 
c0106a95:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0106a9c:	00 
c0106a9d:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106aa4:	e8 4a 9a ff ff       	call   c01004f3 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0106aa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aac:	89 04 24             	mov    %eax,(%esp)
c0106aaf:	e8 05 f8 ff ff       	call   c01062b9 <page2pa>
c0106ab4:	8b 15 80 2f 15 c0    	mov    0xc0152f80,%edx
c0106aba:	c1 e2 0c             	shl    $0xc,%edx
c0106abd:	39 d0                	cmp    %edx,%eax
c0106abf:	72 24                	jb     c0106ae5 <basic_check+0x1c9>
c0106ac1:	c7 44 24 0c f5 6e 11 	movl   $0xc0116ef5,0xc(%esp)
c0106ac8:	c0 
c0106ac9:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106ad0:	c0 
c0106ad1:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0106ad8:	00 
c0106ad9:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106ae0:	e8 0e 9a ff ff       	call   c01004f3 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ae8:	89 04 24             	mov    %eax,(%esp)
c0106aeb:	e8 c9 f7 ff ff       	call   c01062b9 <page2pa>
c0106af0:	8b 15 80 2f 15 c0    	mov    0xc0152f80,%edx
c0106af6:	c1 e2 0c             	shl    $0xc,%edx
c0106af9:	39 d0                	cmp    %edx,%eax
c0106afb:	72 24                	jb     c0106b21 <basic_check+0x205>
c0106afd:	c7 44 24 0c 12 6f 11 	movl   $0xc0116f12,0xc(%esp)
c0106b04:	c0 
c0106b05:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106b0c:	c0 
c0106b0d:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0106b14:	00 
c0106b15:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106b1c:	e8 d2 99 ff ff       	call   c01004f3 <__panic>

    list_entry_t free_list_store = free_list;
c0106b21:	a1 ec 61 15 c0       	mov    0xc01561ec,%eax
c0106b26:	8b 15 f0 61 15 c0    	mov    0xc01561f0,%edx
c0106b2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106b2f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106b32:	c7 45 e0 ec 61 15 c0 	movl   $0xc01561ec,-0x20(%ebp)
    elm->prev = elm->next = elm;
c0106b39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b3c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b3f:	89 50 04             	mov    %edx,0x4(%eax)
c0106b42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b45:	8b 50 04             	mov    0x4(%eax),%edx
c0106b48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b4b:	89 10                	mov    %edx,(%eax)
c0106b4d:	c7 45 dc ec 61 15 c0 	movl   $0xc01561ec,-0x24(%ebp)
    return list->next == list;
c0106b54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b57:	8b 40 04             	mov    0x4(%eax),%eax
c0106b5a:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106b5d:	0f 94 c0             	sete   %al
c0106b60:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106b63:	85 c0                	test   %eax,%eax
c0106b65:	75 24                	jne    c0106b8b <basic_check+0x26f>
c0106b67:	c7 44 24 0c 2f 6f 11 	movl   $0xc0116f2f,0xc(%esp)
c0106b6e:	c0 
c0106b6f:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106b76:	c0 
c0106b77:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c0106b7e:	00 
c0106b7f:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106b86:	e8 68 99 ff ff       	call   c01004f3 <__panic>

    unsigned int nr_free_store = nr_free;
c0106b8b:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0106b90:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0106b93:	c7 05 f4 61 15 c0 00 	movl   $0x0,0xc01561f4
c0106b9a:	00 00 00 

    assert(alloc_page() == NULL);
c0106b9d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106ba4:	e8 35 0c 00 00       	call   c01077de <alloc_pages>
c0106ba9:	85 c0                	test   %eax,%eax
c0106bab:	74 24                	je     c0106bd1 <basic_check+0x2b5>
c0106bad:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c0106bb4:	c0 
c0106bb5:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106bbc:	c0 
c0106bbd:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0106bc4:	00 
c0106bc5:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106bcc:	e8 22 99 ff ff       	call   c01004f3 <__panic>

    free_page(p0);
c0106bd1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106bd8:	00 
c0106bd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106bdc:	89 04 24             	mov    %eax,(%esp)
c0106bdf:	e8 65 0c 00 00       	call   c0107849 <free_pages>
    free_page(p1);
c0106be4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106beb:	00 
c0106bec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bef:	89 04 24             	mov    %eax,(%esp)
c0106bf2:	e8 52 0c 00 00       	call   c0107849 <free_pages>
    free_page(p2);
c0106bf7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106bfe:	00 
c0106bff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c02:	89 04 24             	mov    %eax,(%esp)
c0106c05:	e8 3f 0c 00 00       	call   c0107849 <free_pages>
    assert(nr_free == 3);
c0106c0a:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0106c0f:	83 f8 03             	cmp    $0x3,%eax
c0106c12:	74 24                	je     c0106c38 <basic_check+0x31c>
c0106c14:	c7 44 24 0c 5b 6f 11 	movl   $0xc0116f5b,0xc(%esp)
c0106c1b:	c0 
c0106c1c:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106c23:	c0 
c0106c24:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c0106c2b:	00 
c0106c2c:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106c33:	e8 bb 98 ff ff       	call   c01004f3 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106c38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106c3f:	e8 9a 0b 00 00       	call   c01077de <alloc_pages>
c0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106c4b:	75 24                	jne    c0106c71 <basic_check+0x355>
c0106c4d:	c7 44 24 0c 24 6e 11 	movl   $0xc0116e24,0xc(%esp)
c0106c54:	c0 
c0106c55:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106c5c:	c0 
c0106c5d:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0106c64:	00 
c0106c65:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106c6c:	e8 82 98 ff ff       	call   c01004f3 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106c71:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106c78:	e8 61 0b 00 00       	call   c01077de <alloc_pages>
c0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106c80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106c84:	75 24                	jne    c0106caa <basic_check+0x38e>
c0106c86:	c7 44 24 0c 40 6e 11 	movl   $0xc0116e40,0xc(%esp)
c0106c8d:	c0 
c0106c8e:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106c95:	c0 
c0106c96:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0106c9d:	00 
c0106c9e:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106ca5:	e8 49 98 ff ff       	call   c01004f3 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106caa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106cb1:	e8 28 0b 00 00       	call   c01077de <alloc_pages>
c0106cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106cb9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106cbd:	75 24                	jne    c0106ce3 <basic_check+0x3c7>
c0106cbf:	c7 44 24 0c 5c 6e 11 	movl   $0xc0116e5c,0xc(%esp)
c0106cc6:	c0 
c0106cc7:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106cce:	c0 
c0106ccf:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c0106cd6:	00 
c0106cd7:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106cde:	e8 10 98 ff ff       	call   c01004f3 <__panic>

    assert(alloc_page() == NULL);
c0106ce3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106cea:	e8 ef 0a 00 00       	call   c01077de <alloc_pages>
c0106cef:	85 c0                	test   %eax,%eax
c0106cf1:	74 24                	je     c0106d17 <basic_check+0x3fb>
c0106cf3:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c0106cfa:	c0 
c0106cfb:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106d02:	c0 
c0106d03:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0106d0a:	00 
c0106d0b:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106d12:	e8 dc 97 ff ff       	call   c01004f3 <__panic>

    free_page(p0);
c0106d17:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d1e:	00 
c0106d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d22:	89 04 24             	mov    %eax,(%esp)
c0106d25:	e8 1f 0b 00 00       	call   c0107849 <free_pages>
c0106d2a:	c7 45 d8 ec 61 15 c0 	movl   $0xc01561ec,-0x28(%ebp)
c0106d31:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106d34:	8b 40 04             	mov    0x4(%eax),%eax
c0106d37:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106d3a:	0f 94 c0             	sete   %al
c0106d3d:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106d40:	85 c0                	test   %eax,%eax
c0106d42:	74 24                	je     c0106d68 <basic_check+0x44c>
c0106d44:	c7 44 24 0c 68 6f 11 	movl   $0xc0116f68,0xc(%esp)
c0106d4b:	c0 
c0106d4c:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106d53:	c0 
c0106d54:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0106d5b:	00 
c0106d5c:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106d63:	e8 8b 97 ff ff       	call   c01004f3 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106d68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106d6f:	e8 6a 0a 00 00       	call   c01077de <alloc_pages>
c0106d74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d7a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106d7d:	74 24                	je     c0106da3 <basic_check+0x487>
c0106d7f:	c7 44 24 0c 80 6f 11 	movl   $0xc0116f80,0xc(%esp)
c0106d86:	c0 
c0106d87:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106d8e:	c0 
c0106d8f:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c0106d96:	00 
c0106d97:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106d9e:	e8 50 97 ff ff       	call   c01004f3 <__panic>
    assert(alloc_page() == NULL);
c0106da3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106daa:	e8 2f 0a 00 00       	call   c01077de <alloc_pages>
c0106daf:	85 c0                	test   %eax,%eax
c0106db1:	74 24                	je     c0106dd7 <basic_check+0x4bb>
c0106db3:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c0106dba:	c0 
c0106dbb:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106dc2:	c0 
c0106dc3:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c0106dca:	00 
c0106dcb:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106dd2:	e8 1c 97 ff ff       	call   c01004f3 <__panic>

    assert(nr_free == 0);
c0106dd7:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0106ddc:	85 c0                	test   %eax,%eax
c0106dde:	74 24                	je     c0106e04 <basic_check+0x4e8>
c0106de0:	c7 44 24 0c 99 6f 11 	movl   $0xc0116f99,0xc(%esp)
c0106de7:	c0 
c0106de8:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106def:	c0 
c0106df0:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c0106df7:	00 
c0106df8:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106dff:	e8 ef 96 ff ff       	call   c01004f3 <__panic>
    free_list = free_list_store;
c0106e04:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106e07:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e0a:	a3 ec 61 15 c0       	mov    %eax,0xc01561ec
c0106e0f:	89 15 f0 61 15 c0    	mov    %edx,0xc01561f0
    nr_free = nr_free_store;
c0106e15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e18:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4

    free_page(p);
c0106e1d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e24:	00 
c0106e25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e28:	89 04 24             	mov    %eax,(%esp)
c0106e2b:	e8 19 0a 00 00       	call   c0107849 <free_pages>
    free_page(p1);
c0106e30:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e37:	00 
c0106e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e3b:	89 04 24             	mov    %eax,(%esp)
c0106e3e:	e8 06 0a 00 00       	call   c0107849 <free_pages>
    free_page(p2);
c0106e43:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e4a:	00 
c0106e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e4e:	89 04 24             	mov    %eax,(%esp)
c0106e51:	e8 f3 09 00 00       	call   c0107849 <free_pages>
}
c0106e56:	c9                   	leave  
c0106e57:	c3                   	ret    

c0106e58 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106e58:	55                   	push   %ebp
c0106e59:	89 e5                	mov    %esp,%ebp
c0106e5b:	53                   	push   %ebx
c0106e5c:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0106e62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106e69:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106e70:	c7 45 ec ec 61 15 c0 	movl   $0xc01561ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106e77:	eb 6b                	jmp    c0106ee4 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0106e79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e7c:	83 e8 10             	sub    $0x10,%eax
c0106e7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0106e82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e85:	83 c0 04             	add    $0x4,%eax
c0106e88:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0106e8f:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106e92:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106e95:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106e98:	0f a3 10             	bt     %edx,(%eax)
c0106e9b:	19 c0                	sbb    %eax,%eax
c0106e9d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0106ea0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0106ea4:	0f 95 c0             	setne  %al
c0106ea7:	0f b6 c0             	movzbl %al,%eax
c0106eaa:	85 c0                	test   %eax,%eax
c0106eac:	75 24                	jne    c0106ed2 <default_check+0x7a>
c0106eae:	c7 44 24 0c a6 6f 11 	movl   $0xc0116fa6,0xc(%esp)
c0106eb5:	c0 
c0106eb6:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106ebd:	c0 
c0106ebe:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0106ec5:	00 
c0106ec6:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106ecd:	e8 21 96 ff ff       	call   c01004f3 <__panic>
        count ++, total += p->property;
c0106ed2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106ed6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106ed9:	8b 50 08             	mov    0x8(%eax),%edx
c0106edc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106edf:	01 d0                	add    %edx,%eax
c0106ee1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106ee4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ee7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return listelm->next;
c0106eea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106eed:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0106ef0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ef3:	81 7d ec ec 61 15 c0 	cmpl   $0xc01561ec,-0x14(%ebp)
c0106efa:	0f 85 79 ff ff ff    	jne    c0106e79 <default_check+0x21>
    }
    assert(total == nr_free_pages());
c0106f00:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0106f03:	e8 73 09 00 00       	call   c010787b <nr_free_pages>
c0106f08:	39 c3                	cmp    %eax,%ebx
c0106f0a:	74 24                	je     c0106f30 <default_check+0xd8>
c0106f0c:	c7 44 24 0c b6 6f 11 	movl   $0xc0116fb6,0xc(%esp)
c0106f13:	c0 
c0106f14:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106f1b:	c0 
c0106f1c:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0106f23:	00 
c0106f24:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106f2b:	e8 c3 95 ff ff       	call   c01004f3 <__panic>

    basic_check();
c0106f30:	e8 e7 f9 ff ff       	call   c010691c <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106f35:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0106f3c:	e8 9d 08 00 00       	call   c01077de <alloc_pages>
c0106f41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0106f44:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106f48:	75 24                	jne    c0106f6e <default_check+0x116>
c0106f4a:	c7 44 24 0c cf 6f 11 	movl   $0xc0116fcf,0xc(%esp)
c0106f51:	c0 
c0106f52:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106f59:	c0 
c0106f5a:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c0106f61:	00 
c0106f62:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106f69:	e8 85 95 ff ff       	call   c01004f3 <__panic>
    assert(!PageProperty(p0));
c0106f6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f71:	83 c0 04             	add    $0x4,%eax
c0106f74:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0106f7b:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106f7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106f81:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106f84:	0f a3 10             	bt     %edx,(%eax)
c0106f87:	19 c0                	sbb    %eax,%eax
c0106f89:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106f8c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106f90:	0f 95 c0             	setne  %al
c0106f93:	0f b6 c0             	movzbl %al,%eax
c0106f96:	85 c0                	test   %eax,%eax
c0106f98:	74 24                	je     c0106fbe <default_check+0x166>
c0106f9a:	c7 44 24 0c da 6f 11 	movl   $0xc0116fda,0xc(%esp)
c0106fa1:	c0 
c0106fa2:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0106fa9:	c0 
c0106faa:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0106fb1:	00 
c0106fb2:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0106fb9:	e8 35 95 ff ff       	call   c01004f3 <__panic>

    list_entry_t free_list_store = free_list;
c0106fbe:	a1 ec 61 15 c0       	mov    0xc01561ec,%eax
c0106fc3:	8b 15 f0 61 15 c0    	mov    0xc01561f0,%edx
c0106fc9:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106fcc:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106fcf:	c7 45 b4 ec 61 15 c0 	movl   $0xc01561ec,-0x4c(%ebp)
    elm->prev = elm->next = elm;
c0106fd6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106fd9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106fdc:	89 50 04             	mov    %edx,0x4(%eax)
c0106fdf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106fe2:	8b 50 04             	mov    0x4(%eax),%edx
c0106fe5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106fe8:	89 10                	mov    %edx,(%eax)
c0106fea:	c7 45 b0 ec 61 15 c0 	movl   $0xc01561ec,-0x50(%ebp)
    return list->next == list;
c0106ff1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106ff4:	8b 40 04             	mov    0x4(%eax),%eax
c0106ff7:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0106ffa:	0f 94 c0             	sete   %al
c0106ffd:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0107000:	85 c0                	test   %eax,%eax
c0107002:	75 24                	jne    c0107028 <default_check+0x1d0>
c0107004:	c7 44 24 0c 2f 6f 11 	movl   $0xc0116f2f,0xc(%esp)
c010700b:	c0 
c010700c:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107013:	c0 
c0107014:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010701b:	00 
c010701c:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107023:	e8 cb 94 ff ff       	call   c01004f3 <__panic>
    assert(alloc_page() == NULL);
c0107028:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010702f:	e8 aa 07 00 00       	call   c01077de <alloc_pages>
c0107034:	85 c0                	test   %eax,%eax
c0107036:	74 24                	je     c010705c <default_check+0x204>
c0107038:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c010703f:	c0 
c0107040:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107047:	c0 
c0107048:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c010704f:	00 
c0107050:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107057:	e8 97 94 ff ff       	call   c01004f3 <__panic>

    unsigned int nr_free_store = nr_free;
c010705c:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c0107061:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0107064:	c7 05 f4 61 15 c0 00 	movl   $0x0,0xc01561f4
c010706b:	00 00 00 

    free_pages(p0 + 2, 3);
c010706e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107071:	83 c0 48             	add    $0x48,%eax
c0107074:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010707b:	00 
c010707c:	89 04 24             	mov    %eax,(%esp)
c010707f:	e8 c5 07 00 00       	call   c0107849 <free_pages>
    assert(alloc_pages(4) == NULL);
c0107084:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010708b:	e8 4e 07 00 00       	call   c01077de <alloc_pages>
c0107090:	85 c0                	test   %eax,%eax
c0107092:	74 24                	je     c01070b8 <default_check+0x260>
c0107094:	c7 44 24 0c ec 6f 11 	movl   $0xc0116fec,0xc(%esp)
c010709b:	c0 
c010709c:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01070a3:	c0 
c01070a4:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01070ab:	00 
c01070ac:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01070b3:	e8 3b 94 ff ff       	call   c01004f3 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01070b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070bb:	83 c0 48             	add    $0x48,%eax
c01070be:	83 c0 04             	add    $0x4,%eax
c01070c1:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01070c8:	89 45 a8             	mov    %eax,-0x58(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01070cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01070ce:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01070d1:	0f a3 10             	bt     %edx,(%eax)
c01070d4:	19 c0                	sbb    %eax,%eax
c01070d6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01070d9:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01070dd:	0f 95 c0             	setne  %al
c01070e0:	0f b6 c0             	movzbl %al,%eax
c01070e3:	85 c0                	test   %eax,%eax
c01070e5:	74 0e                	je     c01070f5 <default_check+0x29d>
c01070e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070ea:	83 c0 48             	add    $0x48,%eax
c01070ed:	8b 40 08             	mov    0x8(%eax),%eax
c01070f0:	83 f8 03             	cmp    $0x3,%eax
c01070f3:	74 24                	je     c0107119 <default_check+0x2c1>
c01070f5:	c7 44 24 0c 04 70 11 	movl   $0xc0117004,0xc(%esp)
c01070fc:	c0 
c01070fd:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107104:	c0 
c0107105:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010710c:	00 
c010710d:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107114:	e8 da 93 ff ff       	call   c01004f3 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0107119:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0107120:	e8 b9 06 00 00       	call   c01077de <alloc_pages>
c0107125:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107128:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010712c:	75 24                	jne    c0107152 <default_check+0x2fa>
c010712e:	c7 44 24 0c 30 70 11 	movl   $0xc0117030,0xc(%esp)
c0107135:	c0 
c0107136:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c010713d:	c0 
c010713e:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c0107145:	00 
c0107146:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c010714d:	e8 a1 93 ff ff       	call   c01004f3 <__panic>
    assert(alloc_page() == NULL);
c0107152:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107159:	e8 80 06 00 00       	call   c01077de <alloc_pages>
c010715e:	85 c0                	test   %eax,%eax
c0107160:	74 24                	je     c0107186 <default_check+0x32e>
c0107162:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c0107169:	c0 
c010716a:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107171:	c0 
c0107172:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0107179:	00 
c010717a:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107181:	e8 6d 93 ff ff       	call   c01004f3 <__panic>
    assert(p0 + 2 == p1);
c0107186:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107189:	83 c0 48             	add    $0x48,%eax
c010718c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010718f:	74 24                	je     c01071b5 <default_check+0x35d>
c0107191:	c7 44 24 0c 4e 70 11 	movl   $0xc011704e,0xc(%esp)
c0107198:	c0 
c0107199:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01071a0:	c0 
c01071a1:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01071a8:	00 
c01071a9:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01071b0:	e8 3e 93 ff ff       	call   c01004f3 <__panic>

    p2 = p0 + 1;
c01071b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071b8:	83 c0 24             	add    $0x24,%eax
c01071bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01071be:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01071c5:	00 
c01071c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071c9:	89 04 24             	mov    %eax,(%esp)
c01071cc:	e8 78 06 00 00       	call   c0107849 <free_pages>
    free_pages(p1, 3);
c01071d1:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01071d8:	00 
c01071d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071dc:	89 04 24             	mov    %eax,(%esp)
c01071df:	e8 65 06 00 00       	call   c0107849 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01071e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071e7:	83 c0 04             	add    $0x4,%eax
c01071ea:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01071f1:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01071f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01071f7:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01071fa:	0f a3 10             	bt     %edx,(%eax)
c01071fd:	19 c0                	sbb    %eax,%eax
c01071ff:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0107202:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0107206:	0f 95 c0             	setne  %al
c0107209:	0f b6 c0             	movzbl %al,%eax
c010720c:	85 c0                	test   %eax,%eax
c010720e:	74 0b                	je     c010721b <default_check+0x3c3>
c0107210:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107213:	8b 40 08             	mov    0x8(%eax),%eax
c0107216:	83 f8 01             	cmp    $0x1,%eax
c0107219:	74 24                	je     c010723f <default_check+0x3e7>
c010721b:	c7 44 24 0c 5c 70 11 	movl   $0xc011705c,0xc(%esp)
c0107222:	c0 
c0107223:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c010722a:	c0 
c010722b:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0107232:	00 
c0107233:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c010723a:	e8 b4 92 ff ff       	call   c01004f3 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010723f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107242:	83 c0 04             	add    $0x4,%eax
c0107245:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010724c:	89 45 90             	mov    %eax,-0x70(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010724f:	8b 45 90             	mov    -0x70(%ebp),%eax
c0107252:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107255:	0f a3 10             	bt     %edx,(%eax)
c0107258:	19 c0                	sbb    %eax,%eax
c010725a:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010725d:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0107261:	0f 95 c0             	setne  %al
c0107264:	0f b6 c0             	movzbl %al,%eax
c0107267:	85 c0                	test   %eax,%eax
c0107269:	74 0b                	je     c0107276 <default_check+0x41e>
c010726b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010726e:	8b 40 08             	mov    0x8(%eax),%eax
c0107271:	83 f8 03             	cmp    $0x3,%eax
c0107274:	74 24                	je     c010729a <default_check+0x442>
c0107276:	c7 44 24 0c 84 70 11 	movl   $0xc0117084,0xc(%esp)
c010727d:	c0 
c010727e:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107285:	c0 
c0107286:	c7 44 24 04 1f 01 00 	movl   $0x11f,0x4(%esp)
c010728d:	00 
c010728e:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107295:	e8 59 92 ff ff       	call   c01004f3 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010729a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01072a1:	e8 38 05 00 00       	call   c01077de <alloc_pages>
c01072a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01072a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01072ac:	83 e8 24             	sub    $0x24,%eax
c01072af:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01072b2:	74 24                	je     c01072d8 <default_check+0x480>
c01072b4:	c7 44 24 0c aa 70 11 	movl   $0xc01170aa,0xc(%esp)
c01072bb:	c0 
c01072bc:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01072c3:	c0 
c01072c4:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c01072cb:	00 
c01072cc:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01072d3:	e8 1b 92 ff ff       	call   c01004f3 <__panic>
    free_page(p0);
c01072d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01072df:	00 
c01072e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072e3:	89 04 24             	mov    %eax,(%esp)
c01072e6:	e8 5e 05 00 00       	call   c0107849 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01072eb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01072f2:	e8 e7 04 00 00       	call   c01077de <alloc_pages>
c01072f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01072fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01072fd:	83 c0 24             	add    $0x24,%eax
c0107300:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0107303:	74 24                	je     c0107329 <default_check+0x4d1>
c0107305:	c7 44 24 0c c8 70 11 	movl   $0xc01170c8,0xc(%esp)
c010730c:	c0 
c010730d:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107314:	c0 
c0107315:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c010731c:	00 
c010731d:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107324:	e8 ca 91 ff ff       	call   c01004f3 <__panic>

    free_pages(p0, 2);
c0107329:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0107330:	00 
c0107331:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107334:	89 04 24             	mov    %eax,(%esp)
c0107337:	e8 0d 05 00 00       	call   c0107849 <free_pages>
    free_page(p2);
c010733c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107343:	00 
c0107344:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107347:	89 04 24             	mov    %eax,(%esp)
c010734a:	e8 fa 04 00 00       	call   c0107849 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010734f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0107356:	e8 83 04 00 00       	call   c01077de <alloc_pages>
c010735b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010735e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107362:	75 24                	jne    c0107388 <default_check+0x530>
c0107364:	c7 44 24 0c e8 70 11 	movl   $0xc01170e8,0xc(%esp)
c010736b:	c0 
c010736c:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107373:	c0 
c0107374:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010737b:	00 
c010737c:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107383:	e8 6b 91 ff ff       	call   c01004f3 <__panic>
    assert(alloc_page() == NULL);
c0107388:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010738f:	e8 4a 04 00 00       	call   c01077de <alloc_pages>
c0107394:	85 c0                	test   %eax,%eax
c0107396:	74 24                	je     c01073bc <default_check+0x564>
c0107398:	c7 44 24 0c 46 6f 11 	movl   $0xc0116f46,0xc(%esp)
c010739f:	c0 
c01073a0:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01073a7:	c0 
c01073a8:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c01073af:	00 
c01073b0:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01073b7:	e8 37 91 ff ff       	call   c01004f3 <__panic>

    assert(nr_free == 0);
c01073bc:	a1 f4 61 15 c0       	mov    0xc01561f4,%eax
c01073c1:	85 c0                	test   %eax,%eax
c01073c3:	74 24                	je     c01073e9 <default_check+0x591>
c01073c5:	c7 44 24 0c 99 6f 11 	movl   $0xc0116f99,0xc(%esp)
c01073cc:	c0 
c01073cd:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c01073d4:	c0 
c01073d5:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c01073dc:	00 
c01073dd:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01073e4:	e8 0a 91 ff ff       	call   c01004f3 <__panic>
    nr_free = nr_free_store;
c01073e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073ec:	a3 f4 61 15 c0       	mov    %eax,0xc01561f4

    free_list = free_list_store;
c01073f1:	8b 45 80             	mov    -0x80(%ebp),%eax
c01073f4:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01073f7:	a3 ec 61 15 c0       	mov    %eax,0xc01561ec
c01073fc:	89 15 f0 61 15 c0    	mov    %edx,0xc01561f0
    free_pages(p0, 5);
c0107402:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0107409:	00 
c010740a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010740d:	89 04 24             	mov    %eax,(%esp)
c0107410:	e8 34 04 00 00       	call   c0107849 <free_pages>

    le = &free_list;
c0107415:	c7 45 ec ec 61 15 c0 	movl   $0xc01561ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010741c:	eb 1d                	jmp    c010743b <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010741e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107421:	83 e8 10             	sub    $0x10,%eax
c0107424:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0107427:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010742b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010742e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107431:	8b 40 08             	mov    0x8(%eax),%eax
c0107434:	29 c2                	sub    %eax,%edx
c0107436:	89 d0                	mov    %edx,%eax
c0107438:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010743b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010743e:	89 45 88             	mov    %eax,-0x78(%ebp)
    return listelm->next;
c0107441:	8b 45 88             	mov    -0x78(%ebp),%eax
c0107444:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0107447:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010744a:	81 7d ec ec 61 15 c0 	cmpl   $0xc01561ec,-0x14(%ebp)
c0107451:	75 cb                	jne    c010741e <default_check+0x5c6>
    }
    assert(count == 0);
c0107453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107457:	74 24                	je     c010747d <default_check+0x625>
c0107459:	c7 44 24 0c 06 71 11 	movl   $0xc0117106,0xc(%esp)
c0107460:	c0 
c0107461:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107468:	c0 
c0107469:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
c0107470:	00 
c0107471:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c0107478:	e8 76 90 ff ff       	call   c01004f3 <__panic>
    assert(total == 0);
c010747d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107481:	74 24                	je     c01074a7 <default_check+0x64f>
c0107483:	c7 44 24 0c 11 71 11 	movl   $0xc0117111,0xc(%esp)
c010748a:	c0 
c010748b:	c7 44 24 08 a6 6d 11 	movl   $0xc0116da6,0x8(%esp)
c0107492:	c0 
c0107493:	c7 44 24 04 37 01 00 	movl   $0x137,0x4(%esp)
c010749a:	00 
c010749b:	c7 04 24 bb 6d 11 c0 	movl   $0xc0116dbb,(%esp)
c01074a2:	e8 4c 90 ff ff       	call   c01004f3 <__panic>
}
c01074a7:	81 c4 94 00 00 00    	add    $0x94,%esp
c01074ad:	5b                   	pop    %ebx
c01074ae:	5d                   	pop    %ebp
c01074af:	c3                   	ret    

c01074b0 <page2ppn>:
page2ppn(struct Page *page) {
c01074b0:	55                   	push   %ebp
c01074b1:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01074b3:	8b 55 08             	mov    0x8(%ebp),%edx
c01074b6:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c01074bb:	29 c2                	sub    %eax,%edx
c01074bd:	89 d0                	mov    %edx,%eax
c01074bf:	c1 f8 02             	sar    $0x2,%eax
c01074c2:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01074c8:	5d                   	pop    %ebp
c01074c9:	c3                   	ret    

c01074ca <page2pa>:
page2pa(struct Page *page) {
c01074ca:	55                   	push   %ebp
c01074cb:	89 e5                	mov    %esp,%ebp
c01074cd:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01074d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01074d3:	89 04 24             	mov    %eax,(%esp)
c01074d6:	e8 d5 ff ff ff       	call   c01074b0 <page2ppn>
c01074db:	c1 e0 0c             	shl    $0xc,%eax
}
c01074de:	c9                   	leave  
c01074df:	c3                   	ret    

c01074e0 <pa2page>:
pa2page(uintptr_t pa) {
c01074e0:	55                   	push   %ebp
c01074e1:	89 e5                	mov    %esp,%ebp
c01074e3:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01074e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01074e9:	c1 e8 0c             	shr    $0xc,%eax
c01074ec:	89 c2                	mov    %eax,%edx
c01074ee:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c01074f3:	39 c2                	cmp    %eax,%edx
c01074f5:	72 1c                	jb     c0107513 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01074f7:	c7 44 24 08 4c 71 11 	movl   $0xc011714c,0x8(%esp)
c01074fe:	c0 
c01074ff:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107506:	00 
c0107507:	c7 04 24 6b 71 11 c0 	movl   $0xc011716b,(%esp)
c010750e:	e8 e0 8f ff ff       	call   c01004f3 <__panic>
    return &pages[PPN(pa)];
c0107513:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c0107519:	8b 45 08             	mov    0x8(%ebp),%eax
c010751c:	c1 e8 0c             	shr    $0xc,%eax
c010751f:	89 c2                	mov    %eax,%edx
c0107521:	89 d0                	mov    %edx,%eax
c0107523:	c1 e0 03             	shl    $0x3,%eax
c0107526:	01 d0                	add    %edx,%eax
c0107528:	c1 e0 02             	shl    $0x2,%eax
c010752b:	01 c8                	add    %ecx,%eax
}
c010752d:	c9                   	leave  
c010752e:	c3                   	ret    

c010752f <page2kva>:
page2kva(struct Page *page) {
c010752f:	55                   	push   %ebp
c0107530:	89 e5                	mov    %esp,%ebp
c0107532:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0107535:	8b 45 08             	mov    0x8(%ebp),%eax
c0107538:	89 04 24             	mov    %eax,(%esp)
c010753b:	e8 8a ff ff ff       	call   c01074ca <page2pa>
c0107540:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107543:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107546:	c1 e8 0c             	shr    $0xc,%eax
c0107549:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010754c:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0107551:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0107554:	72 23                	jb     c0107579 <page2kva+0x4a>
c0107556:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107559:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010755d:	c7 44 24 08 7c 71 11 	movl   $0xc011717c,0x8(%esp)
c0107564:	c0 
c0107565:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010756c:	00 
c010756d:	c7 04 24 6b 71 11 c0 	movl   $0xc011716b,(%esp)
c0107574:	e8 7a 8f ff ff       	call   c01004f3 <__panic>
c0107579:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010757c:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0107581:	c9                   	leave  
c0107582:	c3                   	ret    

c0107583 <pte2page>:
pte2page(pte_t pte) {
c0107583:	55                   	push   %ebp
c0107584:	89 e5                	mov    %esp,%ebp
c0107586:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0107589:	8b 45 08             	mov    0x8(%ebp),%eax
c010758c:	83 e0 01             	and    $0x1,%eax
c010758f:	85 c0                	test   %eax,%eax
c0107591:	75 1c                	jne    c01075af <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0107593:	c7 44 24 08 a0 71 11 	movl   $0xc01171a0,0x8(%esp)
c010759a:	c0 
c010759b:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01075a2:	00 
c01075a3:	c7 04 24 6b 71 11 c0 	movl   $0xc011716b,(%esp)
c01075aa:	e8 44 8f ff ff       	call   c01004f3 <__panic>
    return pa2page(PTE_ADDR(pte));
c01075af:	8b 45 08             	mov    0x8(%ebp),%eax
c01075b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075b7:	89 04 24             	mov    %eax,(%esp)
c01075ba:	e8 21 ff ff ff       	call   c01074e0 <pa2page>
}
c01075bf:	c9                   	leave  
c01075c0:	c3                   	ret    

c01075c1 <pde2page>:
pde2page(pde_t pde) {
c01075c1:	55                   	push   %ebp
c01075c2:	89 e5                	mov    %esp,%ebp
c01075c4:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01075c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01075ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075cf:	89 04 24             	mov    %eax,(%esp)
c01075d2:	e8 09 ff ff ff       	call   c01074e0 <pa2page>
}
c01075d7:	c9                   	leave  
c01075d8:	c3                   	ret    

c01075d9 <page_ref>:
page_ref(struct Page *page) {
c01075d9:	55                   	push   %ebp
c01075da:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01075dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01075df:	8b 00                	mov    (%eax),%eax
}
c01075e1:	5d                   	pop    %ebp
c01075e2:	c3                   	ret    

c01075e3 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c01075e3:	55                   	push   %ebp
c01075e4:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01075e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01075e9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01075ec:	89 10                	mov    %edx,(%eax)
}
c01075ee:	5d                   	pop    %ebp
c01075ef:	c3                   	ret    

c01075f0 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c01075f0:	55                   	push   %ebp
c01075f1:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01075f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01075f6:	8b 00                	mov    (%eax),%eax
c01075f8:	8d 50 01             	lea    0x1(%eax),%edx
c01075fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01075fe:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0107600:	8b 45 08             	mov    0x8(%ebp),%eax
c0107603:	8b 00                	mov    (%eax),%eax
}
c0107605:	5d                   	pop    %ebp
c0107606:	c3                   	ret    

c0107607 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0107607:	55                   	push   %ebp
c0107608:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010760a:	8b 45 08             	mov    0x8(%ebp),%eax
c010760d:	8b 00                	mov    (%eax),%eax
c010760f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107612:	8b 45 08             	mov    0x8(%ebp),%eax
c0107615:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0107617:	8b 45 08             	mov    0x8(%ebp),%eax
c010761a:	8b 00                	mov    (%eax),%eax
}
c010761c:	5d                   	pop    %ebp
c010761d:	c3                   	ret    

c010761e <__intr_save>:
__intr_save(void) {
c010761e:	55                   	push   %ebp
c010761f:	89 e5                	mov    %esp,%ebp
c0107621:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0107624:	9c                   	pushf  
c0107625:	58                   	pop    %eax
c0107626:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0107629:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010762c:	25 00 02 00 00       	and    $0x200,%eax
c0107631:	85 c0                	test   %eax,%eax
c0107633:	74 0c                	je     c0107641 <__intr_save+0x23>
        intr_disable();
c0107635:	e8 ce ac ff ff       	call   c0102308 <intr_disable>
        return 1;
c010763a:	b8 01 00 00 00       	mov    $0x1,%eax
c010763f:	eb 05                	jmp    c0107646 <__intr_save+0x28>
    return 0;
c0107641:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107646:	c9                   	leave  
c0107647:	c3                   	ret    

c0107648 <__intr_restore>:
__intr_restore(bool flag) {
c0107648:	55                   	push   %ebp
c0107649:	89 e5                	mov    %esp,%ebp
c010764b:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010764e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107652:	74 05                	je     c0107659 <__intr_restore+0x11>
        intr_enable();
c0107654:	e8 a9 ac ff ff       	call   c0102302 <intr_enable>
}
c0107659:	c9                   	leave  
c010765a:	c3                   	ret    

c010765b <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010765b:	55                   	push   %ebp
c010765c:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010765e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107661:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0107664:	b8 23 00 00 00       	mov    $0x23,%eax
c0107669:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010766b:	b8 23 00 00 00       	mov    $0x23,%eax
c0107670:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0107672:	b8 10 00 00 00       	mov    $0x10,%eax
c0107677:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0107679:	b8 10 00 00 00       	mov    $0x10,%eax
c010767e:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0107680:	b8 10 00 00 00       	mov    $0x10,%eax
c0107685:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0107687:	ea 8e 76 10 c0 08 00 	ljmp   $0x8,$0xc010768e
}
c010768e:	5d                   	pop    %ebp
c010768f:	c3                   	ret    

c0107690 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0107690:	55                   	push   %ebp
c0107691:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0107693:	8b 45 08             	mov    0x8(%ebp),%eax
c0107696:	a3 a4 2f 15 c0       	mov    %eax,0xc0152fa4
}
c010769b:	5d                   	pop    %ebp
c010769c:	c3                   	ret    

c010769d <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010769d:	55                   	push   %ebp
c010769e:	89 e5                	mov    %esp,%ebp
c01076a0:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01076a3:	b8 00 f0 14 c0       	mov    $0xc014f000,%eax
c01076a8:	89 04 24             	mov    %eax,(%esp)
c01076ab:	e8 e0 ff ff ff       	call   c0107690 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01076b0:	66 c7 05 a8 2f 15 c0 	movw   $0x10,0xc0152fa8
c01076b7:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01076b9:	66 c7 05 68 fa 14 c0 	movw   $0x68,0xc014fa68
c01076c0:	68 00 
c01076c2:	b8 a0 2f 15 c0       	mov    $0xc0152fa0,%eax
c01076c7:	66 a3 6a fa 14 c0    	mov    %ax,0xc014fa6a
c01076cd:	b8 a0 2f 15 c0       	mov    $0xc0152fa0,%eax
c01076d2:	c1 e8 10             	shr    $0x10,%eax
c01076d5:	a2 6c fa 14 c0       	mov    %al,0xc014fa6c
c01076da:	0f b6 05 6d fa 14 c0 	movzbl 0xc014fa6d,%eax
c01076e1:	83 e0 f0             	and    $0xfffffff0,%eax
c01076e4:	83 c8 09             	or     $0x9,%eax
c01076e7:	a2 6d fa 14 c0       	mov    %al,0xc014fa6d
c01076ec:	0f b6 05 6d fa 14 c0 	movzbl 0xc014fa6d,%eax
c01076f3:	83 e0 ef             	and    $0xffffffef,%eax
c01076f6:	a2 6d fa 14 c0       	mov    %al,0xc014fa6d
c01076fb:	0f b6 05 6d fa 14 c0 	movzbl 0xc014fa6d,%eax
c0107702:	83 e0 9f             	and    $0xffffff9f,%eax
c0107705:	a2 6d fa 14 c0       	mov    %al,0xc014fa6d
c010770a:	0f b6 05 6d fa 14 c0 	movzbl 0xc014fa6d,%eax
c0107711:	83 c8 80             	or     $0xffffff80,%eax
c0107714:	a2 6d fa 14 c0       	mov    %al,0xc014fa6d
c0107719:	0f b6 05 6e fa 14 c0 	movzbl 0xc014fa6e,%eax
c0107720:	83 e0 f0             	and    $0xfffffff0,%eax
c0107723:	a2 6e fa 14 c0       	mov    %al,0xc014fa6e
c0107728:	0f b6 05 6e fa 14 c0 	movzbl 0xc014fa6e,%eax
c010772f:	83 e0 ef             	and    $0xffffffef,%eax
c0107732:	a2 6e fa 14 c0       	mov    %al,0xc014fa6e
c0107737:	0f b6 05 6e fa 14 c0 	movzbl 0xc014fa6e,%eax
c010773e:	83 e0 df             	and    $0xffffffdf,%eax
c0107741:	a2 6e fa 14 c0       	mov    %al,0xc014fa6e
c0107746:	0f b6 05 6e fa 14 c0 	movzbl 0xc014fa6e,%eax
c010774d:	83 c8 40             	or     $0x40,%eax
c0107750:	a2 6e fa 14 c0       	mov    %al,0xc014fa6e
c0107755:	0f b6 05 6e fa 14 c0 	movzbl 0xc014fa6e,%eax
c010775c:	83 e0 7f             	and    $0x7f,%eax
c010775f:	a2 6e fa 14 c0       	mov    %al,0xc014fa6e
c0107764:	b8 a0 2f 15 c0       	mov    $0xc0152fa0,%eax
c0107769:	c1 e8 18             	shr    $0x18,%eax
c010776c:	a2 6f fa 14 c0       	mov    %al,0xc014fa6f

    // reload all segment registers
    lgdt(&gdt_pd);
c0107771:	c7 04 24 70 fa 14 c0 	movl   $0xc014fa70,(%esp)
c0107778:	e8 de fe ff ff       	call   c010765b <lgdt>
c010777d:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0107783:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107787:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010778a:	c9                   	leave  
c010778b:	c3                   	ret    

c010778c <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010778c:	55                   	push   %ebp
c010778d:	89 e5                	mov    %esp,%ebp
c010778f:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0107792:	c7 05 f8 61 15 c0 30 	movl   $0xc0117130,0xc01561f8
c0107799:	71 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010779c:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c01077a1:	8b 00                	mov    (%eax),%eax
c01077a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077a7:	c7 04 24 cc 71 11 c0 	movl   $0xc01171cc,(%esp)
c01077ae:	e8 e9 8b ff ff       	call   c010039c <cprintf>
    pmm_manager->init();
c01077b3:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c01077b8:	8b 40 04             	mov    0x4(%eax),%eax
c01077bb:	ff d0                	call   *%eax
}
c01077bd:	c9                   	leave  
c01077be:	c3                   	ret    

c01077bf <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01077bf:	55                   	push   %ebp
c01077c0:	89 e5                	mov    %esp,%ebp
c01077c2:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c01077c5:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c01077ca:	8b 40 08             	mov    0x8(%eax),%eax
c01077cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01077d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01077d4:	8b 55 08             	mov    0x8(%ebp),%edx
c01077d7:	89 14 24             	mov    %edx,(%esp)
c01077da:	ff d0                	call   *%eax
}
c01077dc:	c9                   	leave  
c01077dd:	c3                   	ret    

c01077de <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01077de:	55                   	push   %ebp
c01077df:	89 e5                	mov    %esp,%ebp
c01077e1:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01077e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01077eb:	e8 2e fe ff ff       	call   c010761e <__intr_save>
c01077f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01077f3:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c01077f8:	8b 40 0c             	mov    0xc(%eax),%eax
c01077fb:	8b 55 08             	mov    0x8(%ebp),%edx
c01077fe:	89 14 24             	mov    %edx,(%esp)
c0107801:	ff d0                	call   *%eax
c0107803:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0107806:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107809:	89 04 24             	mov    %eax,(%esp)
c010780c:	e8 37 fe ff ff       	call   c0107648 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0107811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107815:	75 2d                	jne    c0107844 <alloc_pages+0x66>
c0107817:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010781b:	77 27                	ja     c0107844 <alloc_pages+0x66>
c010781d:	a1 68 2f 15 c0       	mov    0xc0152f68,%eax
c0107822:	85 c0                	test   %eax,%eax
c0107824:	74 1e                	je     c0107844 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0107826:	8b 55 08             	mov    0x8(%ebp),%edx
c0107829:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c010782e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107835:	00 
c0107836:	89 54 24 04          	mov    %edx,0x4(%esp)
c010783a:	89 04 24             	mov    %eax,(%esp)
c010783d:	e8 de d2 ff ff       	call   c0104b20 <swap_out>
    }
c0107842:	eb a7                	jmp    c01077eb <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0107844:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107847:	c9                   	leave  
c0107848:	c3                   	ret    

c0107849 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0107849:	55                   	push   %ebp
c010784a:	89 e5                	mov    %esp,%ebp
c010784c:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010784f:	e8 ca fd ff ff       	call   c010761e <__intr_save>
c0107854:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107857:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c010785c:	8b 40 10             	mov    0x10(%eax),%eax
c010785f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107862:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107866:	8b 55 08             	mov    0x8(%ebp),%edx
c0107869:	89 14 24             	mov    %edx,(%esp)
c010786c:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010786e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107871:	89 04 24             	mov    %eax,(%esp)
c0107874:	e8 cf fd ff ff       	call   c0107648 <__intr_restore>
}
c0107879:	c9                   	leave  
c010787a:	c3                   	ret    

c010787b <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010787b:	55                   	push   %ebp
c010787c:	89 e5                	mov    %esp,%ebp
c010787e:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107881:	e8 98 fd ff ff       	call   c010761e <__intr_save>
c0107886:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107889:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c010788e:	8b 40 14             	mov    0x14(%eax),%eax
c0107891:	ff d0                	call   *%eax
c0107893:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107896:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107899:	89 04 24             	mov    %eax,(%esp)
c010789c:	e8 a7 fd ff ff       	call   c0107648 <__intr_restore>
    return ret;
c01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01078a4:	c9                   	leave  
c01078a5:	c3                   	ret    

c01078a6 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01078a6:	55                   	push   %ebp
c01078a7:	89 e5                	mov    %esp,%ebp
c01078a9:	57                   	push   %edi
c01078aa:	56                   	push   %esi
c01078ab:	53                   	push   %ebx
c01078ac:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01078b2:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01078b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01078c0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01078c7:	c7 04 24 e3 71 11 c0 	movl   $0xc01171e3,(%esp)
c01078ce:	e8 c9 8a ff ff       	call   c010039c <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01078d3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01078da:	e9 15 01 00 00       	jmp    c01079f4 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01078df:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01078e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01078e5:	89 d0                	mov    %edx,%eax
c01078e7:	c1 e0 02             	shl    $0x2,%eax
c01078ea:	01 d0                	add    %edx,%eax
c01078ec:	c1 e0 02             	shl    $0x2,%eax
c01078ef:	01 c8                	add    %ecx,%eax
c01078f1:	8b 50 08             	mov    0x8(%eax),%edx
c01078f4:	8b 40 04             	mov    0x4(%eax),%eax
c01078f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01078fa:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01078fd:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107900:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107903:	89 d0                	mov    %edx,%eax
c0107905:	c1 e0 02             	shl    $0x2,%eax
c0107908:	01 d0                	add    %edx,%eax
c010790a:	c1 e0 02             	shl    $0x2,%eax
c010790d:	01 c8                	add    %ecx,%eax
c010790f:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107912:	8b 58 10             	mov    0x10(%eax),%ebx
c0107915:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107918:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010791b:	01 c8                	add    %ecx,%eax
c010791d:	11 da                	adc    %ebx,%edx
c010791f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0107922:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0107925:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107928:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010792b:	89 d0                	mov    %edx,%eax
c010792d:	c1 e0 02             	shl    $0x2,%eax
c0107930:	01 d0                	add    %edx,%eax
c0107932:	c1 e0 02             	shl    $0x2,%eax
c0107935:	01 c8                	add    %ecx,%eax
c0107937:	83 c0 14             	add    $0x14,%eax
c010793a:	8b 00                	mov    (%eax),%eax
c010793c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0107942:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107945:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107948:	83 c0 ff             	add    $0xffffffff,%eax
c010794b:	83 d2 ff             	adc    $0xffffffff,%edx
c010794e:	89 c6                	mov    %eax,%esi
c0107950:	89 d7                	mov    %edx,%edi
c0107952:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107955:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107958:	89 d0                	mov    %edx,%eax
c010795a:	c1 e0 02             	shl    $0x2,%eax
c010795d:	01 d0                	add    %edx,%eax
c010795f:	c1 e0 02             	shl    $0x2,%eax
c0107962:	01 c8                	add    %ecx,%eax
c0107964:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107967:	8b 58 10             	mov    0x10(%eax),%ebx
c010796a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0107970:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0107974:	89 74 24 14          	mov    %esi,0x14(%esp)
c0107978:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010797c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010797f:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107982:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107986:	89 54 24 10          	mov    %edx,0x10(%esp)
c010798a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010798e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0107992:	c7 04 24 f0 71 11 c0 	movl   $0xc01171f0,(%esp)
c0107999:	e8 fe 89 ff ff       	call   c010039c <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010799e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01079a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01079a4:	89 d0                	mov    %edx,%eax
c01079a6:	c1 e0 02             	shl    $0x2,%eax
c01079a9:	01 d0                	add    %edx,%eax
c01079ab:	c1 e0 02             	shl    $0x2,%eax
c01079ae:	01 c8                	add    %ecx,%eax
c01079b0:	83 c0 14             	add    $0x14,%eax
c01079b3:	8b 00                	mov    (%eax),%eax
c01079b5:	83 f8 01             	cmp    $0x1,%eax
c01079b8:	75 36                	jne    c01079f0 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01079ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01079c0:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01079c3:	77 2b                	ja     c01079f0 <page_init+0x14a>
c01079c5:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01079c8:	72 05                	jb     c01079cf <page_init+0x129>
c01079ca:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01079cd:	73 21                	jae    c01079f0 <page_init+0x14a>
c01079cf:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01079d3:	77 1b                	ja     c01079f0 <page_init+0x14a>
c01079d5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01079d9:	72 09                	jb     c01079e4 <page_init+0x13e>
c01079db:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01079e2:	77 0c                	ja     c01079f0 <page_init+0x14a>
                maxpa = end;
c01079e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01079e7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01079ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01079ed:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
c01079f0:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01079f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01079f7:	8b 00                	mov    (%eax),%eax
c01079f9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01079fc:	0f 8f dd fe ff ff    	jg     c01078df <page_init+0x39>
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0107a02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107a06:	72 1d                	jb     c0107a25 <page_init+0x17f>
c0107a08:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107a0c:	77 09                	ja     c0107a17 <page_init+0x171>
c0107a0e:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0107a15:	76 0e                	jbe    c0107a25 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0107a17:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0107a1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0107a25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a2b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107a2f:	c1 ea 0c             	shr    $0xc,%edx
c0107a32:	a3 80 2f 15 c0       	mov    %eax,0xc0152f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0107a37:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0107a3e:	b8 04 63 15 c0       	mov    $0xc0156304,%eax
c0107a43:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107a46:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107a49:	01 d0                	add    %edx,%eax
c0107a4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0107a4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107a51:	ba 00 00 00 00       	mov    $0x0,%edx
c0107a56:	f7 75 ac             	divl   -0x54(%ebp)
c0107a59:	89 d0                	mov    %edx,%eax
c0107a5b:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107a5e:	29 c2                	sub    %eax,%edx
c0107a60:	89 d0                	mov    %edx,%eax
c0107a62:	a3 00 62 15 c0       	mov    %eax,0xc0156200

    for (i = 0; i < npage; i ++) {
c0107a67:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107a6e:	eb 2f                	jmp    c0107a9f <page_init+0x1f9>
        SetPageReserved(pages + i);
c0107a70:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c0107a76:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a79:	89 d0                	mov    %edx,%eax
c0107a7b:	c1 e0 03             	shl    $0x3,%eax
c0107a7e:	01 d0                	add    %edx,%eax
c0107a80:	c1 e0 02             	shl    $0x2,%eax
c0107a83:	01 c8                	add    %ecx,%eax
c0107a85:	83 c0 04             	add    $0x4,%eax
c0107a88:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107a8f:	89 45 8c             	mov    %eax,-0x74(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107a92:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107a95:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107a98:	0f ab 10             	bts    %edx,(%eax)
    for (i = 0; i < npage; i ++) {
c0107a9b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107a9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107aa2:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0107aa7:	39 c2                	cmp    %eax,%edx
c0107aa9:	72 c5                	jb     c0107a70 <page_init+0x1ca>
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107aab:	8b 15 80 2f 15 c0    	mov    0xc0152f80,%edx
c0107ab1:	89 d0                	mov    %edx,%eax
c0107ab3:	c1 e0 03             	shl    $0x3,%eax
c0107ab6:	01 d0                	add    %edx,%eax
c0107ab8:	c1 e0 02             	shl    $0x2,%eax
c0107abb:	89 c2                	mov    %eax,%edx
c0107abd:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c0107ac2:	01 d0                	add    %edx,%eax
c0107ac4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107ac7:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107ace:	77 23                	ja     c0107af3 <page_init+0x24d>
c0107ad0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107ad7:	c7 44 24 08 20 72 11 	movl   $0xc0117220,0x8(%esp)
c0107ade:	c0 
c0107adf:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0107ae6:	00 
c0107ae7:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107aee:	e8 00 8a ff ff       	call   c01004f3 <__panic>
c0107af3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107af6:	05 00 00 00 40       	add    $0x40000000,%eax
c0107afb:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107afe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107b05:	e9 74 01 00 00       	jmp    c0107c7e <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107b0a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107b0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b10:	89 d0                	mov    %edx,%eax
c0107b12:	c1 e0 02             	shl    $0x2,%eax
c0107b15:	01 d0                	add    %edx,%eax
c0107b17:	c1 e0 02             	shl    $0x2,%eax
c0107b1a:	01 c8                	add    %ecx,%eax
c0107b1c:	8b 50 08             	mov    0x8(%eax),%edx
c0107b1f:	8b 40 04             	mov    0x4(%eax),%eax
c0107b22:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107b25:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107b28:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107b2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b2e:	89 d0                	mov    %edx,%eax
c0107b30:	c1 e0 02             	shl    $0x2,%eax
c0107b33:	01 d0                	add    %edx,%eax
c0107b35:	c1 e0 02             	shl    $0x2,%eax
c0107b38:	01 c8                	add    %ecx,%eax
c0107b3a:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107b3d:	8b 58 10             	mov    0x10(%eax),%ebx
c0107b40:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b43:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b46:	01 c8                	add    %ecx,%eax
c0107b48:	11 da                	adc    %ebx,%edx
c0107b4a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0107b4d:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0107b50:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107b53:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b56:	89 d0                	mov    %edx,%eax
c0107b58:	c1 e0 02             	shl    $0x2,%eax
c0107b5b:	01 d0                	add    %edx,%eax
c0107b5d:	c1 e0 02             	shl    $0x2,%eax
c0107b60:	01 c8                	add    %ecx,%eax
c0107b62:	83 c0 14             	add    $0x14,%eax
c0107b65:	8b 00                	mov    (%eax),%eax
c0107b67:	83 f8 01             	cmp    $0x1,%eax
c0107b6a:	0f 85 0a 01 00 00    	jne    c0107c7a <page_init+0x3d4>
            if (begin < freemem) {
c0107b70:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b73:	ba 00 00 00 00       	mov    $0x0,%edx
c0107b78:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107b7b:	72 17                	jb     c0107b94 <page_init+0x2ee>
c0107b7d:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107b80:	77 05                	ja     c0107b87 <page_init+0x2e1>
c0107b82:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107b85:	76 0d                	jbe    c0107b94 <page_init+0x2ee>
                begin = freemem;
c0107b87:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107b8d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107b94:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107b98:	72 1d                	jb     c0107bb7 <page_init+0x311>
c0107b9a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107b9e:	77 09                	ja     c0107ba9 <page_init+0x303>
c0107ba0:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107ba7:	76 0e                	jbe    c0107bb7 <page_init+0x311>
                end = KMEMSIZE;
c0107ba9:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107bb0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107bb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107bba:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107bbd:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107bc0:	0f 87 b4 00 00 00    	ja     c0107c7a <page_init+0x3d4>
c0107bc6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107bc9:	72 09                	jb     c0107bd4 <page_init+0x32e>
c0107bcb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107bce:	0f 83 a6 00 00 00    	jae    c0107c7a <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c0107bd4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107bdb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107bde:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107be1:	01 d0                	add    %edx,%eax
c0107be3:	83 e8 01             	sub    $0x1,%eax
c0107be6:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107be9:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107bec:	ba 00 00 00 00       	mov    $0x0,%edx
c0107bf1:	f7 75 9c             	divl   -0x64(%ebp)
c0107bf4:	89 d0                	mov    %edx,%eax
c0107bf6:	8b 55 98             	mov    -0x68(%ebp),%edx
c0107bf9:	29 c2                	sub    %eax,%edx
c0107bfb:	89 d0                	mov    %edx,%eax
c0107bfd:	ba 00 00 00 00       	mov    $0x0,%edx
c0107c02:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107c05:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107c08:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107c0b:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107c0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107c11:	ba 00 00 00 00       	mov    $0x0,%edx
c0107c16:	89 c7                	mov    %eax,%edi
c0107c18:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0107c1e:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0107c21:	89 d0                	mov    %edx,%eax
c0107c23:	83 e0 00             	and    $0x0,%eax
c0107c26:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0107c29:	8b 45 80             	mov    -0x80(%ebp),%eax
c0107c2c:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0107c2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0107c32:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0107c35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107c38:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107c3b:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107c3e:	77 3a                	ja     c0107c7a <page_init+0x3d4>
c0107c40:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107c43:	72 05                	jb     c0107c4a <page_init+0x3a4>
c0107c45:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107c48:	73 30                	jae    c0107c7a <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0107c4a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0107c4d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0107c50:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107c53:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107c56:	29 c8                	sub    %ecx,%eax
c0107c58:	19 da                	sbb    %ebx,%edx
c0107c5a:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107c5e:	c1 ea 0c             	shr    $0xc,%edx
c0107c61:	89 c3                	mov    %eax,%ebx
c0107c63:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107c66:	89 04 24             	mov    %eax,(%esp)
c0107c69:	e8 72 f8 ff ff       	call   c01074e0 <pa2page>
c0107c6e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0107c72:	89 04 24             	mov    %eax,(%esp)
c0107c75:	e8 45 fb ff ff       	call   c01077bf <init_memmap>
    for (i = 0; i < memmap->nr_map; i ++) {
c0107c7a:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107c7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107c81:	8b 00                	mov    (%eax),%eax
c0107c83:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107c86:	0f 8f 7e fe ff ff    	jg     c0107b0a <page_init+0x264>
                }
            }
        }
    }
}
c0107c8c:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0107c92:	5b                   	pop    %ebx
c0107c93:	5e                   	pop    %esi
c0107c94:	5f                   	pop    %edi
c0107c95:	5d                   	pop    %ebp
c0107c96:	c3                   	ret    

c0107c97 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107c97:	55                   	push   %ebp
c0107c98:	89 e5                	mov    %esp,%ebp
c0107c9a:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0107c9d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107ca0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ca3:	31 d0                	xor    %edx,%eax
c0107ca5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107caa:	85 c0                	test   %eax,%eax
c0107cac:	74 24                	je     c0107cd2 <boot_map_segment+0x3b>
c0107cae:	c7 44 24 0c 52 72 11 	movl   $0xc0117252,0xc(%esp)
c0107cb5:	c0 
c0107cb6:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0107cbd:	c0 
c0107cbe:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c0107cc5:	00 
c0107cc6:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107ccd:	e8 21 88 ff ff       	call   c01004f3 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107cd2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cdc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ce1:	89 c2                	mov    %eax,%edx
c0107ce3:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ce6:	01 c2                	add    %eax,%edx
c0107ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ceb:	01 d0                	add    %edx,%eax
c0107ced:	83 e8 01             	sub    $0x1,%eax
c0107cf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107cf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107cf6:	ba 00 00 00 00       	mov    $0x0,%edx
c0107cfb:	f7 75 f0             	divl   -0x10(%ebp)
c0107cfe:	89 d0                	mov    %edx,%eax
c0107d00:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107d03:	29 c2                	sub    %eax,%edx
c0107d05:	89 d0                	mov    %edx,%eax
c0107d07:	c1 e8 0c             	shr    $0xc,%eax
c0107d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d10:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107d13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107d16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107d1b:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107d1e:	8b 45 14             	mov    0x14(%ebp),%eax
c0107d21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107d24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107d2c:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107d2f:	eb 6b                	jmp    c0107d9c <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107d31:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107d38:	00 
c0107d39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107d40:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d43:	89 04 24             	mov    %eax,(%esp)
c0107d46:	e8 87 01 00 00       	call   c0107ed2 <get_pte>
c0107d4b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107d4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107d52:	75 24                	jne    c0107d78 <boot_map_segment+0xe1>
c0107d54:	c7 44 24 0c 7e 72 11 	movl   $0xc011727e,0xc(%esp)
c0107d5b:	c0 
c0107d5c:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0107d63:	c0 
c0107d64:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0107d6b:	00 
c0107d6c:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107d73:	e8 7b 87 ff ff       	call   c01004f3 <__panic>
        *ptep = pa | PTE_P | perm;
c0107d78:	8b 45 18             	mov    0x18(%ebp),%eax
c0107d7b:	8b 55 14             	mov    0x14(%ebp),%edx
c0107d7e:	09 d0                	or     %edx,%eax
c0107d80:	83 c8 01             	or     $0x1,%eax
c0107d83:	89 c2                	mov    %eax,%edx
c0107d85:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d88:	89 10                	mov    %edx,(%eax)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107d8a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107d8e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107d95:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107d9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107da0:	75 8f                	jne    c0107d31 <boot_map_segment+0x9a>
    }
}
c0107da2:	c9                   	leave  
c0107da3:	c3                   	ret    

c0107da4 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107da4:	55                   	push   %ebp
c0107da5:	89 e5                	mov    %esp,%ebp
c0107da7:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0107daa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107db1:	e8 28 fa ff ff       	call   c01077de <alloc_pages>
c0107db6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107db9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107dbd:	75 1c                	jne    c0107ddb <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0107dbf:	c7 44 24 08 8b 72 11 	movl   $0xc011728b,0x8(%esp)
c0107dc6:	c0 
c0107dc7:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0107dce:	00 
c0107dcf:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107dd6:	e8 18 87 ff ff       	call   c01004f3 <__panic>
    }
    return page2kva(p);
c0107ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dde:	89 04 24             	mov    %eax,(%esp)
c0107de1:	e8 49 f7 ff ff       	call   c010752f <page2kva>
}
c0107de6:	c9                   	leave  
c0107de7:	c3                   	ret    

c0107de8 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107de8:	55                   	push   %ebp
c0107de9:	89 e5                	mov    %esp,%ebp
c0107deb:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107dee:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0107df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107df6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107dfd:	77 23                	ja     c0107e22 <pmm_init+0x3a>
c0107dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e02:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107e06:	c7 44 24 08 20 72 11 	movl   $0xc0117220,0x8(%esp)
c0107e0d:	c0 
c0107e0e:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0107e15:	00 
c0107e16:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107e1d:	e8 d1 86 ff ff       	call   c01004f3 <__panic>
c0107e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e25:	05 00 00 00 40       	add    $0x40000000,%eax
c0107e2a:	a3 fc 61 15 c0       	mov    %eax,0xc01561fc
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107e2f:	e8 58 f9 ff ff       	call   c010778c <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107e34:	e8 6d fa ff ff       	call   c01078a6 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107e39:	e8 d2 08 00 00       	call   c0108710 <check_alloc_page>

    check_pgdir();
c0107e3e:	e8 eb 08 00 00       	call   c010872e <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107e43:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0107e48:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107e4e:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0107e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107e56:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107e5d:	77 23                	ja     c0107e82 <pmm_init+0x9a>
c0107e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e62:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107e66:	c7 44 24 08 20 72 11 	movl   $0xc0117220,0x8(%esp)
c0107e6d:	c0 
c0107e6e:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c0107e75:	00 
c0107e76:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107e7d:	e8 71 86 ff ff       	call   c01004f3 <__panic>
c0107e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e85:	05 00 00 00 40       	add    $0x40000000,%eax
c0107e8a:	83 c8 03             	or     $0x3,%eax
c0107e8d:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0107e8f:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0107e94:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0107e9b:	00 
c0107e9c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107ea3:	00 
c0107ea4:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0107eab:	38 
c0107eac:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0107eb3:	c0 
c0107eb4:	89 04 24             	mov    %eax,(%esp)
c0107eb7:	e8 db fd ff ff       	call   c0107c97 <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107ebc:	e8 dc f7 ff ff       	call   c010769d <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107ec1:	e8 03 0f 00 00       	call   c0108dc9 <check_boot_pgdir>

    print_pgdir();
c0107ec6:	e8 8b 13 00 00       	call   c0109256 <print_pgdir>
    
    kmalloc_init();
c0107ecb:	e8 f2 db ff ff       	call   c0105ac2 <kmalloc_init>

}
c0107ed0:	c9                   	leave  
c0107ed1:	c3                   	ret    

c0107ed2 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107ed2:	55                   	push   %ebp
c0107ed3:	89 e5                	mov    %esp,%ebp
c0107ed5:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0107ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107edb:	c1 e8 16             	shr    $0x16,%eax
c0107ede:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee8:	01 d0                	add    %edx,%eax
c0107eea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0107eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ef0:	8b 00                	mov    (%eax),%eax
c0107ef2:	83 e0 01             	and    $0x1,%eax
c0107ef5:	85 c0                	test   %eax,%eax
c0107ef7:	0f 85 af 00 00 00    	jne    c0107fac <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0107efd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107f01:	74 15                	je     c0107f18 <get_pte+0x46>
c0107f03:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107f0a:	e8 cf f8 ff ff       	call   c01077de <alloc_pages>
c0107f0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107f16:	75 0a                	jne    c0107f22 <get_pte+0x50>
            return NULL;
c0107f18:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f1d:	e9 e6 00 00 00       	jmp    c0108008 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0107f22:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f29:	00 
c0107f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f2d:	89 04 24             	mov    %eax,(%esp)
c0107f30:	e8 ae f6 ff ff       	call   c01075e3 <set_page_ref>
        uintptr_t pa = page2pa(page);
c0107f35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f38:	89 04 24             	mov    %eax,(%esp)
c0107f3b:	e8 8a f5 ff ff       	call   c01074ca <page2pa>
c0107f40:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0107f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f46:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107f49:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f4c:	c1 e8 0c             	shr    $0xc,%eax
c0107f4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107f52:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0107f57:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0107f5a:	72 23                	jb     c0107f7f <get_pte+0xad>
c0107f5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107f63:	c7 44 24 08 7c 71 11 	movl   $0xc011717c,0x8(%esp)
c0107f6a:	c0 
c0107f6b:	c7 44 24 04 82 01 00 	movl   $0x182,0x4(%esp)
c0107f72:	00 
c0107f73:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107f7a:	e8 74 85 ff ff       	call   c01004f3 <__panic>
c0107f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f82:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107f87:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107f8e:	00 
c0107f8f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107f96:	00 
c0107f97:	89 04 24             	mov    %eax,(%esp)
c0107f9a:	e8 e6 ce 00 00       	call   c0114e85 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0107f9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fa2:	83 c8 07             	or     $0x7,%eax
c0107fa5:	89 c2                	mov    %eax,%edx
c0107fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107faa:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0107fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107faf:	8b 00                	mov    (%eax),%eax
c0107fb1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107fb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107fb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107fbc:	c1 e8 0c             	shr    $0xc,%eax
c0107fbf:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107fc2:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0107fc7:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0107fca:	72 23                	jb     c0107fef <get_pte+0x11d>
c0107fcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107fd3:	c7 44 24 08 7c 71 11 	movl   $0xc011717c,0x8(%esp)
c0107fda:	c0 
c0107fdb:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c0107fe2:	00 
c0107fe3:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0107fea:	e8 04 85 ff ff       	call   c01004f3 <__panic>
c0107fef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ff2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107ff7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ffa:	c1 ea 0c             	shr    $0xc,%edx
c0107ffd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0108003:	c1 e2 02             	shl    $0x2,%edx
c0108006:	01 d0                	add    %edx,%eax
}
c0108008:	c9                   	leave  
c0108009:	c3                   	ret    

c010800a <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010800a:	55                   	push   %ebp
c010800b:	89 e5                	mov    %esp,%ebp
c010800d:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0108010:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108017:	00 
c0108018:	8b 45 0c             	mov    0xc(%ebp),%eax
c010801b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010801f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108022:	89 04 24             	mov    %eax,(%esp)
c0108025:	e8 a8 fe ff ff       	call   c0107ed2 <get_pte>
c010802a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010802d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108031:	74 08                	je     c010803b <get_page+0x31>
        *ptep_store = ptep;
c0108033:	8b 45 10             	mov    0x10(%ebp),%eax
c0108036:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108039:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010803b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010803f:	74 1b                	je     c010805c <get_page+0x52>
c0108041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108044:	8b 00                	mov    (%eax),%eax
c0108046:	83 e0 01             	and    $0x1,%eax
c0108049:	85 c0                	test   %eax,%eax
c010804b:	74 0f                	je     c010805c <get_page+0x52>
        return pte2page(*ptep);
c010804d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108050:	8b 00                	mov    (%eax),%eax
c0108052:	89 04 24             	mov    %eax,(%esp)
c0108055:	e8 29 f5 ff ff       	call   c0107583 <pte2page>
c010805a:	eb 05                	jmp    c0108061 <get_page+0x57>
    }
    return NULL;
c010805c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108061:	c9                   	leave  
c0108062:	c3                   	ret    

c0108063 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0108063:	55                   	push   %ebp
c0108064:	89 e5                	mov    %esp,%ebp
c0108066:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0108069:	8b 45 10             	mov    0x10(%ebp),%eax
c010806c:	8b 00                	mov    (%eax),%eax
c010806e:	83 e0 01             	and    $0x1,%eax
c0108071:	85 c0                	test   %eax,%eax
c0108073:	74 4d                	je     c01080c2 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0108075:	8b 45 10             	mov    0x10(%ebp),%eax
c0108078:	8b 00                	mov    (%eax),%eax
c010807a:	89 04 24             	mov    %eax,(%esp)
c010807d:	e8 01 f5 ff ff       	call   c0107583 <pte2page>
c0108082:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0108085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108088:	89 04 24             	mov    %eax,(%esp)
c010808b:	e8 77 f5 ff ff       	call   c0107607 <page_ref_dec>
c0108090:	85 c0                	test   %eax,%eax
c0108092:	75 13                	jne    c01080a7 <page_remove_pte+0x44>
            free_page(page);
c0108094:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010809b:	00 
c010809c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010809f:	89 04 24             	mov    %eax,(%esp)
c01080a2:	e8 a2 f7 ff ff       	call   c0107849 <free_pages>
        }
        *ptep = 0;
c01080a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01080aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c01080b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01080b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ba:	89 04 24             	mov    %eax,(%esp)
c01080bd:	e8 1d 05 00 00       	call   c01085df <tlb_invalidate>
    }
}
c01080c2:	c9                   	leave  
c01080c3:	c3                   	ret    

c01080c4 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01080c4:	55                   	push   %ebp
c01080c5:	89 e5                	mov    %esp,%ebp
c01080c7:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01080ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080cd:	25 ff 0f 00 00       	and    $0xfff,%eax
c01080d2:	85 c0                	test   %eax,%eax
c01080d4:	75 0c                	jne    c01080e2 <unmap_range+0x1e>
c01080d6:	8b 45 10             	mov    0x10(%ebp),%eax
c01080d9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01080de:	85 c0                	test   %eax,%eax
c01080e0:	74 24                	je     c0108106 <unmap_range+0x42>
c01080e2:	c7 44 24 0c a4 72 11 	movl   $0xc01172a4,0xc(%esp)
c01080e9:	c0 
c01080ea:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01080f1:	c0 
c01080f2:	c7 44 24 04 bf 01 00 	movl   $0x1bf,0x4(%esp)
c01080f9:	00 
c01080fa:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108101:	e8 ed 83 ff ff       	call   c01004f3 <__panic>
    assert(USER_ACCESS(start, end));
c0108106:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010810d:	76 11                	jbe    c0108120 <unmap_range+0x5c>
c010810f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108112:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108115:	73 09                	jae    c0108120 <unmap_range+0x5c>
c0108117:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010811e:	76 24                	jbe    c0108144 <unmap_range+0x80>
c0108120:	c7 44 24 0c cd 72 11 	movl   $0xc01172cd,0xc(%esp)
c0108127:	c0 
c0108128:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c010812f:	c0 
c0108130:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
c0108137:	00 
c0108138:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010813f:	e8 af 83 ff ff       	call   c01004f3 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0108144:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010814b:	00 
c010814c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010814f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108153:	8b 45 08             	mov    0x8(%ebp),%eax
c0108156:	89 04 24             	mov    %eax,(%esp)
c0108159:	e8 74 fd ff ff       	call   c0107ed2 <get_pte>
c010815e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0108161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108165:	75 18                	jne    c010817f <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0108167:	8b 45 0c             	mov    0xc(%ebp),%eax
c010816a:	05 00 00 40 00       	add    $0x400000,%eax
c010816f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108175:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010817a:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c010817d:	eb 29                	jmp    c01081a8 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c010817f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108182:	8b 00                	mov    (%eax),%eax
c0108184:	85 c0                	test   %eax,%eax
c0108186:	74 19                	je     c01081a1 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0108188:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010818b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010818f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108196:	8b 45 08             	mov    0x8(%ebp),%eax
c0108199:	89 04 24             	mov    %eax,(%esp)
c010819c:	e8 c2 fe ff ff       	call   c0108063 <page_remove_pte>
        }
        start += PGSIZE;
c01081a1:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c01081a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01081ac:	74 08                	je     c01081b6 <unmap_range+0xf2>
c01081ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081b1:	3b 45 10             	cmp    0x10(%ebp),%eax
c01081b4:	72 8e                	jb     c0108144 <unmap_range+0x80>
}
c01081b6:	c9                   	leave  
c01081b7:	c3                   	ret    

c01081b8 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01081b8:	55                   	push   %ebp
c01081b9:	89 e5                	mov    %esp,%ebp
c01081bb:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01081be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081c1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01081c6:	85 c0                	test   %eax,%eax
c01081c8:	75 0c                	jne    c01081d6 <exit_range+0x1e>
c01081ca:	8b 45 10             	mov    0x10(%ebp),%eax
c01081cd:	25 ff 0f 00 00       	and    $0xfff,%eax
c01081d2:	85 c0                	test   %eax,%eax
c01081d4:	74 24                	je     c01081fa <exit_range+0x42>
c01081d6:	c7 44 24 0c a4 72 11 	movl   $0xc01172a4,0xc(%esp)
c01081dd:	c0 
c01081de:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01081e5:	c0 
c01081e6:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
c01081ed:	00 
c01081ee:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01081f5:	e8 f9 82 ff ff       	call   c01004f3 <__panic>
    assert(USER_ACCESS(start, end));
c01081fa:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108201:	76 11                	jbe    c0108214 <exit_range+0x5c>
c0108203:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108206:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108209:	73 09                	jae    c0108214 <exit_range+0x5c>
c010820b:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0108212:	76 24                	jbe    c0108238 <exit_range+0x80>
c0108214:	c7 44 24 0c cd 72 11 	movl   $0xc01172cd,0xc(%esp)
c010821b:	c0 
c010821c:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108223:	c0 
c0108224:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c010822b:	00 
c010822c:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108233:	e8 bb 82 ff ff       	call   c01004f3 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0108238:	8b 45 0c             	mov    0xc(%ebp),%eax
c010823b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010823e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108241:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0108246:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0108249:	8b 45 0c             	mov    0xc(%ebp),%eax
c010824c:	c1 e8 16             	shr    $0x16,%eax
c010824f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0108252:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108255:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010825c:	8b 45 08             	mov    0x8(%ebp),%eax
c010825f:	01 d0                	add    %edx,%eax
c0108261:	8b 00                	mov    (%eax),%eax
c0108263:	83 e0 01             	and    $0x1,%eax
c0108266:	85 c0                	test   %eax,%eax
c0108268:	74 3e                	je     c01082a8 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c010826a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010826d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108274:	8b 45 08             	mov    0x8(%ebp),%eax
c0108277:	01 d0                	add    %edx,%eax
c0108279:	8b 00                	mov    (%eax),%eax
c010827b:	89 04 24             	mov    %eax,(%esp)
c010827e:	e8 3e f3 ff ff       	call   c01075c1 <pde2page>
c0108283:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010828a:	00 
c010828b:	89 04 24             	mov    %eax,(%esp)
c010828e:	e8 b6 f5 ff ff       	call   c0107849 <free_pages>
            pgdir[pde_idx] = 0;
c0108293:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108296:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010829d:	8b 45 08             	mov    0x8(%ebp),%eax
c01082a0:	01 d0                	add    %edx,%eax
c01082a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c01082a8:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c01082af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01082b3:	74 08                	je     c01082bd <exit_range+0x105>
c01082b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082b8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01082bb:	72 8c                	jb     c0108249 <exit_range+0x91>
}
c01082bd:	c9                   	leave  
c01082be:	c3                   	ret    

c01082bf <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c01082bf:	55                   	push   %ebp
c01082c0:	89 e5                	mov    %esp,%ebp
c01082c2:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01082c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01082c8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01082cd:	85 c0                	test   %eax,%eax
c01082cf:	75 0c                	jne    c01082dd <copy_range+0x1e>
c01082d1:	8b 45 14             	mov    0x14(%ebp),%eax
c01082d4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01082d9:	85 c0                	test   %eax,%eax
c01082db:	74 24                	je     c0108301 <copy_range+0x42>
c01082dd:	c7 44 24 0c a4 72 11 	movl   $0xc01172a4,0xc(%esp)
c01082e4:	c0 
c01082e5:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01082ec:	c0 
c01082ed:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c01082f4:	00 
c01082f5:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01082fc:	e8 f2 81 ff ff       	call   c01004f3 <__panic>
    assert(USER_ACCESS(start, end));
c0108301:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0108308:	76 11                	jbe    c010831b <copy_range+0x5c>
c010830a:	8b 45 10             	mov    0x10(%ebp),%eax
c010830d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0108310:	73 09                	jae    c010831b <copy_range+0x5c>
c0108312:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0108319:	76 24                	jbe    c010833f <copy_range+0x80>
c010831b:	c7 44 24 0c cd 72 11 	movl   $0xc01172cd,0xc(%esp)
c0108322:	c0 
c0108323:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c010832a:	c0 
c010832b:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0108332:	00 
c0108333:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010833a:	e8 b4 81 ff ff       	call   c01004f3 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c010833f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108346:	00 
c0108347:	8b 45 10             	mov    0x10(%ebp),%eax
c010834a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010834e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108351:	89 04 24             	mov    %eax,(%esp)
c0108354:	e8 79 fb ff ff       	call   c0107ed2 <get_pte>
c0108359:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010835c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108360:	75 1b                	jne    c010837d <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0108362:	8b 45 10             	mov    0x10(%ebp),%eax
c0108365:	05 00 00 40 00       	add    $0x400000,%eax
c010836a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010836d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108370:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0108375:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0108378:	e9 4c 01 00 00       	jmp    c01084c9 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c010837d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108380:	8b 00                	mov    (%eax),%eax
c0108382:	83 e0 01             	and    $0x1,%eax
c0108385:	85 c0                	test   %eax,%eax
c0108387:	0f 84 35 01 00 00    	je     c01084c2 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c010838d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108394:	00 
c0108395:	8b 45 10             	mov    0x10(%ebp),%eax
c0108398:	89 44 24 04          	mov    %eax,0x4(%esp)
c010839c:	8b 45 08             	mov    0x8(%ebp),%eax
c010839f:	89 04 24             	mov    %eax,(%esp)
c01083a2:	e8 2b fb ff ff       	call   c0107ed2 <get_pte>
c01083a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01083ae:	75 0a                	jne    c01083ba <copy_range+0xfb>
                return -E_NO_MEM;
c01083b0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01083b5:	e9 26 01 00 00       	jmp    c01084e0 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c01083ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083bd:	8b 00                	mov    (%eax),%eax
c01083bf:	83 e0 07             	and    $0x7,%eax
c01083c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c01083c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083c8:	8b 00                	mov    (%eax),%eax
c01083ca:	89 04 24             	mov    %eax,(%esp)
c01083cd:	e8 b1 f1 ff ff       	call   c0107583 <pte2page>
c01083d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c01083d5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01083dc:	e8 fd f3 ff ff       	call   c01077de <alloc_pages>
c01083e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c01083e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01083e8:	75 24                	jne    c010840e <copy_range+0x14f>
c01083ea:	c7 44 24 0c e5 72 11 	movl   $0xc01172e5,0xc(%esp)
c01083f1:	c0 
c01083f2:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01083f9:	c0 
c01083fa:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c0108401:	00 
c0108402:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108409:	e8 e5 80 ff ff       	call   c01004f3 <__panic>
        assert(npage!=NULL);
c010840e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108412:	75 24                	jne    c0108438 <copy_range+0x179>
c0108414:	c7 44 24 0c f0 72 11 	movl   $0xc01172f0,0xc(%esp)
c010841b:	c0 
c010841c:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108423:	c0 
c0108424:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c010842b:	00 
c010842c:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108433:	e8 bb 80 ff ff       	call   c01004f3 <__panic>
        int ret=0;
c0108438:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c010843f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108442:	89 04 24             	mov    %eax,(%esp)
c0108445:	e8 e5 f0 ff ff       	call   c010752f <page2kva>
c010844a:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c010844d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108450:	89 04 24             	mov    %eax,(%esp)
c0108453:	e8 d7 f0 ff ff       	call   c010752f <page2kva>
c0108458:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c010845b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0108462:	00 
c0108463:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108466:	89 44 24 04          	mov    %eax,0x4(%esp)
c010846a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010846d:	89 04 24             	mov    %eax,(%esp)
c0108470:	e8 f2 ca 00 00       	call   c0114f67 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0108475:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108478:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010847c:	8b 45 10             	mov    0x10(%ebp),%eax
c010847f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108483:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108486:	89 44 24 04          	mov    %eax,0x4(%esp)
c010848a:	8b 45 08             	mov    0x8(%ebp),%eax
c010848d:	89 04 24             	mov    %eax,(%esp)
c0108490:	e8 91 00 00 00       	call   c0108526 <page_insert>
c0108495:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0108498:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010849c:	74 24                	je     c01084c2 <copy_range+0x203>
c010849e:	c7 44 24 0c fc 72 11 	movl   $0xc01172fc,0xc(%esp)
c01084a5:	c0 
c01084a6:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01084ad:	c0 
c01084ae:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c01084b5:	00 
c01084b6:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01084bd:	e8 31 80 ff ff       	call   c01004f3 <__panic>
        }
        start += PGSIZE;
c01084c2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c01084c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01084cd:	74 0c                	je     c01084db <copy_range+0x21c>
c01084cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01084d2:	3b 45 14             	cmp    0x14(%ebp),%eax
c01084d5:	0f 82 64 fe ff ff    	jb     c010833f <copy_range+0x80>
    return 0;
c01084db:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01084e0:	c9                   	leave  
c01084e1:	c3                   	ret    

c01084e2 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01084e2:	55                   	push   %ebp
c01084e3:	89 e5                	mov    %esp,%ebp
c01084e5:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01084e8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01084ef:	00 
c01084f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01084fa:	89 04 24             	mov    %eax,(%esp)
c01084fd:	e8 d0 f9 ff ff       	call   c0107ed2 <get_pte>
c0108502:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0108505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108509:	74 19                	je     c0108524 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c010850b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010850e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108512:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108515:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108519:	8b 45 08             	mov    0x8(%ebp),%eax
c010851c:	89 04 24             	mov    %eax,(%esp)
c010851f:	e8 3f fb ff ff       	call   c0108063 <page_remove_pte>
    }
}
c0108524:	c9                   	leave  
c0108525:	c3                   	ret    

c0108526 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0108526:	55                   	push   %ebp
c0108527:	89 e5                	mov    %esp,%ebp
c0108529:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c010852c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108533:	00 
c0108534:	8b 45 10             	mov    0x10(%ebp),%eax
c0108537:	89 44 24 04          	mov    %eax,0x4(%esp)
c010853b:	8b 45 08             	mov    0x8(%ebp),%eax
c010853e:	89 04 24             	mov    %eax,(%esp)
c0108541:	e8 8c f9 ff ff       	call   c0107ed2 <get_pte>
c0108546:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0108549:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010854d:	75 0a                	jne    c0108559 <page_insert+0x33>
        return -E_NO_MEM;
c010854f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108554:	e9 84 00 00 00       	jmp    c01085dd <page_insert+0xb7>
    }
    page_ref_inc(page);
c0108559:	8b 45 0c             	mov    0xc(%ebp),%eax
c010855c:	89 04 24             	mov    %eax,(%esp)
c010855f:	e8 8c f0 ff ff       	call   c01075f0 <page_ref_inc>
    if (*ptep & PTE_P) {
c0108564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108567:	8b 00                	mov    (%eax),%eax
c0108569:	83 e0 01             	and    $0x1,%eax
c010856c:	85 c0                	test   %eax,%eax
c010856e:	74 3e                	je     c01085ae <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0108570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108573:	8b 00                	mov    (%eax),%eax
c0108575:	89 04 24             	mov    %eax,(%esp)
c0108578:	e8 06 f0 ff ff       	call   c0107583 <pte2page>
c010857d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0108580:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108583:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108586:	75 0d                	jne    c0108595 <page_insert+0x6f>
            page_ref_dec(page);
c0108588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010858b:	89 04 24             	mov    %eax,(%esp)
c010858e:	e8 74 f0 ff ff       	call   c0107607 <page_ref_dec>
c0108593:	eb 19                	jmp    c01085ae <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0108595:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108598:	89 44 24 08          	mov    %eax,0x8(%esp)
c010859c:	8b 45 10             	mov    0x10(%ebp),%eax
c010859f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a6:	89 04 24             	mov    %eax,(%esp)
c01085a9:	e8 b5 fa ff ff       	call   c0108063 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01085ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085b1:	89 04 24             	mov    %eax,(%esp)
c01085b4:	e8 11 ef ff ff       	call   c01074ca <page2pa>
c01085b9:	0b 45 14             	or     0x14(%ebp),%eax
c01085bc:	83 c8 01             	or     $0x1,%eax
c01085bf:	89 c2                	mov    %eax,%edx
c01085c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c4:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01085c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01085c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d0:	89 04 24             	mov    %eax,(%esp)
c01085d3:	e8 07 00 00 00       	call   c01085df <tlb_invalidate>
    return 0;
c01085d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085dd:	c9                   	leave  
c01085de:	c3                   	ret    

c01085df <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01085df:	55                   	push   %ebp
c01085e0:	89 e5                	mov    %esp,%ebp
c01085e2:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01085e5:	0f 20 d8             	mov    %cr3,%eax
c01085e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c01085eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01085ee:	89 c2                	mov    %eax,%edx
c01085f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085f6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01085fd:	77 23                	ja     c0108622 <tlb_invalidate+0x43>
c01085ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108602:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108606:	c7 44 24 08 20 72 11 	movl   $0xc0117220,0x8(%esp)
c010860d:	c0 
c010860e:	c7 44 24 04 43 02 00 	movl   $0x243,0x4(%esp)
c0108615:	00 
c0108616:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010861d:	e8 d1 7e ff ff       	call   c01004f3 <__panic>
c0108622:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108625:	05 00 00 00 40       	add    $0x40000000,%eax
c010862a:	39 c2                	cmp    %eax,%edx
c010862c:	75 0c                	jne    c010863a <tlb_invalidate+0x5b>
        invlpg((void *)la);
c010862e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108631:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0108634:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108637:	0f 01 38             	invlpg (%eax)
    }
}
c010863a:	c9                   	leave  
c010863b:	c3                   	ret    

c010863c <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c010863c:	55                   	push   %ebp
c010863d:	89 e5                	mov    %esp,%ebp
c010863f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0108642:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108649:	e8 90 f1 ff ff       	call   c01077de <alloc_pages>
c010864e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0108651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108655:	0f 84 b0 00 00 00    	je     c010870b <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c010865b:	8b 45 10             	mov    0x10(%ebp),%eax
c010865e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108662:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108665:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108669:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108670:	8b 45 08             	mov    0x8(%ebp),%eax
c0108673:	89 04 24             	mov    %eax,(%esp)
c0108676:	e8 ab fe ff ff       	call   c0108526 <page_insert>
c010867b:	85 c0                	test   %eax,%eax
c010867d:	74 1a                	je     c0108699 <pgdir_alloc_page+0x5d>
            free_page(page);
c010867f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108686:	00 
c0108687:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010868a:	89 04 24             	mov    %eax,(%esp)
c010868d:	e8 b7 f1 ff ff       	call   c0107849 <free_pages>
            return NULL;
c0108692:	b8 00 00 00 00       	mov    $0x0,%eax
c0108697:	eb 75                	jmp    c010870e <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0108699:	a1 68 2f 15 c0       	mov    0xc0152f68,%eax
c010869e:	85 c0                	test   %eax,%eax
c01086a0:	74 69                	je     c010870b <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01086a2:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c01086a7:	85 c0                	test   %eax,%eax
c01086a9:	74 60                	je     c010870b <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01086ab:	a1 04 61 15 c0       	mov    0xc0156104,%eax
c01086b0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01086b7:	00 
c01086b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086bb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086bf:	8b 55 0c             	mov    0xc(%ebp),%edx
c01086c2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01086c6:	89 04 24             	mov    %eax,(%esp)
c01086c9:	e8 06 c4 ff ff       	call   c0104ad4 <swap_map_swappable>
                page->pra_vaddr=la;
c01086ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086d1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01086d4:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c01086d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086da:	89 04 24             	mov    %eax,(%esp)
c01086dd:	e8 f7 ee ff ff       	call   c01075d9 <page_ref>
c01086e2:	83 f8 01             	cmp    $0x1,%eax
c01086e5:	74 24                	je     c010870b <pgdir_alloc_page+0xcf>
c01086e7:	c7 44 24 0c 05 73 11 	movl   $0xc0117305,0xc(%esp)
c01086ee:	c0 
c01086ef:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01086f6:	c0 
c01086f7:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c01086fe:	00 
c01086ff:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108706:	e8 e8 7d ff ff       	call   c01004f3 <__panic>
            }
        }

    }

    return page;
c010870b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010870e:	c9                   	leave  
c010870f:	c3                   	ret    

c0108710 <check_alloc_page>:

static void
check_alloc_page(void) {
c0108710:	55                   	push   %ebp
c0108711:	89 e5                	mov    %esp,%ebp
c0108713:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0108716:	a1 f8 61 15 c0       	mov    0xc01561f8,%eax
c010871b:	8b 40 18             	mov    0x18(%eax),%eax
c010871e:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0108720:	c7 04 24 1c 73 11 c0 	movl   $0xc011731c,(%esp)
c0108727:	e8 70 7c ff ff       	call   c010039c <cprintf>
}
c010872c:	c9                   	leave  
c010872d:	c3                   	ret    

c010872e <check_pgdir>:

static void
check_pgdir(void) {
c010872e:	55                   	push   %ebp
c010872f:	89 e5                	mov    %esp,%ebp
c0108731:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0108734:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0108739:	3d 00 80 03 00       	cmp    $0x38000,%eax
c010873e:	76 24                	jbe    c0108764 <check_pgdir+0x36>
c0108740:	c7 44 24 0c 3b 73 11 	movl   $0xc011733b,0xc(%esp)
c0108747:	c0 
c0108748:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c010874f:	c0 
c0108750:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c0108757:	00 
c0108758:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010875f:	e8 8f 7d ff ff       	call   c01004f3 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0108764:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108769:	85 c0                	test   %eax,%eax
c010876b:	74 0e                	je     c010877b <check_pgdir+0x4d>
c010876d:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108772:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108777:	85 c0                	test   %eax,%eax
c0108779:	74 24                	je     c010879f <check_pgdir+0x71>
c010877b:	c7 44 24 0c 58 73 11 	movl   $0xc0117358,0xc(%esp)
c0108782:	c0 
c0108783:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c010878a:	c0 
c010878b:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c0108792:	00 
c0108793:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010879a:	e8 54 7d ff ff       	call   c01004f3 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010879f:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c01087a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087ab:	00 
c01087ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01087b3:	00 
c01087b4:	89 04 24             	mov    %eax,(%esp)
c01087b7:	e8 4e f8 ff ff       	call   c010800a <get_page>
c01087bc:	85 c0                	test   %eax,%eax
c01087be:	74 24                	je     c01087e4 <check_pgdir+0xb6>
c01087c0:	c7 44 24 0c 90 73 11 	movl   $0xc0117390,0xc(%esp)
c01087c7:	c0 
c01087c8:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01087cf:	c0 
c01087d0:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c01087d7:	00 
c01087d8:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01087df:	e8 0f 7d ff ff       	call   c01004f3 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01087e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01087eb:	e8 ee ef ff ff       	call   c01077de <alloc_pages>
c01087f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01087f3:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c01087f8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01087ff:	00 
c0108800:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108807:	00 
c0108808:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010880b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010880f:	89 04 24             	mov    %eax,(%esp)
c0108812:	e8 0f fd ff ff       	call   c0108526 <page_insert>
c0108817:	85 c0                	test   %eax,%eax
c0108819:	74 24                	je     c010883f <check_pgdir+0x111>
c010881b:	c7 44 24 0c b8 73 11 	movl   $0xc01173b8,0xc(%esp)
c0108822:	c0 
c0108823:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c010882a:	c0 
c010882b:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c0108832:	00 
c0108833:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c010883a:	e8 b4 7c ff ff       	call   c01004f3 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c010883f:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108844:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010884b:	00 
c010884c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108853:	00 
c0108854:	89 04 24             	mov    %eax,(%esp)
c0108857:	e8 76 f6 ff ff       	call   c0107ed2 <get_pte>
c010885c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010885f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108863:	75 24                	jne    c0108889 <check_pgdir+0x15b>
c0108865:	c7 44 24 0c e4 73 11 	movl   $0xc01173e4,0xc(%esp)
c010886c:	c0 
c010886d:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108874:	c0 
c0108875:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010887c:	00 
c010887d:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108884:	e8 6a 7c ff ff       	call   c01004f3 <__panic>
    assert(pte2page(*ptep) == p1);
c0108889:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010888c:	8b 00                	mov    (%eax),%eax
c010888e:	89 04 24             	mov    %eax,(%esp)
c0108891:	e8 ed ec ff ff       	call   c0107583 <pte2page>
c0108896:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108899:	74 24                	je     c01088bf <check_pgdir+0x191>
c010889b:	c7 44 24 0c 11 74 11 	movl   $0xc0117411,0xc(%esp)
c01088a2:	c0 
c01088a3:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01088aa:	c0 
c01088ab:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c01088b2:	00 
c01088b3:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01088ba:	e8 34 7c ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p1) == 1);
c01088bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088c2:	89 04 24             	mov    %eax,(%esp)
c01088c5:	e8 0f ed ff ff       	call   c01075d9 <page_ref>
c01088ca:	83 f8 01             	cmp    $0x1,%eax
c01088cd:	74 24                	je     c01088f3 <check_pgdir+0x1c5>
c01088cf:	c7 44 24 0c 27 74 11 	movl   $0xc0117427,0xc(%esp)
c01088d6:	c0 
c01088d7:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01088de:	c0 
c01088df:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c01088e6:	00 
c01088e7:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01088ee:	e8 00 7c ff ff       	call   c01004f3 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01088f3:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c01088f8:	8b 00                	mov    (%eax),%eax
c01088fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01088ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108902:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108905:	c1 e8 0c             	shr    $0xc,%eax
c0108908:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010890b:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0108910:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108913:	72 23                	jb     c0108938 <check_pgdir+0x20a>
c0108915:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108918:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010891c:	c7 44 24 08 7c 71 11 	movl   $0xc011717c,0x8(%esp)
c0108923:	c0 
c0108924:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c010892b:	00 
c010892c:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108933:	e8 bb 7b ff ff       	call   c01004f3 <__panic>
c0108938:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010893b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108940:	83 c0 04             	add    $0x4,%eax
c0108943:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0108946:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c010894b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108952:	00 
c0108953:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010895a:	00 
c010895b:	89 04 24             	mov    %eax,(%esp)
c010895e:	e8 6f f5 ff ff       	call   c0107ed2 <get_pte>
c0108963:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108966:	74 24                	je     c010898c <check_pgdir+0x25e>
c0108968:	c7 44 24 0c 3c 74 11 	movl   $0xc011743c,0xc(%esp)
c010896f:	c0 
c0108970:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108977:	c0 
c0108978:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c010897f:	00 
c0108980:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108987:	e8 67 7b ff ff       	call   c01004f3 <__panic>

    p2 = alloc_page();
c010898c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108993:	e8 46 ee ff ff       	call   c01077de <alloc_pages>
c0108998:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010899b:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c01089a0:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01089a7:	00 
c01089a8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01089af:	00 
c01089b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01089b3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01089b7:	89 04 24             	mov    %eax,(%esp)
c01089ba:	e8 67 fb ff ff       	call   c0108526 <page_insert>
c01089bf:	85 c0                	test   %eax,%eax
c01089c1:	74 24                	je     c01089e7 <check_pgdir+0x2b9>
c01089c3:	c7 44 24 0c 64 74 11 	movl   $0xc0117464,0xc(%esp)
c01089ca:	c0 
c01089cb:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01089d2:	c0 
c01089d3:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c01089da:	00 
c01089db:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01089e2:	e8 0c 7b ff ff       	call   c01004f3 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01089e7:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c01089ec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01089f3:	00 
c01089f4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01089fb:	00 
c01089fc:	89 04 24             	mov    %eax,(%esp)
c01089ff:	e8 ce f4 ff ff       	call   c0107ed2 <get_pte>
c0108a04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108a07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108a0b:	75 24                	jne    c0108a31 <check_pgdir+0x303>
c0108a0d:	c7 44 24 0c 9c 74 11 	movl   $0xc011749c,0xc(%esp)
c0108a14:	c0 
c0108a15:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108a1c:	c0 
c0108a1d:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c0108a24:	00 
c0108a25:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108a2c:	e8 c2 7a ff ff       	call   c01004f3 <__panic>
    assert(*ptep & PTE_U);
c0108a31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a34:	8b 00                	mov    (%eax),%eax
c0108a36:	83 e0 04             	and    $0x4,%eax
c0108a39:	85 c0                	test   %eax,%eax
c0108a3b:	75 24                	jne    c0108a61 <check_pgdir+0x333>
c0108a3d:	c7 44 24 0c cc 74 11 	movl   $0xc01174cc,0xc(%esp)
c0108a44:	c0 
c0108a45:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108a4c:	c0 
c0108a4d:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c0108a54:	00 
c0108a55:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108a5c:	e8 92 7a ff ff       	call   c01004f3 <__panic>
    assert(*ptep & PTE_W);
c0108a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a64:	8b 00                	mov    (%eax),%eax
c0108a66:	83 e0 02             	and    $0x2,%eax
c0108a69:	85 c0                	test   %eax,%eax
c0108a6b:	75 24                	jne    c0108a91 <check_pgdir+0x363>
c0108a6d:	c7 44 24 0c da 74 11 	movl   $0xc01174da,0xc(%esp)
c0108a74:	c0 
c0108a75:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108a7c:	c0 
c0108a7d:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c0108a84:	00 
c0108a85:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108a8c:	e8 62 7a ff ff       	call   c01004f3 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0108a91:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108a96:	8b 00                	mov    (%eax),%eax
c0108a98:	83 e0 04             	and    $0x4,%eax
c0108a9b:	85 c0                	test   %eax,%eax
c0108a9d:	75 24                	jne    c0108ac3 <check_pgdir+0x395>
c0108a9f:	c7 44 24 0c e8 74 11 	movl   $0xc01174e8,0xc(%esp)
c0108aa6:	c0 
c0108aa7:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108aae:	c0 
c0108aaf:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0108ab6:	00 
c0108ab7:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108abe:	e8 30 7a ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p2) == 1);
c0108ac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ac6:	89 04 24             	mov    %eax,(%esp)
c0108ac9:	e8 0b eb ff ff       	call   c01075d9 <page_ref>
c0108ace:	83 f8 01             	cmp    $0x1,%eax
c0108ad1:	74 24                	je     c0108af7 <check_pgdir+0x3c9>
c0108ad3:	c7 44 24 0c fe 74 11 	movl   $0xc01174fe,0xc(%esp)
c0108ada:	c0 
c0108adb:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108ae2:	c0 
c0108ae3:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0108aea:	00 
c0108aeb:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108af2:	e8 fc 79 ff ff       	call   c01004f3 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0108af7:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108afc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108b03:	00 
c0108b04:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0108b0b:	00 
c0108b0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b0f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b13:	89 04 24             	mov    %eax,(%esp)
c0108b16:	e8 0b fa ff ff       	call   c0108526 <page_insert>
c0108b1b:	85 c0                	test   %eax,%eax
c0108b1d:	74 24                	je     c0108b43 <check_pgdir+0x415>
c0108b1f:	c7 44 24 0c 10 75 11 	movl   $0xc0117510,0xc(%esp)
c0108b26:	c0 
c0108b27:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108b2e:	c0 
c0108b2f:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c0108b36:	00 
c0108b37:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108b3e:	e8 b0 79 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p1) == 2);
c0108b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b46:	89 04 24             	mov    %eax,(%esp)
c0108b49:	e8 8b ea ff ff       	call   c01075d9 <page_ref>
c0108b4e:	83 f8 02             	cmp    $0x2,%eax
c0108b51:	74 24                	je     c0108b77 <check_pgdir+0x449>
c0108b53:	c7 44 24 0c 3c 75 11 	movl   $0xc011753c,0xc(%esp)
c0108b5a:	c0 
c0108b5b:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108b62:	c0 
c0108b63:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c0108b6a:	00 
c0108b6b:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108b72:	e8 7c 79 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p2) == 0);
c0108b77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b7a:	89 04 24             	mov    %eax,(%esp)
c0108b7d:	e8 57 ea ff ff       	call   c01075d9 <page_ref>
c0108b82:	85 c0                	test   %eax,%eax
c0108b84:	74 24                	je     c0108baa <check_pgdir+0x47c>
c0108b86:	c7 44 24 0c 4e 75 11 	movl   $0xc011754e,0xc(%esp)
c0108b8d:	c0 
c0108b8e:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108b95:	c0 
c0108b96:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0108b9d:	00 
c0108b9e:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108ba5:	e8 49 79 ff ff       	call   c01004f3 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108baa:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108baf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108bb6:	00 
c0108bb7:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108bbe:	00 
c0108bbf:	89 04 24             	mov    %eax,(%esp)
c0108bc2:	e8 0b f3 ff ff       	call   c0107ed2 <get_pte>
c0108bc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108bca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108bce:	75 24                	jne    c0108bf4 <check_pgdir+0x4c6>
c0108bd0:	c7 44 24 0c 9c 74 11 	movl   $0xc011749c,0xc(%esp)
c0108bd7:	c0 
c0108bd8:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108bdf:	c0 
c0108be0:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0108be7:	00 
c0108be8:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108bef:	e8 ff 78 ff ff       	call   c01004f3 <__panic>
    assert(pte2page(*ptep) == p1);
c0108bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108bf7:	8b 00                	mov    (%eax),%eax
c0108bf9:	89 04 24             	mov    %eax,(%esp)
c0108bfc:	e8 82 e9 ff ff       	call   c0107583 <pte2page>
c0108c01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108c04:	74 24                	je     c0108c2a <check_pgdir+0x4fc>
c0108c06:	c7 44 24 0c 11 74 11 	movl   $0xc0117411,0xc(%esp)
c0108c0d:	c0 
c0108c0e:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108c15:	c0 
c0108c16:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0108c1d:	00 
c0108c1e:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108c25:	e8 c9 78 ff ff       	call   c01004f3 <__panic>
    assert((*ptep & PTE_U) == 0);
c0108c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c2d:	8b 00                	mov    (%eax),%eax
c0108c2f:	83 e0 04             	and    $0x4,%eax
c0108c32:	85 c0                	test   %eax,%eax
c0108c34:	74 24                	je     c0108c5a <check_pgdir+0x52c>
c0108c36:	c7 44 24 0c 60 75 11 	movl   $0xc0117560,0xc(%esp)
c0108c3d:	c0 
c0108c3e:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108c45:	c0 
c0108c46:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0108c4d:	00 
c0108c4e:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108c55:	e8 99 78 ff ff       	call   c01004f3 <__panic>

    page_remove(boot_pgdir, 0x0);
c0108c5a:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108c5f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108c66:	00 
c0108c67:	89 04 24             	mov    %eax,(%esp)
c0108c6a:	e8 73 f8 ff ff       	call   c01084e2 <page_remove>
    assert(page_ref(p1) == 1);
c0108c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c72:	89 04 24             	mov    %eax,(%esp)
c0108c75:	e8 5f e9 ff ff       	call   c01075d9 <page_ref>
c0108c7a:	83 f8 01             	cmp    $0x1,%eax
c0108c7d:	74 24                	je     c0108ca3 <check_pgdir+0x575>
c0108c7f:	c7 44 24 0c 27 74 11 	movl   $0xc0117427,0xc(%esp)
c0108c86:	c0 
c0108c87:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108c8e:	c0 
c0108c8f:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c0108c96:	00 
c0108c97:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108c9e:	e8 50 78 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p2) == 0);
c0108ca3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ca6:	89 04 24             	mov    %eax,(%esp)
c0108ca9:	e8 2b e9 ff ff       	call   c01075d9 <page_ref>
c0108cae:	85 c0                	test   %eax,%eax
c0108cb0:	74 24                	je     c0108cd6 <check_pgdir+0x5a8>
c0108cb2:	c7 44 24 0c 4e 75 11 	movl   $0xc011754e,0xc(%esp)
c0108cb9:	c0 
c0108cba:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108cc1:	c0 
c0108cc2:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0108cc9:	00 
c0108cca:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108cd1:	e8 1d 78 ff ff       	call   c01004f3 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0108cd6:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108cdb:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108ce2:	00 
c0108ce3:	89 04 24             	mov    %eax,(%esp)
c0108ce6:	e8 f7 f7 ff ff       	call   c01084e2 <page_remove>
    assert(page_ref(p1) == 0);
c0108ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cee:	89 04 24             	mov    %eax,(%esp)
c0108cf1:	e8 e3 e8 ff ff       	call   c01075d9 <page_ref>
c0108cf6:	85 c0                	test   %eax,%eax
c0108cf8:	74 24                	je     c0108d1e <check_pgdir+0x5f0>
c0108cfa:	c7 44 24 0c 75 75 11 	movl   $0xc0117575,0xc(%esp)
c0108d01:	c0 
c0108d02:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108d09:	c0 
c0108d0a:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c0108d11:	00 
c0108d12:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108d19:	e8 d5 77 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p2) == 0);
c0108d1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d21:	89 04 24             	mov    %eax,(%esp)
c0108d24:	e8 b0 e8 ff ff       	call   c01075d9 <page_ref>
c0108d29:	85 c0                	test   %eax,%eax
c0108d2b:	74 24                	je     c0108d51 <check_pgdir+0x623>
c0108d2d:	c7 44 24 0c 4e 75 11 	movl   $0xc011754e,0xc(%esp)
c0108d34:	c0 
c0108d35:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108d3c:	c0 
c0108d3d:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c0108d44:	00 
c0108d45:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108d4c:	e8 a2 77 ff ff       	call   c01004f3 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108d51:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108d56:	8b 00                	mov    (%eax),%eax
c0108d58:	89 04 24             	mov    %eax,(%esp)
c0108d5b:	e8 61 e8 ff ff       	call   c01075c1 <pde2page>
c0108d60:	89 04 24             	mov    %eax,(%esp)
c0108d63:	e8 71 e8 ff ff       	call   c01075d9 <page_ref>
c0108d68:	83 f8 01             	cmp    $0x1,%eax
c0108d6b:	74 24                	je     c0108d91 <check_pgdir+0x663>
c0108d6d:	c7 44 24 0c 88 75 11 	movl   $0xc0117588,0xc(%esp)
c0108d74:	c0 
c0108d75:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108d7c:	c0 
c0108d7d:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0108d84:	00 
c0108d85:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108d8c:	e8 62 77 ff ff       	call   c01004f3 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108d91:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108d96:	8b 00                	mov    (%eax),%eax
c0108d98:	89 04 24             	mov    %eax,(%esp)
c0108d9b:	e8 21 e8 ff ff       	call   c01075c1 <pde2page>
c0108da0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108da7:	00 
c0108da8:	89 04 24             	mov    %eax,(%esp)
c0108dab:	e8 99 ea ff ff       	call   c0107849 <free_pages>
    boot_pgdir[0] = 0;
c0108db0:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108db5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108dbb:	c7 04 24 af 75 11 c0 	movl   $0xc01175af,(%esp)
c0108dc2:	e8 d5 75 ff ff       	call   c010039c <cprintf>
}
c0108dc7:	c9                   	leave  
c0108dc8:	c3                   	ret    

c0108dc9 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108dc9:	55                   	push   %ebp
c0108dca:	89 e5                	mov    %esp,%ebp
c0108dcc:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108dcf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108dd6:	e9 ca 00 00 00       	jmp    c0108ea5 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dde:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108de4:	c1 e8 0c             	shr    $0xc,%eax
c0108de7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108dea:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0108def:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108df2:	72 23                	jb     c0108e17 <check_boot_pgdir+0x4e>
c0108df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108df7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108dfb:	c7 44 24 08 7c 71 11 	movl   $0xc011717c,0x8(%esp)
c0108e02:	c0 
c0108e03:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0108e0a:	00 
c0108e0b:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108e12:	e8 dc 76 ff ff       	call   c01004f3 <__panic>
c0108e17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e1a:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108e1f:	89 c2                	mov    %eax,%edx
c0108e21:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108e26:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108e2d:	00 
c0108e2e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e32:	89 04 24             	mov    %eax,(%esp)
c0108e35:	e8 98 f0 ff ff       	call   c0107ed2 <get_pte>
c0108e3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e3d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108e41:	75 24                	jne    c0108e67 <check_boot_pgdir+0x9e>
c0108e43:	c7 44 24 0c cc 75 11 	movl   $0xc01175cc,0xc(%esp)
c0108e4a:	c0 
c0108e4b:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108e52:	c0 
c0108e53:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c0108e5a:	00 
c0108e5b:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108e62:	e8 8c 76 ff ff       	call   c01004f3 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108e67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e6a:	8b 00                	mov    (%eax),%eax
c0108e6c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e71:	89 c2                	mov    %eax,%edx
c0108e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e76:	39 c2                	cmp    %eax,%edx
c0108e78:	74 24                	je     c0108e9e <check_boot_pgdir+0xd5>
c0108e7a:	c7 44 24 0c 09 76 11 	movl   $0xc0117609,0xc(%esp)
c0108e81:	c0 
c0108e82:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108e89:	c0 
c0108e8a:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c0108e91:	00 
c0108e92:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108e99:	e8 55 76 ff ff       	call   c01004f3 <__panic>
    for (i = 0; i < npage; i += PGSIZE) {
c0108e9e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0108ea5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ea8:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c0108ead:	39 c2                	cmp    %eax,%edx
c0108eaf:	0f 82 26 ff ff ff    	jb     c0108ddb <check_boot_pgdir+0x12>
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108eb5:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108eba:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108ebf:	8b 00                	mov    (%eax),%eax
c0108ec1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108ec6:	89 c2                	mov    %eax,%edx
c0108ec8:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108ecd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108ed0:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108ed7:	77 23                	ja     c0108efc <check_boot_pgdir+0x133>
c0108ed9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108edc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108ee0:	c7 44 24 08 20 72 11 	movl   $0xc0117220,0x8(%esp)
c0108ee7:	c0 
c0108ee8:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0108eef:	00 
c0108ef0:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108ef7:	e8 f7 75 ff ff       	call   c01004f3 <__panic>
c0108efc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eff:	05 00 00 00 40       	add    $0x40000000,%eax
c0108f04:	39 c2                	cmp    %eax,%edx
c0108f06:	74 24                	je     c0108f2c <check_boot_pgdir+0x163>
c0108f08:	c7 44 24 0c 20 76 11 	movl   $0xc0117620,0xc(%esp)
c0108f0f:	c0 
c0108f10:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108f17:	c0 
c0108f18:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0108f1f:	00 
c0108f20:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108f27:	e8 c7 75 ff ff       	call   c01004f3 <__panic>

    assert(boot_pgdir[0] == 0);
c0108f2c:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108f31:	8b 00                	mov    (%eax),%eax
c0108f33:	85 c0                	test   %eax,%eax
c0108f35:	74 24                	je     c0108f5b <check_boot_pgdir+0x192>
c0108f37:	c7 44 24 0c 54 76 11 	movl   $0xc0117654,0xc(%esp)
c0108f3e:	c0 
c0108f3f:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108f46:	c0 
c0108f47:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0108f4e:	00 
c0108f4f:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108f56:	e8 98 75 ff ff       	call   c01004f3 <__panic>

    struct Page *p;
    p = alloc_page();
c0108f5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108f62:	e8 77 e8 ff ff       	call   c01077de <alloc_pages>
c0108f67:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108f6a:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108f6f:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0108f76:	00 
c0108f77:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0108f7e:	00 
c0108f7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f82:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f86:	89 04 24             	mov    %eax,(%esp)
c0108f89:	e8 98 f5 ff ff       	call   c0108526 <page_insert>
c0108f8e:	85 c0                	test   %eax,%eax
c0108f90:	74 24                	je     c0108fb6 <check_boot_pgdir+0x1ed>
c0108f92:	c7 44 24 0c 68 76 11 	movl   $0xc0117668,0xc(%esp)
c0108f99:	c0 
c0108f9a:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108fa1:	c0 
c0108fa2:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c0108fa9:	00 
c0108faa:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108fb1:	e8 3d 75 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p) == 1);
c0108fb6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fb9:	89 04 24             	mov    %eax,(%esp)
c0108fbc:	e8 18 e6 ff ff       	call   c01075d9 <page_ref>
c0108fc1:	83 f8 01             	cmp    $0x1,%eax
c0108fc4:	74 24                	je     c0108fea <check_boot_pgdir+0x221>
c0108fc6:	c7 44 24 0c 96 76 11 	movl   $0xc0117696,0xc(%esp)
c0108fcd:	c0 
c0108fce:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0108fd5:	c0 
c0108fd6:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c0108fdd:	00 
c0108fde:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0108fe5:	e8 09 75 ff ff       	call   c01004f3 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108fea:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c0108fef:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0108ff6:	00 
c0108ff7:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0108ffe:	00 
c0108fff:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109002:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109006:	89 04 24             	mov    %eax,(%esp)
c0109009:	e8 18 f5 ff ff       	call   c0108526 <page_insert>
c010900e:	85 c0                	test   %eax,%eax
c0109010:	74 24                	je     c0109036 <check_boot_pgdir+0x26d>
c0109012:	c7 44 24 0c a8 76 11 	movl   $0xc01176a8,0xc(%esp)
c0109019:	c0 
c010901a:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0109021:	c0 
c0109022:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c0109029:	00 
c010902a:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0109031:	e8 bd 74 ff ff       	call   c01004f3 <__panic>
    assert(page_ref(p) == 2);
c0109036:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109039:	89 04 24             	mov    %eax,(%esp)
c010903c:	e8 98 e5 ff ff       	call   c01075d9 <page_ref>
c0109041:	83 f8 02             	cmp    $0x2,%eax
c0109044:	74 24                	je     c010906a <check_boot_pgdir+0x2a1>
c0109046:	c7 44 24 0c df 76 11 	movl   $0xc01176df,0xc(%esp)
c010904d:	c0 
c010904e:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c0109055:	c0 
c0109056:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c010905d:	00 
c010905e:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0109065:	e8 89 74 ff ff       	call   c01004f3 <__panic>

    const char *str = "ucore: Hello world!!";
c010906a:	c7 45 dc f0 76 11 c0 	movl   $0xc01176f0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0109071:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109074:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109078:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010907f:	e8 2a bb 00 00       	call   c0114bae <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0109084:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c010908b:	00 
c010908c:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0109093:	e8 8f bb 00 00       	call   c0114c27 <strcmp>
c0109098:	85 c0                	test   %eax,%eax
c010909a:	74 24                	je     c01090c0 <check_boot_pgdir+0x2f7>
c010909c:	c7 44 24 0c 08 77 11 	movl   $0xc0117708,0xc(%esp)
c01090a3:	c0 
c01090a4:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01090ab:	c0 
c01090ac:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c01090b3:	00 
c01090b4:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c01090bb:	e8 33 74 ff ff       	call   c01004f3 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01090c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090c3:	89 04 24             	mov    %eax,(%esp)
c01090c6:	e8 64 e4 ff ff       	call   c010752f <page2kva>
c01090cb:	05 00 01 00 00       	add    $0x100,%eax
c01090d0:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01090d3:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01090da:	e8 50 ba 00 00       	call   c0114b2f <strlen>
c01090df:	85 c0                	test   %eax,%eax
c01090e1:	74 24                	je     c0109107 <check_boot_pgdir+0x33e>
c01090e3:	c7 44 24 0c 40 77 11 	movl   $0xc0117740,0xc(%esp)
c01090ea:	c0 
c01090eb:	c7 44 24 08 69 72 11 	movl   $0xc0117269,0x8(%esp)
c01090f2:	c0 
c01090f3:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c01090fa:	00 
c01090fb:	c7 04 24 44 72 11 c0 	movl   $0xc0117244,(%esp)
c0109102:	e8 ec 73 ff ff       	call   c01004f3 <__panic>

    free_page(p);
c0109107:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010910e:	00 
c010910f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109112:	89 04 24             	mov    %eax,(%esp)
c0109115:	e8 2f e7 ff ff       	call   c0107849 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c010911a:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c010911f:	8b 00                	mov    (%eax),%eax
c0109121:	89 04 24             	mov    %eax,(%esp)
c0109124:	e8 98 e4 ff ff       	call   c01075c1 <pde2page>
c0109129:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109130:	00 
c0109131:	89 04 24             	mov    %eax,(%esp)
c0109134:	e8 10 e7 ff ff       	call   c0107849 <free_pages>
    boot_pgdir[0] = 0;
c0109139:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c010913e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0109144:	c7 04 24 64 77 11 c0 	movl   $0xc0117764,(%esp)
c010914b:	e8 4c 72 ff ff       	call   c010039c <cprintf>
}
c0109150:	c9                   	leave  
c0109151:	c3                   	ret    

c0109152 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0109152:	55                   	push   %ebp
c0109153:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0109155:	8b 45 08             	mov    0x8(%ebp),%eax
c0109158:	83 e0 04             	and    $0x4,%eax
c010915b:	85 c0                	test   %eax,%eax
c010915d:	74 07                	je     c0109166 <perm2str+0x14>
c010915f:	b8 75 00 00 00       	mov    $0x75,%eax
c0109164:	eb 05                	jmp    c010916b <perm2str+0x19>
c0109166:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010916b:	a2 08 30 15 c0       	mov    %al,0xc0153008
    str[1] = 'r';
c0109170:	c6 05 09 30 15 c0 72 	movb   $0x72,0xc0153009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0109177:	8b 45 08             	mov    0x8(%ebp),%eax
c010917a:	83 e0 02             	and    $0x2,%eax
c010917d:	85 c0                	test   %eax,%eax
c010917f:	74 07                	je     c0109188 <perm2str+0x36>
c0109181:	b8 77 00 00 00       	mov    $0x77,%eax
c0109186:	eb 05                	jmp    c010918d <perm2str+0x3b>
c0109188:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010918d:	a2 0a 30 15 c0       	mov    %al,0xc015300a
    str[3] = '\0';
c0109192:	c6 05 0b 30 15 c0 00 	movb   $0x0,0xc015300b
    return str;
c0109199:	b8 08 30 15 c0       	mov    $0xc0153008,%eax
}
c010919e:	5d                   	pop    %ebp
c010919f:	c3                   	ret    

c01091a0 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c01091a0:	55                   	push   %ebp
c01091a1:	89 e5                	mov    %esp,%ebp
c01091a3:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c01091a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01091a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091ac:	72 0a                	jb     c01091b8 <get_pgtable_items+0x18>
        return 0;
c01091ae:	b8 00 00 00 00       	mov    $0x0,%eax
c01091b3:	e9 9c 00 00 00       	jmp    c0109254 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c01091b8:	eb 04                	jmp    c01091be <get_pgtable_items+0x1e>
        start ++;
c01091ba:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
c01091be:	8b 45 10             	mov    0x10(%ebp),%eax
c01091c1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091c4:	73 18                	jae    c01091de <get_pgtable_items+0x3e>
c01091c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01091c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01091d0:	8b 45 14             	mov    0x14(%ebp),%eax
c01091d3:	01 d0                	add    %edx,%eax
c01091d5:	8b 00                	mov    (%eax),%eax
c01091d7:	83 e0 01             	and    $0x1,%eax
c01091da:	85 c0                	test   %eax,%eax
c01091dc:	74 dc                	je     c01091ba <get_pgtable_items+0x1a>
    }
    if (start < right) {
c01091de:	8b 45 10             	mov    0x10(%ebp),%eax
c01091e1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091e4:	73 69                	jae    c010924f <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c01091e6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01091ea:	74 08                	je     c01091f4 <get_pgtable_items+0x54>
            *left_store = start;
c01091ec:	8b 45 18             	mov    0x18(%ebp),%eax
c01091ef:	8b 55 10             	mov    0x10(%ebp),%edx
c01091f2:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01091f4:	8b 45 10             	mov    0x10(%ebp),%eax
c01091f7:	8d 50 01             	lea    0x1(%eax),%edx
c01091fa:	89 55 10             	mov    %edx,0x10(%ebp)
c01091fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109204:	8b 45 14             	mov    0x14(%ebp),%eax
c0109207:	01 d0                	add    %edx,%eax
c0109209:	8b 00                	mov    (%eax),%eax
c010920b:	83 e0 07             	and    $0x7,%eax
c010920e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0109211:	eb 04                	jmp    c0109217 <get_pgtable_items+0x77>
            start ++;
c0109213:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0109217:	8b 45 10             	mov    0x10(%ebp),%eax
c010921a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010921d:	73 1d                	jae    c010923c <get_pgtable_items+0x9c>
c010921f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109222:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0109229:	8b 45 14             	mov    0x14(%ebp),%eax
c010922c:	01 d0                	add    %edx,%eax
c010922e:	8b 00                	mov    (%eax),%eax
c0109230:	83 e0 07             	and    $0x7,%eax
c0109233:	89 c2                	mov    %eax,%edx
c0109235:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109238:	39 c2                	cmp    %eax,%edx
c010923a:	74 d7                	je     c0109213 <get_pgtable_items+0x73>
        }
        if (right_store != NULL) {
c010923c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0109240:	74 08                	je     c010924a <get_pgtable_items+0xaa>
            *right_store = start;
c0109242:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0109245:	8b 55 10             	mov    0x10(%ebp),%edx
c0109248:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c010924a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010924d:	eb 05                	jmp    c0109254 <get_pgtable_items+0xb4>
    }
    return 0;
c010924f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109254:	c9                   	leave  
c0109255:	c3                   	ret    

c0109256 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0109256:	55                   	push   %ebp
c0109257:	89 e5                	mov    %esp,%ebp
c0109259:	57                   	push   %edi
c010925a:	56                   	push   %esi
c010925b:	53                   	push   %ebx
c010925c:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c010925f:	c7 04 24 84 77 11 c0 	movl   $0xc0117784,(%esp)
c0109266:	e8 31 71 ff ff       	call   c010039c <cprintf>
    size_t left, right = 0, perm;
c010926b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0109272:	e9 fa 00 00 00       	jmp    c0109371 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0109277:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010927a:	89 04 24             	mov    %eax,(%esp)
c010927d:	e8 d0 fe ff ff       	call   c0109152 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0109282:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0109285:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109288:	29 d1                	sub    %edx,%ecx
c010928a:	89 ca                	mov    %ecx,%edx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010928c:	89 d6                	mov    %edx,%esi
c010928e:	c1 e6 16             	shl    $0x16,%esi
c0109291:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109294:	89 d3                	mov    %edx,%ebx
c0109296:	c1 e3 16             	shl    $0x16,%ebx
c0109299:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010929c:	89 d1                	mov    %edx,%ecx
c010929e:	c1 e1 16             	shl    $0x16,%ecx
c01092a1:	8b 7d dc             	mov    -0x24(%ebp),%edi
c01092a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01092a7:	29 d7                	sub    %edx,%edi
c01092a9:	89 fa                	mov    %edi,%edx
c01092ab:	89 44 24 14          	mov    %eax,0x14(%esp)
c01092af:	89 74 24 10          	mov    %esi,0x10(%esp)
c01092b3:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01092b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01092bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092bf:	c7 04 24 b5 77 11 c0 	movl   $0xc01177b5,(%esp)
c01092c6:	e8 d1 70 ff ff       	call   c010039c <cprintf>
        size_t l, r = left * NPTEENTRY;
c01092cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01092ce:	c1 e0 0a             	shl    $0xa,%eax
c01092d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01092d4:	eb 54                	jmp    c010932a <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01092d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092d9:	89 04 24             	mov    %eax,(%esp)
c01092dc:	e8 71 fe ff ff       	call   c0109152 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01092e1:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01092e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01092e7:	29 d1                	sub    %edx,%ecx
c01092e9:	89 ca                	mov    %ecx,%edx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01092eb:	89 d6                	mov    %edx,%esi
c01092ed:	c1 e6 0c             	shl    $0xc,%esi
c01092f0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01092f3:	89 d3                	mov    %edx,%ebx
c01092f5:	c1 e3 0c             	shl    $0xc,%ebx
c01092f8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01092fb:	c1 e2 0c             	shl    $0xc,%edx
c01092fe:	89 d1                	mov    %edx,%ecx
c0109300:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0109303:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0109306:	29 d7                	sub    %edx,%edi
c0109308:	89 fa                	mov    %edi,%edx
c010930a:	89 44 24 14          	mov    %eax,0x14(%esp)
c010930e:	89 74 24 10          	mov    %esi,0x10(%esp)
c0109312:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0109316:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010931a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010931e:	c7 04 24 d4 77 11 c0 	movl   $0xc01177d4,(%esp)
c0109325:	e8 72 70 ff ff       	call   c010039c <cprintf>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010932a:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c010932f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109332:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0109335:	89 ce                	mov    %ecx,%esi
c0109337:	c1 e6 0a             	shl    $0xa,%esi
c010933a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010933d:	89 cb                	mov    %ecx,%ebx
c010933f:	c1 e3 0a             	shl    $0xa,%ebx
c0109342:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0109345:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0109349:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c010934c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0109350:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109354:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109358:	89 74 24 04          	mov    %esi,0x4(%esp)
c010935c:	89 1c 24             	mov    %ebx,(%esp)
c010935f:	e8 3c fe ff ff       	call   c01091a0 <get_pgtable_items>
c0109364:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109367:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010936b:	0f 85 65 ff ff ff    	jne    c01092d6 <print_pgdir+0x80>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0109371:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0109376:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109379:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c010937c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0109380:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0109383:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0109387:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010938b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010938f:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0109396:	00 
c0109397:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010939e:	e8 fd fd ff ff       	call   c01091a0 <get_pgtable_items>
c01093a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01093a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01093aa:	0f 85 c7 fe ff ff    	jne    c0109277 <print_pgdir+0x21>
        }
    }
    cprintf("--------------------- END ---------------------\n");
c01093b0:	c7 04 24 f8 77 11 c0 	movl   $0xc01177f8,(%esp)
c01093b7:	e8 e0 6f ff ff       	call   c010039c <cprintf>
}
c01093bc:	83 c4 4c             	add    $0x4c,%esp
c01093bf:	5b                   	pop    %ebx
c01093c0:	5e                   	pop    %esi
c01093c1:	5f                   	pop    %edi
c01093c2:	5d                   	pop    %ebp
c01093c3:	c3                   	ret    

c01093c4 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c01093c4:	55                   	push   %ebp
c01093c5:	89 e5                	mov    %esp,%ebp
c01093c7:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c01093ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01093cd:	8b 04 85 20 62 15 c0 	mov    -0x3fea9de0(,%eax,4),%eax
c01093d4:	83 f8 01             	cmp    $0x1,%eax
c01093d7:	0f 85 85 00 00 00    	jne    c0109462 <phi_test_sema+0x9e>
c01093dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e0:	8d 48 04             	lea    0x4(%eax),%ecx
c01093e3:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093e8:	89 c8                	mov    %ecx,%eax
c01093ea:	f7 ea                	imul   %edx
c01093ec:	d1 fa                	sar    %edx
c01093ee:	89 c8                	mov    %ecx,%eax
c01093f0:	c1 f8 1f             	sar    $0x1f,%eax
c01093f3:	29 c2                	sub    %eax,%edx
c01093f5:	89 d0                	mov    %edx,%eax
c01093f7:	c1 e0 02             	shl    $0x2,%eax
c01093fa:	01 d0                	add    %edx,%eax
c01093fc:	29 c1                	sub    %eax,%ecx
c01093fe:	89 ca                	mov    %ecx,%edx
c0109400:	8b 04 95 20 62 15 c0 	mov    -0x3fea9de0(,%edx,4),%eax
c0109407:	83 f8 02             	cmp    $0x2,%eax
c010940a:	74 56                	je     c0109462 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c010940c:	8b 45 08             	mov    0x8(%ebp),%eax
c010940f:	8d 48 01             	lea    0x1(%eax),%ecx
c0109412:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109417:	89 c8                	mov    %ecx,%eax
c0109419:	f7 ea                	imul   %edx
c010941b:	d1 fa                	sar    %edx
c010941d:	89 c8                	mov    %ecx,%eax
c010941f:	c1 f8 1f             	sar    $0x1f,%eax
c0109422:	29 c2                	sub    %eax,%edx
c0109424:	89 d0                	mov    %edx,%eax
c0109426:	c1 e0 02             	shl    $0x2,%eax
c0109429:	01 d0                	add    %edx,%eax
c010942b:	29 c1                	sub    %eax,%ecx
c010942d:	89 ca                	mov    %ecx,%edx
c010942f:	8b 04 95 20 62 15 c0 	mov    -0x3fea9de0(,%edx,4),%eax
c0109436:	83 f8 02             	cmp    $0x2,%eax
c0109439:	74 27                	je     c0109462 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c010943b:	8b 45 08             	mov    0x8(%ebp),%eax
c010943e:	c7 04 85 20 62 15 c0 	movl   $0x2,-0x3fea9de0(,%eax,4)
c0109445:	02 00 00 00 
        up(&s[i]);
c0109449:	8b 55 08             	mov    0x8(%ebp),%edx
c010944c:	89 d0                	mov    %edx,%eax
c010944e:	01 c0                	add    %eax,%eax
c0109450:	01 d0                	add    %edx,%eax
c0109452:	c1 e0 02             	shl    $0x2,%eax
c0109455:	05 c0 62 15 c0       	add    $0xc01562c0,%eax
c010945a:	89 04 24             	mov    %eax,(%esp)
c010945d:	e8 0d 0c 00 00       	call   c010a06f <up>
    }
}
c0109462:	c9                   	leave  
c0109463:	c3                   	ret    

c0109464 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109464:	55                   	push   %ebp
c0109465:	89 e5                	mov    %esp,%ebp
c0109467:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010946a:	c7 04 24 48 62 15 c0 	movl   $0xc0156248,(%esp)
c0109471:	e8 14 0c 00 00       	call   c010a08a <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109476:	8b 45 08             	mov    0x8(%ebp),%eax
c0109479:	c7 04 85 20 62 15 c0 	movl   $0x1,-0x3fea9de0(,%eax,4)
c0109480:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109484:	8b 45 08             	mov    0x8(%ebp),%eax
c0109487:	89 04 24             	mov    %eax,(%esp)
c010948a:	e8 35 ff ff ff       	call   c01093c4 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010948f:	c7 04 24 48 62 15 c0 	movl   $0xc0156248,(%esp)
c0109496:	e8 d4 0b 00 00       	call   c010a06f <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010949b:	8b 55 08             	mov    0x8(%ebp),%edx
c010949e:	89 d0                	mov    %edx,%eax
c01094a0:	01 c0                	add    %eax,%eax
c01094a2:	01 d0                	add    %edx,%eax
c01094a4:	c1 e0 02             	shl    $0x2,%eax
c01094a7:	05 c0 62 15 c0       	add    $0xc01562c0,%eax
c01094ac:	89 04 24             	mov    %eax,(%esp)
c01094af:	e8 d6 0b 00 00       	call   c010a08a <down>
}
c01094b4:	c9                   	leave  
c01094b5:	c3                   	ret    

c01094b6 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01094b6:	55                   	push   %ebp
c01094b7:	89 e5                	mov    %esp,%ebp
c01094b9:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01094bc:	c7 04 24 48 62 15 c0 	movl   $0xc0156248,(%esp)
c01094c3:	e8 c2 0b 00 00       	call   c010a08a <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c01094c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094cb:	c7 04 85 20 62 15 c0 	movl   $0x0,-0x3fea9de0(,%eax,4)
c01094d2:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01094d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d9:	8d 48 04             	lea    0x4(%eax),%ecx
c01094dc:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094e1:	89 c8                	mov    %ecx,%eax
c01094e3:	f7 ea                	imul   %edx
c01094e5:	d1 fa                	sar    %edx
c01094e7:	89 c8                	mov    %ecx,%eax
c01094e9:	c1 f8 1f             	sar    $0x1f,%eax
c01094ec:	29 c2                	sub    %eax,%edx
c01094ee:	89 d0                	mov    %edx,%eax
c01094f0:	c1 e0 02             	shl    $0x2,%eax
c01094f3:	01 d0                	add    %edx,%eax
c01094f5:	29 c1                	sub    %eax,%ecx
c01094f7:	89 ca                	mov    %ecx,%edx
c01094f9:	89 14 24             	mov    %edx,(%esp)
c01094fc:	e8 c3 fe ff ff       	call   c01093c4 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109501:	8b 45 08             	mov    0x8(%ebp),%eax
c0109504:	8d 48 01             	lea    0x1(%eax),%ecx
c0109507:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010950c:	89 c8                	mov    %ecx,%eax
c010950e:	f7 ea                	imul   %edx
c0109510:	d1 fa                	sar    %edx
c0109512:	89 c8                	mov    %ecx,%eax
c0109514:	c1 f8 1f             	sar    $0x1f,%eax
c0109517:	29 c2                	sub    %eax,%edx
c0109519:	89 d0                	mov    %edx,%eax
c010951b:	c1 e0 02             	shl    $0x2,%eax
c010951e:	01 d0                	add    %edx,%eax
c0109520:	29 c1                	sub    %eax,%ecx
c0109522:	89 ca                	mov    %ecx,%edx
c0109524:	89 14 24             	mov    %edx,(%esp)
c0109527:	e8 98 fe ff ff       	call   c01093c4 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010952c:	c7 04 24 48 62 15 c0 	movl   $0xc0156248,(%esp)
c0109533:	e8 37 0b 00 00       	call   c010a06f <up>
}
c0109538:	c9                   	leave  
c0109539:	c3                   	ret    

c010953a <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c010953a:	55                   	push   %ebp
c010953b:	89 e5                	mov    %esp,%ebp
c010953d:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109540:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109547:	8b 45 08             	mov    0x8(%ebp),%eax
c010954a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c010954d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109550:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109554:	c7 04 24 2c 78 11 c0 	movl   $0xc011782c,(%esp)
c010955b:	e8 3c 6e ff ff       	call   c010039c <cprintf>
    while(iter++<TIMES)
c0109560:	eb 62                	jmp    c01095c4 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109562:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109565:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010956c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109570:	c7 04 24 4c 78 11 c0 	movl   $0xc011784c,(%esp)
c0109577:	e8 20 6e ff ff       	call   c010039c <cprintf>
        do_sleep(SLEEP_TIME);
c010957c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109583:	e8 5d 4c 00 00       	call   c010e1e5 <do_sleep>
        phi_take_forks_sema(i); 
c0109588:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010958b:	89 04 24             	mov    %eax,(%esp)
c010958e:	e8 d1 fe ff ff       	call   c0109464 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109593:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109596:	89 44 24 08          	mov    %eax,0x8(%esp)
c010959a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010959d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095a1:	c7 04 24 7c 78 11 c0 	movl   $0xc011787c,(%esp)
c01095a8:	e8 ef 6d ff ff       	call   c010039c <cprintf>
        do_sleep(SLEEP_TIME);
c01095ad:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01095b4:	e8 2c 4c 00 00       	call   c010e1e5 <do_sleep>
        phi_put_forks_sema(i); 
c01095b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095bc:	89 04 24             	mov    %eax,(%esp)
c01095bf:	e8 f2 fe ff ff       	call   c01094b6 <phi_put_forks_sema>
    while(iter++<TIMES)
c01095c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c7:	8d 50 01             	lea    0x1(%eax),%edx
c01095ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01095cd:	83 f8 03             	cmp    $0x3,%eax
c01095d0:	7e 90                	jle    c0109562 <philosopher_using_semaphore+0x28>
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01095d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095d9:	c7 04 24 a7 78 11 c0 	movl   $0xc01178a7,(%esp)
c01095e0:	e8 b7 6d ff ff       	call   c010039c <cprintf>
    return 0;    
c01095e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01095ea:	c9                   	leave  
c01095eb:	c3                   	ret    

c01095ec <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01095ec:	55                   	push   %ebp
c01095ed:	89 e5                	mov    %esp,%ebp
c01095ef:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01095f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095f5:	8b 04 85 80 62 15 c0 	mov    -0x3fea9d80(,%eax,4),%eax
c01095fc:	83 f8 01             	cmp    $0x1,%eax
c01095ff:	0f 85 b5 00 00 00    	jne    c01096ba <phi_test_condvar+0xce>
c0109605:	8b 45 08             	mov    0x8(%ebp),%eax
c0109608:	8d 48 04             	lea    0x4(%eax),%ecx
c010960b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109610:	89 c8                	mov    %ecx,%eax
c0109612:	f7 ea                	imul   %edx
c0109614:	d1 fa                	sar    %edx
c0109616:	89 c8                	mov    %ecx,%eax
c0109618:	c1 f8 1f             	sar    $0x1f,%eax
c010961b:	29 c2                	sub    %eax,%edx
c010961d:	89 d0                	mov    %edx,%eax
c010961f:	c1 e0 02             	shl    $0x2,%eax
c0109622:	01 d0                	add    %edx,%eax
c0109624:	29 c1                	sub    %eax,%ecx
c0109626:	89 ca                	mov    %ecx,%edx
c0109628:	8b 04 95 80 62 15 c0 	mov    -0x3fea9d80(,%edx,4),%eax
c010962f:	83 f8 02             	cmp    $0x2,%eax
c0109632:	0f 84 82 00 00 00    	je     c01096ba <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c0109638:	8b 45 08             	mov    0x8(%ebp),%eax
c010963b:	8d 48 01             	lea    0x1(%eax),%ecx
c010963e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109643:	89 c8                	mov    %ecx,%eax
c0109645:	f7 ea                	imul   %edx
c0109647:	d1 fa                	sar    %edx
c0109649:	89 c8                	mov    %ecx,%eax
c010964b:	c1 f8 1f             	sar    $0x1f,%eax
c010964e:	29 c2                	sub    %eax,%edx
c0109650:	89 d0                	mov    %edx,%eax
c0109652:	c1 e0 02             	shl    $0x2,%eax
c0109655:	01 d0                	add    %edx,%eax
c0109657:	29 c1                	sub    %eax,%ecx
c0109659:	89 ca                	mov    %ecx,%edx
c010965b:	8b 04 95 80 62 15 c0 	mov    -0x3fea9d80(,%edx,4),%eax
c0109662:	83 f8 02             	cmp    $0x2,%eax
c0109665:	74 53                	je     c01096ba <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0109667:	8b 45 08             	mov    0x8(%ebp),%eax
c010966a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010966e:	c7 04 24 c4 78 11 c0 	movl   $0xc01178c4,(%esp)
c0109675:	e8 22 6d ff ff       	call   c010039c <cprintf>
        state_condvar[i] = EATING ;
c010967a:	8b 45 08             	mov    0x8(%ebp),%eax
c010967d:	c7 04 85 80 62 15 c0 	movl   $0x2,-0x3fea9d80(,%eax,4)
c0109684:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109688:	8b 45 08             	mov    0x8(%ebp),%eax
c010968b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010968f:	c7 04 24 f8 78 11 c0 	movl   $0xc01178f8,(%esp)
c0109696:	e8 01 6d ff ff       	call   c010039c <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010969b:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c01096a0:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01096a3:	8b 55 08             	mov    0x8(%ebp),%edx
c01096a6:	89 d0                	mov    %edx,%eax
c01096a8:	c1 e0 02             	shl    $0x2,%eax
c01096ab:	01 d0                	add    %edx,%eax
c01096ad:	c1 e0 02             	shl    $0x2,%eax
c01096b0:	01 c8                	add    %ecx,%eax
c01096b2:	89 04 24             	mov    %eax,(%esp)
c01096b5:	e8 84 0b 00 00       	call   c010a23e <cond_signal>
    }
}
c01096ba:	c9                   	leave  
c01096bb:	c3                   	ret    

c01096bc <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c01096bc:	55                   	push   %ebp
c01096bd:	89 e5                	mov    %esp,%ebp
c01096bf:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01096c2:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c01096c7:	89 04 24             	mov    %eax,(%esp)
c01096ca:	e8 bb 09 00 00       	call   c010a08a <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c01096cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01096d2:	c7 04 85 80 62 15 c0 	movl   $0x1,-0x3fea9d80(,%eax,4)
c01096d9:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c01096dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e0:	89 04 24             	mov    %eax,(%esp)
c01096e3:	e8 04 ff ff ff       	call   c01095ec <phi_test_condvar>
      if (state_condvar[i] != EATING) {
c01096e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01096eb:	8b 04 85 80 62 15 c0 	mov    -0x3fea9d80(,%eax,4),%eax
c01096f2:	83 f8 02             	cmp    $0x2,%eax
c01096f5:	74 32                	je     c0109729 <phi_take_forks_condvar+0x6d>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c01096f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01096fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096fe:	c7 04 24 20 79 11 c0 	movl   $0xc0117920,(%esp)
c0109705:	e8 92 6c ff ff       	call   c010039c <cprintf>
          cond_wait(&mtp->cv[i]);
c010970a:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c010970f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109712:	8b 55 08             	mov    0x8(%ebp),%edx
c0109715:	89 d0                	mov    %edx,%eax
c0109717:	c1 e0 02             	shl    $0x2,%eax
c010971a:	01 d0                	add    %edx,%eax
c010971c:	c1 e0 02             	shl    $0x2,%eax
c010971f:	01 c8                	add    %ecx,%eax
c0109721:	89 04 24             	mov    %eax,(%esp)
c0109724:	e8 b5 0b 00 00       	call   c010a2de <cond_wait>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109729:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c010972e:	8b 40 18             	mov    0x18(%eax),%eax
c0109731:	85 c0                	test   %eax,%eax
c0109733:	7e 12                	jle    c0109747 <phi_take_forks_condvar+0x8b>
         up(&(mtp->next));
c0109735:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c010973a:	83 c0 0c             	add    $0xc,%eax
c010973d:	89 04 24             	mov    %eax,(%esp)
c0109740:	e8 2a 09 00 00       	call   c010a06f <up>
c0109745:	eb 0d                	jmp    c0109754 <phi_take_forks_condvar+0x98>
      else
         up(&(mtp->mutex));
c0109747:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c010974c:	89 04 24             	mov    %eax,(%esp)
c010974f:	e8 1b 09 00 00       	call   c010a06f <up>
}
c0109754:	c9                   	leave  
c0109755:	c3                   	ret    

c0109756 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109756:	55                   	push   %ebp
c0109757:	89 e5                	mov    %esp,%ebp
c0109759:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010975c:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c0109761:	89 04 24             	mov    %eax,(%esp)
c0109764:	e8 21 09 00 00       	call   c010a08a <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c0109769:	8b 45 08             	mov    0x8(%ebp),%eax
c010976c:	c7 04 85 80 62 15 c0 	movl   $0x0,-0x3fea9d80(,%eax,4)
c0109773:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c0109777:	8b 45 08             	mov    0x8(%ebp),%eax
c010977a:	8d 48 04             	lea    0x4(%eax),%ecx
c010977d:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109782:	89 c8                	mov    %ecx,%eax
c0109784:	f7 ea                	imul   %edx
c0109786:	d1 fa                	sar    %edx
c0109788:	89 c8                	mov    %ecx,%eax
c010978a:	c1 f8 1f             	sar    $0x1f,%eax
c010978d:	29 c2                	sub    %eax,%edx
c010978f:	89 d0                	mov    %edx,%eax
c0109791:	c1 e0 02             	shl    $0x2,%eax
c0109794:	01 d0                	add    %edx,%eax
c0109796:	29 c1                	sub    %eax,%ecx
c0109798:	89 ca                	mov    %ecx,%edx
c010979a:	89 14 24             	mov    %edx,(%esp)
c010979d:	e8 4a fe ff ff       	call   c01095ec <phi_test_condvar>
      phi_test_condvar(RIGHT);
c01097a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a5:	8d 48 01             	lea    0x1(%eax),%ecx
c01097a8:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01097ad:	89 c8                	mov    %ecx,%eax
c01097af:	f7 ea                	imul   %edx
c01097b1:	d1 fa                	sar    %edx
c01097b3:	89 c8                	mov    %ecx,%eax
c01097b5:	c1 f8 1f             	sar    $0x1f,%eax
c01097b8:	29 c2                	sub    %eax,%edx
c01097ba:	89 d0                	mov    %edx,%eax
c01097bc:	c1 e0 02             	shl    $0x2,%eax
c01097bf:	01 d0                	add    %edx,%eax
c01097c1:	29 c1                	sub    %eax,%ecx
c01097c3:	89 ca                	mov    %ecx,%edx
c01097c5:	89 14 24             	mov    %edx,(%esp)
c01097c8:	e8 1f fe ff ff       	call   c01095ec <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01097cd:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c01097d2:	8b 40 18             	mov    0x18(%eax),%eax
c01097d5:	85 c0                	test   %eax,%eax
c01097d7:	7e 12                	jle    c01097eb <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c01097d9:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c01097de:	83 c0 0c             	add    $0xc,%eax
c01097e1:	89 04 24             	mov    %eax,(%esp)
c01097e4:	e8 86 08 00 00       	call   c010a06f <up>
c01097e9:	eb 0d                	jmp    c01097f8 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c01097eb:	a1 78 fa 14 c0       	mov    0xc014fa78,%eax
c01097f0:	89 04 24             	mov    %eax,(%esp)
c01097f3:	e8 77 08 00 00       	call   c010a06f <up>
}
c01097f8:	c9                   	leave  
c01097f9:	c3                   	ret    

c01097fa <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01097fa:	55                   	push   %ebp
c01097fb:	89 e5                	mov    %esp,%ebp
c01097fd:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109800:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109807:	8b 45 08             	mov    0x8(%ebp),%eax
c010980a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010980d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109810:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109814:	c7 04 24 5c 79 11 c0 	movl   $0xc011795c,(%esp)
c010981b:	e8 7c 6b ff ff       	call   c010039c <cprintf>
    while(iter++<TIMES)
c0109820:	eb 62                	jmp    c0109884 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109822:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109825:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010982c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109830:	c7 04 24 7c 79 11 c0 	movl   $0xc011797c,(%esp)
c0109837:	e8 60 6b ff ff       	call   c010039c <cprintf>
        do_sleep(SLEEP_TIME);
c010983c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109843:	e8 9d 49 00 00       	call   c010e1e5 <do_sleep>
        phi_take_forks_condvar(i); 
c0109848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010984b:	89 04 24             	mov    %eax,(%esp)
c010984e:	e8 69 fe ff ff       	call   c01096bc <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109853:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109856:	89 44 24 08          	mov    %eax,0x8(%esp)
c010985a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010985d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109861:	c7 04 24 ac 79 11 c0 	movl   $0xc01179ac,(%esp)
c0109868:	e8 2f 6b ff ff       	call   c010039c <cprintf>
        do_sleep(SLEEP_TIME);
c010986d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109874:	e8 6c 49 00 00       	call   c010e1e5 <do_sleep>
        phi_put_forks_condvar(i); 
c0109879:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010987c:	89 04 24             	mov    %eax,(%esp)
c010987f:	e8 d2 fe ff ff       	call   c0109756 <phi_put_forks_condvar>
    while(iter++<TIMES)
c0109884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109887:	8d 50 01             	lea    0x1(%eax),%edx
c010988a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010988d:	83 f8 03             	cmp    $0x3,%eax
c0109890:	7e 90                	jle    c0109822 <philosopher_using_condvar+0x28>
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109892:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109895:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109899:	c7 04 24 dc 79 11 c0 	movl   $0xc01179dc,(%esp)
c01098a0:	e8 f7 6a ff ff       	call   c010039c <cprintf>
    return 0;    
c01098a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098aa:	c9                   	leave  
c01098ab:	c3                   	ret    

c01098ac <check_sync>:

void check_sync(void){
c01098ac:	55                   	push   %ebp
c01098ad:	89 e5                	mov    %esp,%ebp
c01098af:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01098b2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01098b9:	00 
c01098ba:	c7 04 24 48 62 15 c0 	movl   $0xc0156248,(%esp)
c01098c1:	e8 36 06 00 00       	call   c0109efc <sem_init>
    for(i=0;i<N;i++){
c01098c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01098cd:	e9 94 00 00 00       	jmp    c0109966 <check_sync+0xba>
        sem_init(&s[i], 0);
c01098d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098d5:	89 d0                	mov    %edx,%eax
c01098d7:	01 c0                	add    %eax,%eax
c01098d9:	01 d0                	add    %edx,%eax
c01098db:	c1 e0 02             	shl    $0x2,%eax
c01098de:	05 c0 62 15 c0       	add    $0xc01562c0,%eax
c01098e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01098ea:	00 
c01098eb:	89 04 24             	mov    %eax,(%esp)
c01098ee:	e8 09 06 00 00       	call   c0109efc <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01098f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01098fd:	00 
c01098fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109902:	c7 04 24 3a 95 10 c0 	movl   $0xc010953a,(%esp)
c0109909:	e8 35 2e 00 00       	call   c010c743 <kernel_thread>
c010990e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109911:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109915:	7f 1c                	jg     c0109933 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109917:	c7 44 24 08 fc 79 11 	movl   $0xc01179fc,0x8(%esp)
c010991e:	c0 
c010991f:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c0109926:	00 
c0109927:	c7 04 24 2e 7a 11 c0 	movl   $0xc0117a2e,(%esp)
c010992e:	e8 c0 6b ff ff       	call   c01004f3 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0109933:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109936:	89 04 24             	mov    %eax,(%esp)
c0109939:	e8 91 2d 00 00       	call   c010c6cf <find_proc>
c010993e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109941:	89 04 95 94 62 15 c0 	mov    %eax,-0x3fea9d6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010994b:	8b 04 85 94 62 15 c0 	mov    -0x3fea9d6c(,%eax,4),%eax
c0109952:	c7 44 24 04 45 7a 11 	movl   $0xc0117a45,0x4(%esp)
c0109959:	c0 
c010995a:	89 04 24             	mov    %eax,(%esp)
c010995d:	e8 54 29 00 00       	call   c010c2b6 <set_proc_name>
    for(i=0;i<N;i++){
c0109962:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109966:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010996a:	0f 8e 62 ff ff ff    	jle    c01098d2 <check_sync+0x26>
    }

    //check condition variable
    monitor_init(&mt, N);
c0109970:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109977:	00 
c0109978:	c7 04 24 60 62 15 c0 	movl   $0xc0156260,(%esp)
c010997f:	e8 90 07 00 00       	call   c010a114 <monitor_init>
    for(i=0;i<N;i++){
c0109984:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010998b:	e9 81 00 00 00       	jmp    c0109a11 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109993:	c7 04 85 80 62 15 c0 	movl   $0x0,-0x3fea9d80(,%eax,4)
c010999a:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c010999e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099a1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01099a8:	00 
c01099a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099ad:	c7 04 24 fa 97 10 c0 	movl   $0xc01097fa,(%esp)
c01099b4:	e8 8a 2d 00 00       	call   c010c743 <kernel_thread>
c01099b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01099bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01099c0:	7f 1c                	jg     c01099de <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01099c2:	c7 44 24 08 5c 7a 11 	movl   $0xc0117a5c,0x8(%esp)
c01099c9:	c0 
c01099ca:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c01099d1:	00 
c01099d2:	c7 04 24 2e 7a 11 c0 	movl   $0xc0117a2e,(%esp)
c01099d9:	e8 15 6b ff ff       	call   c01004f3 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c01099de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099e1:	89 04 24             	mov    %eax,(%esp)
c01099e4:	e8 e6 2c 00 00       	call   c010c6cf <find_proc>
c01099e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099ec:	89 04 95 34 62 15 c0 	mov    %eax,-0x3fea9dcc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01099f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f6:	8b 04 85 34 62 15 c0 	mov    -0x3fea9dcc(,%eax,4),%eax
c01099fd:	c7 44 24 04 8c 7a 11 	movl   $0xc0117a8c,0x4(%esp)
c0109a04:	c0 
c0109a05:	89 04 24             	mov    %eax,(%esp)
c0109a08:	e8 a9 28 00 00       	call   c010c2b6 <set_proc_name>
    for(i=0;i<N;i++){
c0109a0d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109a11:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109a15:	0f 8e 75 ff ff ff    	jle    c0109990 <check_sync+0xe4>
    }
}
c0109a1b:	c9                   	leave  
c0109a1c:	c3                   	ret    

c0109a1d <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109a1d:	55                   	push   %ebp
c0109a1e:	89 e5                	mov    %esp,%ebp
c0109a20:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a26:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a29:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2e:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a38:	83 c0 0c             	add    $0xc,%eax
c0109a3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0109a3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a41:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a44:	89 50 04             	mov    %edx,0x4(%eax)
c0109a47:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a4a:	8b 50 04             	mov    0x4(%eax),%edx
c0109a4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a50:	89 10                	mov    %edx,(%eax)
}
c0109a52:	c9                   	leave  
c0109a53:	c3                   	ret    

c0109a54 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109a54:	55                   	push   %ebp
c0109a55:	89 e5                	mov    %esp,%ebp
c0109a57:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109a5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a5d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109a60:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a63:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a66:	89 50 04             	mov    %edx,0x4(%eax)
c0109a69:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a6c:	8b 50 04             	mov    0x4(%eax),%edx
c0109a6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a72:	89 10                	mov    %edx,(%eax)
}
c0109a74:	c9                   	leave  
c0109a75:	c3                   	ret    

c0109a76 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109a76:	55                   	push   %ebp
c0109a77:	89 e5                	mov    %esp,%ebp
c0109a79:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a7f:	83 c0 0c             	add    $0xc,%eax
c0109a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c0109a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a88:	8b 40 04             	mov    0x4(%eax),%eax
c0109a8b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109a8e:	0f 94 c0             	sete   %al
c0109a91:	0f b6 c0             	movzbl %al,%eax
c0109a94:	85 c0                	test   %eax,%eax
c0109a96:	74 09                	je     c0109aa1 <wait_queue_add+0x2b>
c0109a98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a9b:	8b 00                	mov    (%eax),%eax
c0109a9d:	85 c0                	test   %eax,%eax
c0109a9f:	75 24                	jne    c0109ac5 <wait_queue_add+0x4f>
c0109aa1:	c7 44 24 0c a8 7a 11 	movl   $0xc0117aa8,0xc(%esp)
c0109aa8:	c0 
c0109aa9:	c7 44 24 08 dd 7a 11 	movl   $0xc0117add,0x8(%esp)
c0109ab0:	c0 
c0109ab1:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109ab8:	00 
c0109ab9:	c7 04 24 f2 7a 11 c0 	movl   $0xc0117af2,(%esp)
c0109ac0:	e8 2e 6a ff ff       	call   c01004f3 <__panic>
    wait->wait_queue = queue;
c0109ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ac8:	8b 55 08             	mov    0x8(%ebp),%edx
c0109acb:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109ace:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad1:	8d 50 0c             	lea    0xc(%eax),%edx
c0109ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ada:	89 55 ec             	mov    %edx,-0x14(%ebp)
    __list_add(elm, listelm->prev, listelm);
c0109add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ae0:	8b 00                	mov    (%eax),%eax
c0109ae2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ae5:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109ae8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109aee:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next->prev = elm;
c0109af1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109af4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109af7:	89 10                	mov    %edx,(%eax)
c0109af9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109afc:	8b 10                	mov    (%eax),%edx
c0109afe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b01:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109b04:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b07:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109b0a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109b0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b13:	89 10                	mov    %edx,(%eax)
}
c0109b15:	c9                   	leave  
c0109b16:	c3                   	ret    

c0109b17 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109b17:	55                   	push   %ebp
c0109b18:	89 e5                	mov    %esp,%ebp
c0109b1a:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b20:	83 c0 0c             	add    $0xc,%eax
c0109b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c0109b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b29:	8b 40 04             	mov    0x4(%eax),%eax
c0109b2c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109b2f:	0f 94 c0             	sete   %al
c0109b32:	0f b6 c0             	movzbl %al,%eax
c0109b35:	85 c0                	test   %eax,%eax
c0109b37:	75 0b                	jne    c0109b44 <wait_queue_del+0x2d>
c0109b39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b3c:	8b 40 08             	mov    0x8(%eax),%eax
c0109b3f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109b42:	74 24                	je     c0109b68 <wait_queue_del+0x51>
c0109b44:	c7 44 24 0c 04 7b 11 	movl   $0xc0117b04,0xc(%esp)
c0109b4b:	c0 
c0109b4c:	c7 44 24 08 dd 7a 11 	movl   $0xc0117add,0x8(%esp)
c0109b53:	c0 
c0109b54:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109b5b:	00 
c0109b5c:	c7 04 24 f2 7a 11 c0 	movl   $0xc0117af2,(%esp)
c0109b63:	e8 8b 69 ff ff       	call   c01004f3 <__panic>
    list_del_init(&(wait->wait_link));
c0109b68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b6b:	83 c0 0c             	add    $0xc,%eax
c0109b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b74:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b7a:	8b 40 04             	mov    0x4(%eax),%eax
c0109b7d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b80:	8b 12                	mov    (%edx),%edx
c0109b82:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next;
c0109b88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b8e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109b91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109b97:	89 10                	mov    %edx,(%eax)
c0109b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b9c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    elm->prev = elm->next = elm;
c0109b9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ba2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ba5:	89 50 04             	mov    %edx,0x4(%eax)
c0109ba8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109bab:	8b 50 04             	mov    0x4(%eax),%edx
c0109bae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109bb1:	89 10                	mov    %edx,(%eax)
}
c0109bb3:	c9                   	leave  
c0109bb4:	c3                   	ret    

c0109bb5 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109bb5:	55                   	push   %ebp
c0109bb6:	89 e5                	mov    %esp,%ebp
c0109bb8:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bbe:	83 c0 0c             	add    $0xc,%eax
c0109bc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c0109bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bc7:	8b 40 04             	mov    0x4(%eax),%eax
c0109bca:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109bcd:	0f 94 c0             	sete   %al
c0109bd0:	0f b6 c0             	movzbl %al,%eax
c0109bd3:	85 c0                	test   %eax,%eax
c0109bd5:	75 0b                	jne    c0109be2 <wait_queue_next+0x2d>
c0109bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bda:	8b 40 08             	mov    0x8(%eax),%eax
c0109bdd:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109be0:	74 24                	je     c0109c06 <wait_queue_next+0x51>
c0109be2:	c7 44 24 0c 04 7b 11 	movl   $0xc0117b04,0xc(%esp)
c0109be9:	c0 
c0109bea:	c7 44 24 08 dd 7a 11 	movl   $0xc0117add,0x8(%esp)
c0109bf1:	c0 
c0109bf2:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109bf9:	00 
c0109bfa:	c7 04 24 f2 7a 11 c0 	movl   $0xc0117af2,(%esp)
c0109c01:	e8 ed 68 ff ff       	call   c01004f3 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109c06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c09:	83 c0 0c             	add    $0xc,%eax
c0109c0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->next;
c0109c0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c12:	8b 40 04             	mov    0x4(%eax),%eax
c0109c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109c1e:	74 08                	je     c0109c28 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109c20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c23:	83 e8 0c             	sub    $0xc,%eax
c0109c26:	eb 05                	jmp    c0109c2d <wait_queue_next+0x78>
    }
    return NULL;
c0109c28:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c2d:	c9                   	leave  
c0109c2e:	c3                   	ret    

c0109c2f <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109c2f:	55                   	push   %ebp
c0109c30:	89 e5                	mov    %esp,%ebp
c0109c32:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109c35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c38:	83 c0 0c             	add    $0xc,%eax
c0109c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c0109c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c41:	8b 40 04             	mov    0x4(%eax),%eax
c0109c44:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109c47:	0f 94 c0             	sete   %al
c0109c4a:	0f b6 c0             	movzbl %al,%eax
c0109c4d:	85 c0                	test   %eax,%eax
c0109c4f:	75 0b                	jne    c0109c5c <wait_queue_prev+0x2d>
c0109c51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c54:	8b 40 08             	mov    0x8(%eax),%eax
c0109c57:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109c5a:	74 24                	je     c0109c80 <wait_queue_prev+0x51>
c0109c5c:	c7 44 24 0c 04 7b 11 	movl   $0xc0117b04,0xc(%esp)
c0109c63:	c0 
c0109c64:	c7 44 24 08 dd 7a 11 	movl   $0xc0117add,0x8(%esp)
c0109c6b:	c0 
c0109c6c:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109c73:	00 
c0109c74:	c7 04 24 f2 7a 11 c0 	movl   $0xc0117af2,(%esp)
c0109c7b:	e8 73 68 ff ff       	call   c01004f3 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109c80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c83:	83 c0 0c             	add    $0xc,%eax
c0109c86:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->prev;
c0109c89:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c8c:	8b 00                	mov    (%eax),%eax
c0109c8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109c97:	74 08                	je     c0109ca1 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109c99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c9c:	83 e8 0c             	sub    $0xc,%eax
c0109c9f:	eb 05                	jmp    c0109ca6 <wait_queue_prev+0x77>
    }
    return NULL;
c0109ca1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ca6:	c9                   	leave  
c0109ca7:	c3                   	ret    

c0109ca8 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109ca8:	55                   	push   %ebp
c0109ca9:	89 e5                	mov    %esp,%ebp
c0109cab:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109cae:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
c0109cb4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109cb7:	8b 40 04             	mov    0x4(%eax),%eax
c0109cba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cc0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109cc3:	74 08                	je     c0109ccd <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109cc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cc8:	83 e8 0c             	sub    $0xc,%eax
c0109ccb:	eb 05                	jmp    c0109cd2 <wait_queue_first+0x2a>
    }
    return NULL;
c0109ccd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cd2:	c9                   	leave  
c0109cd3:	c3                   	ret    

c0109cd4 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109cd4:	55                   	push   %ebp
c0109cd5:	89 e5                	mov    %esp,%ebp
c0109cd7:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cdd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->prev;
c0109ce0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109ce3:	8b 00                	mov    (%eax),%eax
c0109ce5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109ce8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ceb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109cee:	74 08                	je     c0109cf8 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109cf0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cf3:	83 e8 0c             	sub    $0xc,%eax
c0109cf6:	eb 05                	jmp    c0109cfd <wait_queue_last+0x29>
    }
    return NULL;
c0109cf8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cfd:	c9                   	leave  
c0109cfe:	c3                   	ret    

c0109cff <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109cff:	55                   	push   %ebp
c0109d00:	89 e5                	mov    %esp,%ebp
c0109d02:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109d05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d08:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list->next == list;
c0109d0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d0e:	8b 40 04             	mov    0x4(%eax),%eax
c0109d11:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109d14:	0f 94 c0             	sete   %al
c0109d17:	0f b6 c0             	movzbl %al,%eax
}
c0109d1a:	c9                   	leave  
c0109d1b:	c3                   	ret    

c0109d1c <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109d1c:	55                   	push   %ebp
c0109d1d:	89 e5                	mov    %esp,%ebp
c0109d1f:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d25:	83 c0 0c             	add    $0xc,%eax
c0109d28:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d2e:	8b 40 04             	mov    0x4(%eax),%eax
c0109d31:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109d34:	0f 94 c0             	sete   %al
c0109d37:	0f b6 c0             	movzbl %al,%eax
c0109d3a:	85 c0                	test   %eax,%eax
c0109d3c:	0f 94 c0             	sete   %al
c0109d3f:	0f b6 c0             	movzbl %al,%eax
}
c0109d42:	c9                   	leave  
c0109d43:	c3                   	ret    

c0109d44 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109d44:	55                   	push   %ebp
c0109d45:	89 e5                	mov    %esp,%ebp
c0109d47:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109d4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109d4e:	74 12                	je     c0109d62 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109d50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d57:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5a:	89 04 24             	mov    %eax,(%esp)
c0109d5d:	e8 b5 fd ff ff       	call   c0109b17 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109d62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d65:	8b 55 10             	mov    0x10(%ebp),%edx
c0109d68:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d6e:	8b 00                	mov    (%eax),%eax
c0109d70:	89 04 24             	mov    %eax,(%esp)
c0109d73:	e8 38 46 00 00       	call   c010e3b0 <wakeup_proc>
}
c0109d78:	c9                   	leave  
c0109d79:	c3                   	ret    

c0109d7a <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109d7a:	55                   	push   %ebp
c0109d7b:	89 e5                	mov    %esp,%ebp
c0109d7d:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109d80:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d83:	89 04 24             	mov    %eax,(%esp)
c0109d86:	e8 1d ff ff ff       	call   c0109ca8 <wait_queue_first>
c0109d8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d92:	74 20                	je     c0109db4 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109d94:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d97:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d9e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109da5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109da9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dac:	89 04 24             	mov    %eax,(%esp)
c0109daf:	e8 90 ff ff ff       	call   c0109d44 <wakeup_wait>
    }
}
c0109db4:	c9                   	leave  
c0109db5:	c3                   	ret    

c0109db6 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109db6:	55                   	push   %ebp
c0109db7:	89 e5                	mov    %esp,%ebp
c0109db9:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109dbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dbf:	89 04 24             	mov    %eax,(%esp)
c0109dc2:	e8 e1 fe ff ff       	call   c0109ca8 <wait_queue_first>
c0109dc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109dca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109dce:	74 79                	je     c0109e49 <wakeup_queue+0x93>
        if (del) {
c0109dd0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109dd4:	74 37                	je     c0109e0d <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109dd6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109ddd:	00 
c0109dde:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109de1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109de8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0109def:	89 04 24             	mov    %eax,(%esp)
c0109df2:	e8 4d ff ff ff       	call   c0109d44 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dfa:	89 04 24             	mov    %eax,(%esp)
c0109dfd:	e8 a6 fe ff ff       	call   c0109ca8 <wait_queue_first>
c0109e02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e09:	75 cb                	jne    c0109dd6 <wakeup_queue+0x20>
c0109e0b:	eb 3c                	jmp    c0109e49 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109e0d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109e14:	00 
c0109e15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e26:	89 04 24             	mov    %eax,(%esp)
c0109e29:	e8 16 ff ff ff       	call   c0109d44 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109e2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e38:	89 04 24             	mov    %eax,(%esp)
c0109e3b:	e8 75 fd ff ff       	call   c0109bb5 <wait_queue_next>
c0109e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e47:	75 c4                	jne    c0109e0d <wakeup_queue+0x57>
        }
    }
}
c0109e49:	c9                   	leave  
c0109e4a:	c3                   	ret    

c0109e4b <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109e4b:	55                   	push   %ebp
c0109e4c:	89 e5                	mov    %esp,%ebp
c0109e4e:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c0109e51:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0109e56:	85 c0                	test   %eax,%eax
c0109e58:	75 24                	jne    c0109e7e <wait_current_set+0x33>
c0109e5a:	c7 44 24 0c 41 7b 11 	movl   $0xc0117b41,0xc(%esp)
c0109e61:	c0 
c0109e62:	c7 44 24 08 dd 7a 11 	movl   $0xc0117add,0x8(%esp)
c0109e69:	c0 
c0109e6a:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109e71:	00 
c0109e72:	c7 04 24 f2 7a 11 c0 	movl   $0xc0117af2,(%esp)
c0109e79:	e8 75 66 ff ff       	call   c01004f3 <__panic>
    wait_init(wait, current);
c0109e7e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0109e83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e8a:	89 04 24             	mov    %eax,(%esp)
c0109e8d:	e8 8b fb ff ff       	call   c0109a1d <wait_init>
    current->state = PROC_SLEEPING;
c0109e92:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0109e97:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109e9d:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0109ea2:	8b 55 10             	mov    0x10(%ebp),%edx
c0109ea5:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109eab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109eb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eb5:	89 04 24             	mov    %eax,(%esp)
c0109eb8:	e8 b9 fb ff ff       	call   c0109a76 <wait_queue_add>
}
c0109ebd:	c9                   	leave  
c0109ebe:	c3                   	ret    

c0109ebf <__intr_save>:
__intr_save(void) {
c0109ebf:	55                   	push   %ebp
c0109ec0:	89 e5                	mov    %esp,%ebp
c0109ec2:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109ec5:	9c                   	pushf  
c0109ec6:	58                   	pop    %eax
c0109ec7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109ecd:	25 00 02 00 00       	and    $0x200,%eax
c0109ed2:	85 c0                	test   %eax,%eax
c0109ed4:	74 0c                	je     c0109ee2 <__intr_save+0x23>
        intr_disable();
c0109ed6:	e8 2d 84 ff ff       	call   c0102308 <intr_disable>
        return 1;
c0109edb:	b8 01 00 00 00       	mov    $0x1,%eax
c0109ee0:	eb 05                	jmp    c0109ee7 <__intr_save+0x28>
    return 0;
c0109ee2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ee7:	c9                   	leave  
c0109ee8:	c3                   	ret    

c0109ee9 <__intr_restore>:
__intr_restore(bool flag) {
c0109ee9:	55                   	push   %ebp
c0109eea:	89 e5                	mov    %esp,%ebp
c0109eec:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109eef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ef3:	74 05                	je     c0109efa <__intr_restore+0x11>
        intr_enable();
c0109ef5:	e8 08 84 ff ff       	call   c0102302 <intr_enable>
}
c0109efa:	c9                   	leave  
c0109efb:	c3                   	ret    

c0109efc <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109efc:	55                   	push   %ebp
c0109efd:	89 e5                	mov    %esp,%ebp
c0109eff:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109f02:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f05:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109f08:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0d:	83 c0 04             	add    $0x4,%eax
c0109f10:	89 04 24             	mov    %eax,(%esp)
c0109f13:	e8 3c fb ff ff       	call   c0109a54 <wait_queue_init>
}
c0109f18:	c9                   	leave  
c0109f19:	c3                   	ret    

c0109f1a <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109f1a:	55                   	push   %ebp
c0109f1b:	89 e5                	mov    %esp,%ebp
c0109f1d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109f20:	e8 9a ff ff ff       	call   c0109ebf <__intr_save>
c0109f25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f2b:	83 c0 04             	add    $0x4,%eax
c0109f2e:	89 04 24             	mov    %eax,(%esp)
c0109f31:	e8 72 fd ff ff       	call   c0109ca8 <wait_queue_first>
c0109f36:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109f39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109f3d:	75 0f                	jne    c0109f4e <__up+0x34>
            sem->value ++;
c0109f3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f42:	8b 00                	mov    (%eax),%eax
c0109f44:	8d 50 01             	lea    0x1(%eax),%edx
c0109f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f4a:	89 10                	mov    %edx,(%eax)
c0109f4c:	eb 58                	jmp    c0109fa6 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109f4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f51:	8b 00                	mov    (%eax),%eax
c0109f53:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109f59:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109f5c:	74 24                	je     c0109f82 <__up+0x68>
c0109f5e:	c7 44 24 0c 54 7b 11 	movl   $0xc0117b54,0xc(%esp)
c0109f65:	c0 
c0109f66:	c7 44 24 08 79 7b 11 	movl   $0xc0117b79,0x8(%esp)
c0109f6d:	c0 
c0109f6e:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109f75:	00 
c0109f76:	c7 04 24 8e 7b 11 c0 	movl   $0xc0117b8e,(%esp)
c0109f7d:	e8 71 65 ff ff       	call   c01004f3 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109f82:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f85:	8d 50 04             	lea    0x4(%eax),%edx
c0109f88:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109f8f:	00 
c0109f90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f93:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f9e:	89 14 24             	mov    %edx,(%esp)
c0109fa1:	e8 9e fd ff ff       	call   c0109d44 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fa9:	89 04 24             	mov    %eax,(%esp)
c0109fac:	e8 38 ff ff ff       	call   c0109ee9 <__intr_restore>
}
c0109fb1:	c9                   	leave  
c0109fb2:	c3                   	ret    

c0109fb3 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109fb3:	55                   	push   %ebp
c0109fb4:	89 e5                	mov    %esp,%ebp
c0109fb6:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109fb9:	e8 01 ff ff ff       	call   c0109ebf <__intr_save>
c0109fbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109fc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fc4:	8b 00                	mov    (%eax),%eax
c0109fc6:	85 c0                	test   %eax,%eax
c0109fc8:	7e 22                	jle    c0109fec <__down+0x39>
        sem->value --;
c0109fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fcd:	8b 00                	mov    (%eax),%eax
c0109fcf:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fd5:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fda:	89 04 24             	mov    %eax,(%esp)
c0109fdd:	e8 07 ff ff ff       	call   c0109ee9 <__intr_restore>
        return 0;
c0109fe2:	b8 00 00 00 00       	mov    $0x0,%eax
c0109fe7:	e9 81 00 00 00       	jmp    c010a06d <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109fec:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff5:	8d 50 04             	lea    0x4(%eax),%edx
c0109ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ffb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a002:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a006:	89 14 24             	mov    %edx,(%esp)
c010a009:	e8 3d fe ff ff       	call   c0109e4b <wait_current_set>
    local_intr_restore(intr_flag);
c010a00e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a011:	89 04 24             	mov    %eax,(%esp)
c010a014:	e8 d0 fe ff ff       	call   c0109ee9 <__intr_restore>

    schedule();
c010a019:	e8 2e 44 00 00       	call   c010e44c <schedule>

    local_intr_save(intr_flag);
c010a01e:	e8 9c fe ff ff       	call   c0109ebf <__intr_save>
c010a023:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c010a026:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a029:	89 04 24             	mov    %eax,(%esp)
c010a02c:	e8 eb fc ff ff       	call   c0109d1c <wait_in_queue>
c010a031:	85 c0                	test   %eax,%eax
c010a033:	74 15                	je     c010a04a <__down+0x97>
c010a035:	8b 45 08             	mov    0x8(%ebp),%eax
c010a038:	8d 50 04             	lea    0x4(%eax),%edx
c010a03b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a03e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a042:	89 14 24             	mov    %edx,(%esp)
c010a045:	e8 cd fa ff ff       	call   c0109b17 <wait_queue_del>
    local_intr_restore(intr_flag);
c010a04a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a04d:	89 04 24             	mov    %eax,(%esp)
c010a050:	e8 94 fe ff ff       	call   c0109ee9 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c010a055:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a058:	8b 40 04             	mov    0x4(%eax),%eax
c010a05b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a05e:	74 08                	je     c010a068 <__down+0xb5>
        return wait->wakeup_flags;
c010a060:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a063:	8b 40 04             	mov    0x4(%eax),%eax
c010a066:	eb 05                	jmp    c010a06d <__down+0xba>
    }
    return 0;
c010a068:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a06d:	c9                   	leave  
c010a06e:	c3                   	ret    

c010a06f <up>:

void
up(semaphore_t *sem) {
c010a06f:	55                   	push   %ebp
c010a070:	89 e5                	mov    %esp,%ebp
c010a072:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c010a075:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010a07c:	00 
c010a07d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a080:	89 04 24             	mov    %eax,(%esp)
c010a083:	e8 92 fe ff ff       	call   c0109f1a <__up>
}
c010a088:	c9                   	leave  
c010a089:	c3                   	ret    

c010a08a <down>:

void
down(semaphore_t *sem) {
c010a08a:	55                   	push   %ebp
c010a08b:	89 e5                	mov    %esp,%ebp
c010a08d:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c010a090:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010a097:	00 
c010a098:	8b 45 08             	mov    0x8(%ebp),%eax
c010a09b:	89 04 24             	mov    %eax,(%esp)
c010a09e:	e8 10 ff ff ff       	call   c0109fb3 <__down>
c010a0a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c010a0a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0aa:	74 24                	je     c010a0d0 <down+0x46>
c010a0ac:	c7 44 24 0c 9e 7b 11 	movl   $0xc0117b9e,0xc(%esp)
c010a0b3:	c0 
c010a0b4:	c7 44 24 08 79 7b 11 	movl   $0xc0117b79,0x8(%esp)
c010a0bb:	c0 
c010a0bc:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c010a0c3:	00 
c010a0c4:	c7 04 24 8e 7b 11 c0 	movl   $0xc0117b8e,(%esp)
c010a0cb:	e8 23 64 ff ff       	call   c01004f3 <__panic>
}
c010a0d0:	c9                   	leave  
c010a0d1:	c3                   	ret    

c010a0d2 <try_down>:

bool
try_down(semaphore_t *sem) {
c010a0d2:	55                   	push   %ebp
c010a0d3:	89 e5                	mov    %esp,%ebp
c010a0d5:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c010a0d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c010a0df:	e8 db fd ff ff       	call   c0109ebf <__intr_save>
c010a0e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c010a0e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0ea:	8b 00                	mov    (%eax),%eax
c010a0ec:	85 c0                	test   %eax,%eax
c010a0ee:	7e 14                	jle    c010a104 <try_down+0x32>
        sem->value --, ret = 1;
c010a0f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f3:	8b 00                	mov    (%eax),%eax
c010a0f5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a0f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0fb:	89 10                	mov    %edx,(%eax)
c010a0fd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c010a104:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a107:	89 04 24             	mov    %eax,(%esp)
c010a10a:	e8 da fd ff ff       	call   c0109ee9 <__intr_restore>
    return ret;
c010a10f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a112:	c9                   	leave  
c010a113:	c3                   	ret    

c010a114 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010a114:	55                   	push   %ebp
c010a115:	89 e5                	mov    %esp,%ebp
c010a117:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010a11a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a11e:	75 24                	jne    c010a144 <monitor_init+0x30>
c010a120:	c7 44 24 0c ac 7b 11 	movl   $0xc0117bac,0xc(%esp)
c010a127:	c0 
c010a128:	c7 44 24 08 b5 7b 11 	movl   $0xc0117bb5,0x8(%esp)
c010a12f:	c0 
c010a130:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c010a137:	00 
c010a138:	c7 04 24 ca 7b 11 c0 	movl   $0xc0117bca,(%esp)
c010a13f:	e8 af 63 ff ff       	call   c01004f3 <__panic>
    mtp->next_count = 0;
c010a144:	8b 45 08             	mov    0x8(%ebp),%eax
c010a147:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010a14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a151:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c010a158:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a162:	00 
c010a163:	89 04 24             	mov    %eax,(%esp)
c010a166:	e8 91 fd ff ff       	call   c0109efc <sem_init>
    sem_init(&(mtp->next), 0);
c010a16b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a16e:	83 c0 0c             	add    $0xc,%eax
c010a171:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a178:	00 
c010a179:	89 04 24             	mov    %eax,(%esp)
c010a17c:	e8 7b fd ff ff       	call   c0109efc <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c010a181:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a184:	89 d0                	mov    %edx,%eax
c010a186:	c1 e0 02             	shl    $0x2,%eax
c010a189:	01 d0                	add    %edx,%eax
c010a18b:	c1 e0 02             	shl    $0x2,%eax
c010a18e:	89 04 24             	mov    %eax,(%esp)
c010a191:	e8 6c ba ff ff       	call   c0105c02 <kmalloc>
c010a196:	8b 55 08             	mov    0x8(%ebp),%edx
c010a199:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c010a19c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19f:	8b 40 1c             	mov    0x1c(%eax),%eax
c010a1a2:	85 c0                	test   %eax,%eax
c010a1a4:	75 24                	jne    c010a1ca <monitor_init+0xb6>
c010a1a6:	c7 44 24 0c de 7b 11 	movl   $0xc0117bde,0xc(%esp)
c010a1ad:	c0 
c010a1ae:	c7 44 24 08 b5 7b 11 	movl   $0xc0117bb5,0x8(%esp)
c010a1b5:	c0 
c010a1b6:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010a1bd:	00 
c010a1be:	c7 04 24 ca 7b 11 c0 	movl   $0xc0117bca,(%esp)
c010a1c5:	e8 29 63 ff ff       	call   c01004f3 <__panic>
    for(i=0; i<num_cv; i++){
c010a1ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a1d1:	eb 61                	jmp    c010a234 <monitor_init+0x120>
        mtp->cv[i].count=0;
c010a1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d6:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010a1d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a1dc:	89 d0                	mov    %edx,%eax
c010a1de:	c1 e0 02             	shl    $0x2,%eax
c010a1e1:	01 d0                	add    %edx,%eax
c010a1e3:	c1 e0 02             	shl    $0x2,%eax
c010a1e6:	01 c8                	add    %ecx,%eax
c010a1e8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f2:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010a1f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a1f8:	89 d0                	mov    %edx,%eax
c010a1fa:	c1 e0 02             	shl    $0x2,%eax
c010a1fd:	01 d0                	add    %edx,%eax
c010a1ff:	c1 e0 02             	shl    $0x2,%eax
c010a202:	01 c8                	add    %ecx,%eax
c010a204:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a20b:	00 
c010a20c:	89 04 24             	mov    %eax,(%esp)
c010a20f:	e8 e8 fc ff ff       	call   c0109efc <sem_init>
        mtp->cv[i].owner=mtp;
c010a214:	8b 45 08             	mov    0x8(%ebp),%eax
c010a217:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010a21a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a21d:	89 d0                	mov    %edx,%eax
c010a21f:	c1 e0 02             	shl    $0x2,%eax
c010a222:	01 d0                	add    %edx,%eax
c010a224:	c1 e0 02             	shl    $0x2,%eax
c010a227:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010a22a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22d:	89 42 10             	mov    %eax,0x10(%edx)
    for(i=0; i<num_cv; i++){
c010a230:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a237:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a23a:	72 97                	jb     c010a1d3 <monitor_init+0xbf>
    }
}
c010a23c:	c9                   	leave  
c010a23d:	c3                   	ret    

c010a23e <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010a23e:	55                   	push   %ebp
c010a23f:	89 e5                	mov    %esp,%ebp
c010a241:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c010a244:	8b 45 08             	mov    0x8(%ebp),%eax
c010a247:	8b 40 10             	mov    0x10(%eax),%eax
c010a24a:	8b 50 18             	mov    0x18(%eax),%edx
c010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a250:	8b 40 0c             	mov    0xc(%eax),%eax
c010a253:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a257:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a25b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a262:	c7 04 24 ec 7b 11 c0 	movl   $0xc0117bec,(%esp)
c010a269:	e8 2e 61 ff ff       	call   c010039c <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a271:	8b 40 0c             	mov    0xc(%eax),%eax
c010a274:	85 c0                	test   %eax,%eax
c010a276:	7e 3a                	jle    c010a2b2 <cond_signal+0x74>
        cvp->owner->next_count ++;
c010a278:	8b 45 08             	mov    0x8(%ebp),%eax
c010a27b:	8b 40 10             	mov    0x10(%eax),%eax
c010a27e:	8b 50 18             	mov    0x18(%eax),%edx
c010a281:	83 c2 01             	add    $0x1,%edx
c010a284:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c010a287:	8b 45 08             	mov    0x8(%ebp),%eax
c010a28a:	89 04 24             	mov    %eax,(%esp)
c010a28d:	e8 dd fd ff ff       	call   c010a06f <up>
        down(&(cvp->owner->next));
c010a292:	8b 45 08             	mov    0x8(%ebp),%eax
c010a295:	8b 40 10             	mov    0x10(%eax),%eax
c010a298:	83 c0 0c             	add    $0xc,%eax
c010a29b:	89 04 24             	mov    %eax,(%esp)
c010a29e:	e8 e7 fd ff ff       	call   c010a08a <down>
        cvp->owner->next_count --;
c010a2a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a6:	8b 40 10             	mov    0x10(%eax),%eax
c010a2a9:	8b 50 18             	mov    0x18(%eax),%edx
c010a2ac:	83 ea 01             	sub    $0x1,%edx
c010a2af:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010a2b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b5:	8b 40 10             	mov    0x10(%eax),%eax
c010a2b8:	8b 50 18             	mov    0x18(%eax),%edx
c010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2be:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2c1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a2c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2d0:	c7 04 24 34 7c 11 c0 	movl   $0xc0117c34,(%esp)
c010a2d7:	e8 c0 60 ff ff       	call   c010039c <cprintf>
}
c010a2dc:	c9                   	leave  
c010a2dd:	c3                   	ret    

c010a2de <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c010a2de:	55                   	push   %ebp
c010a2df:	89 e5                	mov    %esp,%ebp
c010a2e1:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010a2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2e7:	8b 40 10             	mov    0x10(%eax),%eax
c010a2ea:	8b 50 18             	mov    0x18(%eax),%edx
c010a2ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f0:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2f3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a2f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a302:	c7 04 24 78 7c 11 c0 	movl   $0xc0117c78,(%esp)
c010a309:	e8 8e 60 ff ff       	call   c010039c <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c010a30e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a311:	8b 40 0c             	mov    0xc(%eax),%eax
c010a314:	8d 50 01             	lea    0x1(%eax),%edx
c010a317:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31a:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c010a31d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a320:	8b 40 10             	mov    0x10(%eax),%eax
c010a323:	8b 40 18             	mov    0x18(%eax),%eax
c010a326:	85 c0                	test   %eax,%eax
c010a328:	7e 13                	jle    c010a33d <cond_wait+0x5f>
         up(&(cvp->owner->next));
c010a32a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32d:	8b 40 10             	mov    0x10(%eax),%eax
c010a330:	83 c0 0c             	add    $0xc,%eax
c010a333:	89 04 24             	mov    %eax,(%esp)
c010a336:	e8 34 fd ff ff       	call   c010a06f <up>
c010a33b:	eb 0e                	jmp    c010a34b <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c010a33d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a340:	8b 40 10             	mov    0x10(%eax),%eax
c010a343:	89 04 24             	mov    %eax,(%esp)
c010a346:	e8 24 fd ff ff       	call   c010a06f <up>
      down(&(cvp->sem));
c010a34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34e:	89 04 24             	mov    %eax,(%esp)
c010a351:	e8 34 fd ff ff       	call   c010a08a <down>
      cvp->count --;
c010a356:	8b 45 08             	mov    0x8(%ebp),%eax
c010a359:	8b 40 0c             	mov    0xc(%eax),%eax
c010a35c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a35f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a362:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010a365:	8b 45 08             	mov    0x8(%ebp),%eax
c010a368:	8b 40 10             	mov    0x10(%eax),%eax
c010a36b:	8b 50 18             	mov    0x18(%eax),%edx
c010a36e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a371:	8b 40 0c             	mov    0xc(%eax),%eax
c010a374:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a378:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a37c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a383:	c7 04 24 bc 7c 11 c0 	movl   $0xc0117cbc,(%esp)
c010a38a:	e8 0d 60 ff ff       	call   c010039c <cprintf>
}
c010a38f:	c9                   	leave  
c010a390:	c3                   	ret    

c010a391 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010a391:	55                   	push   %ebp
c010a392:	89 e5                	mov    %esp,%ebp
c010a394:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a397:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a39b:	74 25                	je     c010a3c2 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a39d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3a0:	83 c0 1c             	add    $0x1c,%eax
c010a3a3:	89 04 24             	mov    %eax,(%esp)
c010a3a6:	e8 df fc ff ff       	call   c010a08a <down>
        if (current != NULL) {
c010a3ab:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a3b0:	85 c0                	test   %eax,%eax
c010a3b2:	74 0e                	je     c010a3c2 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a3b4:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a3b9:	8b 50 04             	mov    0x4(%eax),%edx
c010a3bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3bf:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a3c2:	c9                   	leave  
c010a3c3:	c3                   	ret    

c010a3c4 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a3c4:	55                   	push   %ebp
c010a3c5:	89 e5                	mov    %esp,%ebp
c010a3c7:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a3ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a3ce:	74 18                	je     c010a3e8 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a3d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3d3:	83 c0 1c             	add    $0x1c,%eax
c010a3d6:	89 04 24             	mov    %eax,(%esp)
c010a3d9:	e8 91 fc ff ff       	call   c010a06f <up>
        mm->locked_by = 0;
c010a3de:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a3e8:	c9                   	leave  
c010a3e9:	c3                   	ret    

c010a3ea <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010a3ea:	55                   	push   %ebp
c010a3eb:	89 e5                	mov    %esp,%ebp
c010a3ed:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a3f0:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a3f5:	8b 40 18             	mov    0x18(%eax),%eax
c010a3f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010a3fb:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010a402:	e8 fb b7 ff ff       	call   c0105c02 <kmalloc>
c010a407:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a40a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a40e:	75 07                	jne    c010a417 <copy_path+0x2d>
        return -E_NO_MEM;
c010a410:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a415:	eb 66                	jmp    c010a47d <copy_path+0x93>
    }
    lock_mm(mm);
c010a417:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a41a:	89 04 24             	mov    %eax,(%esp)
c010a41d:	e8 6f ff ff ff       	call   c010a391 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010a422:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010a429:	00 
c010a42a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a42d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a431:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a434:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a43b:	89 04 24             	mov    %eax,(%esp)
c010a43e:	e8 42 a4 ff ff       	call   c0104885 <copy_string>
c010a443:	85 c0                	test   %eax,%eax
c010a445:	75 1e                	jne    c010a465 <copy_path+0x7b>
        unlock_mm(mm);
c010a447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a44a:	89 04 24             	mov    %eax,(%esp)
c010a44d:	e8 72 ff ff ff       	call   c010a3c4 <unlock_mm>
        goto failed_cleanup;
c010a452:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010a453:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a456:	89 04 24             	mov    %eax,(%esp)
c010a459:	e8 bf b7 ff ff       	call   c0105c1d <kfree>
    return -E_INVAL;
c010a45e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a463:	eb 18                	jmp    c010a47d <copy_path+0x93>
    unlock_mm(mm);
c010a465:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a468:	89 04 24             	mov    %eax,(%esp)
c010a46b:	e8 54 ff ff ff       	call   c010a3c4 <unlock_mm>
    *to = buffer;
c010a470:	8b 45 08             	mov    0x8(%ebp),%eax
c010a473:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a476:	89 10                	mov    %edx,(%eax)
    return 0;
c010a478:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a47d:	c9                   	leave  
c010a47e:	c3                   	ret    

c010a47f <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010a47f:	55                   	push   %ebp
c010a480:	89 e5                	mov    %esp,%ebp
c010a482:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010a485:	8b 45 08             	mov    0x8(%ebp),%eax
c010a488:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a48c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a48f:	89 04 24             	mov    %eax,(%esp)
c010a492:	e8 53 ff ff ff       	call   c010a3ea <copy_path>
c010a497:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a49a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a49e:	74 05                	je     c010a4a5 <sysfile_open+0x26>
        return ret;
c010a4a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a3:	eb 23                	jmp    c010a4c8 <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010a4a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a4ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a4af:	89 04 24             	mov    %eax,(%esp)
c010a4b2:	e8 5e 0c 00 00       	call   c010b115 <file_open>
c010a4b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010a4ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4bd:	89 04 24             	mov    %eax,(%esp)
c010a4c0:	e8 58 b7 ff ff       	call   c0105c1d <kfree>
    return ret;
c010a4c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a4c8:	c9                   	leave  
c010a4c9:	c3                   	ret    

c010a4ca <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010a4ca:	55                   	push   %ebp
c010a4cb:	89 e5                	mov    %esp,%ebp
c010a4cd:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010a4d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d3:	89 04 24             	mov    %eax,(%esp)
c010a4d6:	e8 d7 0d 00 00       	call   c010b2b2 <file_close>
}
c010a4db:	c9                   	leave  
c010a4dc:	c3                   	ret    

c010a4dd <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010a4dd:	55                   	push   %ebp
c010a4de:	89 e5                	mov    %esp,%ebp
c010a4e0:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a4e3:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a4e8:	8b 40 18             	mov    0x18(%eax),%eax
c010a4eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010a4ee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a4f2:	75 0a                	jne    c010a4fe <sysfile_read+0x21>
        return 0;
c010a4f4:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4f9:	e9 55 01 00 00       	jmp    c010a653 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010a4fe:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010a505:	00 
c010a506:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a50d:	00 
c010a50e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a511:	89 04 24             	mov    %eax,(%esp)
c010a514:	e8 9f 0b 00 00       	call   c010b0b8 <file_testfd>
c010a519:	85 c0                	test   %eax,%eax
c010a51b:	75 0a                	jne    c010a527 <sysfile_read+0x4a>
        return -E_INVAL;
c010a51d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a522:	e9 2c 01 00 00       	jmp    c010a653 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010a527:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010a52e:	e8 cf b6 ff ff       	call   c0105c02 <kmalloc>
c010a533:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a536:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010a53a:	75 0a                	jne    c010a546 <sysfile_read+0x69>
        return -E_NO_MEM;
c010a53c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a541:	e9 0d 01 00 00       	jmp    c010a653 <sysfile_read+0x176>
    }

    int ret = 0;
c010a546:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010a54d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010a554:	e9 d7 00 00 00       	jmp    c010a630 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010a559:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010a560:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a563:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a566:	76 06                	jbe    c010a56e <sysfile_read+0x91>
            alen = len;
c010a568:	8b 45 10             	mov    0x10(%ebp),%eax
c010a56b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010a56e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a571:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010a574:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a578:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a57c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a57f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a583:	8b 45 08             	mov    0x8(%ebp),%eax
c010a586:	89 04 24             	mov    %eax,(%esp)
c010a589:	e8 5c 0d 00 00       	call   c010b2ea <file_read>
c010a58e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010a591:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a594:	85 c0                	test   %eax,%eax
c010a596:	0f 84 87 00 00 00    	je     c010a623 <sysfile_read+0x146>
            lock_mm(mm);
c010a59c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a59f:	89 04 24             	mov    %eax,(%esp)
c010a5a2:	e8 ea fd ff ff       	call   c010a391 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010a5a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5aa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a5b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a5b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a5bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5bf:	89 04 24             	mov    %eax,(%esp)
c010a5c2:	e8 e1 97 ff ff       	call   c0103da8 <copy_to_user>
c010a5c7:	85 c0                	test   %eax,%eax
c010a5c9:	74 40                	je     c010a60b <sysfile_read+0x12e>
                    assert(len >= alen);
c010a5cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5ce:	39 45 10             	cmp    %eax,0x10(%ebp)
c010a5d1:	73 24                	jae    c010a5f7 <sysfile_read+0x11a>
c010a5d3:	c7 44 24 0c fe 7c 11 	movl   $0xc0117cfe,0xc(%esp)
c010a5da:	c0 
c010a5db:	c7 44 24 08 0a 7d 11 	movl   $0xc0117d0a,0x8(%esp)
c010a5e2:	c0 
c010a5e3:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a5ea:	00 
c010a5eb:	c7 04 24 1f 7d 11 c0 	movl   $0xc0117d1f,(%esp)
c010a5f2:	e8 fc 5e ff ff       	call   c01004f3 <__panic>
                    base += alen, len -= alen, copied += alen;
c010a5f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5fa:	01 45 0c             	add    %eax,0xc(%ebp)
c010a5fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a600:	29 45 10             	sub    %eax,0x10(%ebp)
c010a603:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a606:	01 45 f0             	add    %eax,-0x10(%ebp)
c010a609:	eb 0d                	jmp    c010a618 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010a60b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a60f:	75 07                	jne    c010a618 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010a611:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010a618:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a61b:	89 04 24             	mov    %eax,(%esp)
c010a61e:	e8 a1 fd ff ff       	call   c010a3c4 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010a623:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a627:	75 11                	jne    c010a63a <sysfile_read+0x15d>
c010a629:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a62c:	85 c0                	test   %eax,%eax
c010a62e:	74 0a                	je     c010a63a <sysfile_read+0x15d>
    while (len != 0) {
c010a630:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a634:	0f 85 1f ff ff ff    	jne    c010a559 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010a63a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a63d:	89 04 24             	mov    %eax,(%esp)
c010a640:	e8 d8 b5 ff ff       	call   c0105c1d <kfree>
    if (copied != 0) {
c010a645:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a649:	74 05                	je     c010a650 <sysfile_read+0x173>
        return copied;
c010a64b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a64e:	eb 03                	jmp    c010a653 <sysfile_read+0x176>
    }
    return ret;
c010a650:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a653:	c9                   	leave  
c010a654:	c3                   	ret    

c010a655 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010a655:	55                   	push   %ebp
c010a656:	89 e5                	mov    %esp,%ebp
c010a658:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010a65b:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a660:	8b 40 18             	mov    0x18(%eax),%eax
c010a663:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010a666:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a66a:	75 0a                	jne    c010a676 <sysfile_write+0x21>
        return 0;
c010a66c:	b8 00 00 00 00       	mov    $0x0,%eax
c010a671:	e9 57 01 00 00       	jmp    c010a7cd <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010a676:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010a67d:	00 
c010a67e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a685:	00 
c010a686:	8b 45 08             	mov    0x8(%ebp),%eax
c010a689:	89 04 24             	mov    %eax,(%esp)
c010a68c:	e8 27 0a 00 00       	call   c010b0b8 <file_testfd>
c010a691:	85 c0                	test   %eax,%eax
c010a693:	75 0a                	jne    c010a69f <sysfile_write+0x4a>
        return -E_INVAL;
c010a695:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a69a:	e9 2e 01 00 00       	jmp    c010a7cd <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010a69f:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010a6a6:	e8 57 b5 ff ff       	call   c0105c02 <kmalloc>
c010a6ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a6ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010a6b2:	75 0a                	jne    c010a6be <sysfile_write+0x69>
        return -E_NO_MEM;
c010a6b4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a6b9:	e9 0f 01 00 00       	jmp    c010a7cd <sysfile_write+0x178>
    }

    int ret = 0;
c010a6be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010a6c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010a6cc:	e9 d9 00 00 00       	jmp    c010a7aa <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010a6d1:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010a6d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6db:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a6de:	76 06                	jbe    c010a6e6 <sysfile_write+0x91>
            alen = len;
c010a6e0:	8b 45 10             	mov    0x10(%ebp),%eax
c010a6e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010a6e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6e9:	89 04 24             	mov    %eax,(%esp)
c010a6ec:	e8 a0 fc ff ff       	call   c010a391 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010a6f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6f4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a6fb:	00 
c010a6fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a700:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a703:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a707:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a70a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a70e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a711:	89 04 24             	mov    %eax,(%esp)
c010a714:	e8 3e 96 ff ff       	call   c0103d57 <copy_from_user>
c010a719:	85 c0                	test   %eax,%eax
c010a71b:	75 07                	jne    c010a724 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010a71d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010a724:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a727:	89 04 24             	mov    %eax,(%esp)
c010a72a:	e8 95 fc ff ff       	call   c010a3c4 <unlock_mm>
        if (ret == 0) {
c010a72f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a733:	75 68                	jne    c010a79d <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010a735:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a738:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010a73b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a73f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a743:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a746:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a74a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a74d:	89 04 24             	mov    %eax,(%esp)
c010a750:	e8 cf 0c 00 00       	call   c010b424 <file_write>
c010a755:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010a758:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a75b:	85 c0                	test   %eax,%eax
c010a75d:	74 3e                	je     c010a79d <sysfile_write+0x148>
                assert(len >= alen);
c010a75f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a762:	39 45 10             	cmp    %eax,0x10(%ebp)
c010a765:	73 24                	jae    c010a78b <sysfile_write+0x136>
c010a767:	c7 44 24 0c fe 7c 11 	movl   $0xc0117cfe,0xc(%esp)
c010a76e:	c0 
c010a76f:	c7 44 24 08 0a 7d 11 	movl   $0xc0117d0a,0x8(%esp)
c010a776:	c0 
c010a777:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010a77e:	00 
c010a77f:	c7 04 24 1f 7d 11 c0 	movl   $0xc0117d1f,(%esp)
c010a786:	e8 68 5d ff ff       	call   c01004f3 <__panic>
                base += alen, len -= alen, copied += alen;
c010a78b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a78e:	01 45 0c             	add    %eax,0xc(%ebp)
c010a791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a794:	29 45 10             	sub    %eax,0x10(%ebp)
c010a797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a79a:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010a79d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7a1:	75 11                	jne    c010a7b4 <sysfile_write+0x15f>
c010a7a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7a6:	85 c0                	test   %eax,%eax
c010a7a8:	74 0a                	je     c010a7b4 <sysfile_write+0x15f>
    while (len != 0) {
c010a7aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a7ae:	0f 85 1d ff ff ff    	jne    c010a6d1 <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010a7b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a7b7:	89 04 24             	mov    %eax,(%esp)
c010a7ba:	e8 5e b4 ff ff       	call   c0105c1d <kfree>
    if (copied != 0) {
c010a7bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a7c3:	74 05                	je     c010a7ca <sysfile_write+0x175>
        return copied;
c010a7c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7c8:	eb 03                	jmp    c010a7cd <sysfile_write+0x178>
    }
    return ret;
c010a7ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a7cd:	c9                   	leave  
c010a7ce:	c3                   	ret    

c010a7cf <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010a7cf:	55                   	push   %ebp
c010a7d0:	89 e5                	mov    %esp,%ebp
c010a7d2:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010a7d5:	8b 45 10             	mov    0x10(%ebp),%eax
c010a7d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a7dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7df:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e6:	89 04 24             	mov    %eax,(%esp)
c010a7e9:	e8 70 0d 00 00       	call   c010b55e <file_seek>
}
c010a7ee:	c9                   	leave  
c010a7ef:	c3                   	ret    

c010a7f0 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010a7f0:	55                   	push   %ebp
c010a7f1:	89 e5                	mov    %esp,%ebp
c010a7f3:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a7f6:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010a7fb:	8b 40 18             	mov    0x18(%eax),%eax
c010a7fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010a801:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a804:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010a807:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a80a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a80e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a811:	89 04 24             	mov    %eax,(%esp)
c010a814:	e8 e8 0e 00 00       	call   c010b701 <file_fstat>
c010a819:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a81c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a820:	74 05                	je     c010a827 <sysfile_fstat+0x37>
        return ret;
c010a822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a825:	eb 45                	jmp    c010a86c <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010a827:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a82a:	89 04 24             	mov    %eax,(%esp)
c010a82d:	e8 5f fb ff ff       	call   c010a391 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010a832:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010a839:	00 
c010a83a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a83d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a841:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a844:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a84b:	89 04 24             	mov    %eax,(%esp)
c010a84e:	e8 55 95 ff ff       	call   c0103da8 <copy_to_user>
c010a853:	85 c0                	test   %eax,%eax
c010a855:	75 07                	jne    c010a85e <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010a857:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a85e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a861:	89 04 24             	mov    %eax,(%esp)
c010a864:	e8 5b fb ff ff       	call   c010a3c4 <unlock_mm>
    return ret;
c010a869:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a86c:	c9                   	leave  
c010a86d:	c3                   	ret    

c010a86e <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010a86e:	55                   	push   %ebp
c010a86f:	89 e5                	mov    %esp,%ebp
c010a871:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010a874:	8b 45 08             	mov    0x8(%ebp),%eax
c010a877:	89 04 24             	mov    %eax,(%esp)
c010a87a:	e8 41 0f 00 00       	call   c010b7c0 <file_fsync>
}
c010a87f:	c9                   	leave  
c010a880:	c3                   	ret    

c010a881 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010a881:	55                   	push   %ebp
c010a882:	89 e5                	mov    %esp,%ebp
c010a884:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010a887:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a88e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a891:	89 04 24             	mov    %eax,(%esp)
c010a894:	e8 51 fb ff ff       	call   c010a3ea <copy_path>
c010a899:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a89c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8a0:	74 05                	je     c010a8a7 <sysfile_chdir+0x26>
        return ret;
c010a8a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8a5:	eb 1c                	jmp    c010a8c3 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010a8a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8aa:	89 04 24             	mov    %eax,(%esp)
c010a8ad:	e8 72 52 00 00       	call   c010fb24 <vfs_chdir>
c010a8b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010a8b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8b8:	89 04 24             	mov    %eax,(%esp)
c010a8bb:	e8 5d b3 ff ff       	call   c0105c1d <kfree>
    return ret;
c010a8c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a8c3:	c9                   	leave  
c010a8c4:	c3                   	ret    

c010a8c5 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010a8c5:	55                   	push   %ebp
c010a8c6:	89 e5                	mov    %esp,%ebp
c010a8c8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010a8cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8d2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a8d5:	89 04 24             	mov    %eax,(%esp)
c010a8d8:	e8 0d fb ff ff       	call   c010a3ea <copy_path>
c010a8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8e4:	74 05                	je     c010a8eb <sysfile_link+0x26>
        return ret;
c010a8e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e9:	eb 59                	jmp    c010a944 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010a8eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a8f5:	89 04 24             	mov    %eax,(%esp)
c010a8f8:	e8 ed fa ff ff       	call   c010a3ea <copy_path>
c010a8fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a904:	74 10                	je     c010a916 <sysfile_link+0x51>
        kfree(old_path);
c010a906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a909:	89 04 24             	mov    %eax,(%esp)
c010a90c:	e8 0c b3 ff ff       	call   c0105c1d <kfree>
        return ret;
c010a911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a914:	eb 2e                	jmp    c010a944 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010a916:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a919:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a91c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a920:	89 04 24             	mov    %eax,(%esp)
c010a923:	e8 8e 59 00 00       	call   c01102b6 <vfs_link>
c010a928:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010a92b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a92e:	89 04 24             	mov    %eax,(%esp)
c010a931:	e8 e7 b2 ff ff       	call   c0105c1d <kfree>
c010a936:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a939:	89 04 24             	mov    %eax,(%esp)
c010a93c:	e8 dc b2 ff ff       	call   c0105c1d <kfree>
    return ret;
c010a941:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a944:	c9                   	leave  
c010a945:	c3                   	ret    

c010a946 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010a946:	55                   	push   %ebp
c010a947:	89 e5                	mov    %esp,%ebp
c010a949:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010a94c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a94f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a953:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a956:	89 04 24             	mov    %eax,(%esp)
c010a959:	e8 8c fa ff ff       	call   c010a3ea <copy_path>
c010a95e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a961:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a965:	74 05                	je     c010a96c <sysfile_rename+0x26>
        return ret;
c010a967:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a96a:	eb 59                	jmp    c010a9c5 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010a96c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a96f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a973:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a976:	89 04 24             	mov    %eax,(%esp)
c010a979:	e8 6c fa ff ff       	call   c010a3ea <copy_path>
c010a97e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a981:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a985:	74 10                	je     c010a997 <sysfile_rename+0x51>
        kfree(old_path);
c010a987:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a98a:	89 04 24             	mov    %eax,(%esp)
c010a98d:	e8 8b b2 ff ff       	call   c0105c1d <kfree>
        return ret;
c010a992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a995:	eb 2e                	jmp    c010a9c5 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010a997:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a99a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a99d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9a1:	89 04 24             	mov    %eax,(%esp)
c010a9a4:	e8 03 59 00 00       	call   c01102ac <vfs_rename>
c010a9a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010a9ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9af:	89 04 24             	mov    %eax,(%esp)
c010a9b2:	e8 66 b2 ff ff       	call   c0105c1d <kfree>
c010a9b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9ba:	89 04 24             	mov    %eax,(%esp)
c010a9bd:	e8 5b b2 ff ff       	call   c0105c1d <kfree>
    return ret;
c010a9c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a9c5:	c9                   	leave  
c010a9c6:	c3                   	ret    

c010a9c7 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010a9c7:	55                   	push   %ebp
c010a9c8:	89 e5                	mov    %esp,%ebp
c010a9ca:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010a9cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9d4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a9d7:	89 04 24             	mov    %eax,(%esp)
c010a9da:	e8 0b fa ff ff       	call   c010a3ea <copy_path>
c010a9df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9e6:	74 05                	je     c010a9ed <sysfile_unlink+0x26>
        return ret;
c010a9e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9eb:	eb 1c                	jmp    c010aa09 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010a9ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9f0:	89 04 24             	mov    %eax,(%esp)
c010a9f3:	e8 aa 58 00 00       	call   c01102a2 <vfs_unlink>
c010a9f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010a9fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9fe:	89 04 24             	mov    %eax,(%esp)
c010aa01:	e8 17 b2 ff ff       	call   c0105c1d <kfree>
    return ret;
c010aa06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa09:	c9                   	leave  
c010aa0a:	c3                   	ret    

c010aa0b <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010aa0b:	55                   	push   %ebp
c010aa0c:	89 e5                	mov    %esp,%ebp
c010aa0e:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010aa11:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010aa16:	8b 40 18             	mov    0x18(%eax),%eax
c010aa19:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010aa1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aa20:	75 07                	jne    c010aa29 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010aa22:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aa27:	eb 77                	jmp    c010aaa0 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010aa29:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010aa30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa33:	89 04 24             	mov    %eax,(%esp)
c010aa36:	e8 56 f9 ff ff       	call   c010a391 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010aa3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa3e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010aa45:	00 
c010aa46:	8b 55 0c             	mov    0xc(%ebp),%edx
c010aa49:	89 54 24 08          	mov    %edx,0x8(%esp)
c010aa4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa54:	89 04 24             	mov    %eax,(%esp)
c010aa57:	e8 06 9d ff ff       	call   c0104762 <user_mem_check>
c010aa5c:	85 c0                	test   %eax,%eax
c010aa5e:	74 32                	je     c010aa92 <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010aa60:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010aa67:	00 
c010aa68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa6b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aa6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa72:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa76:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010aa79:	89 04 24             	mov    %eax,(%esp)
c010aa7c:	e8 65 0f 00 00       	call   c010b9e6 <iobuf_init>
c010aa81:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010aa84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa87:	89 04 24             	mov    %eax,(%esp)
c010aa8a:	e8 d4 50 00 00       	call   c010fb63 <vfs_getcwd>
c010aa8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010aa92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa95:	89 04 24             	mov    %eax,(%esp)
c010aa98:	e8 27 f9 ff ff       	call   c010a3c4 <unlock_mm>
    return ret;
c010aa9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aaa0:	c9                   	leave  
c010aaa1:	c3                   	ret    

c010aaa2 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010aaa2:	55                   	push   %ebp
c010aaa3:	89 e5                	mov    %esp,%ebp
c010aaa5:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010aaa8:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010aaad:	8b 40 18             	mov    0x18(%eax),%eax
c010aab0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010aab3:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010aaba:	e8 43 b1 ff ff       	call   c0105c02 <kmalloc>
c010aabf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aac2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aac6:	75 0a                	jne    c010aad2 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010aac8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010aacd:	e9 c2 00 00 00       	jmp    c010ab94 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010aad2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010aad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aadc:	89 04 24             	mov    %eax,(%esp)
c010aadf:	e8 ad f8 ff ff       	call   c010a391 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010aae4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010aae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aaea:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010aaf1:	00 
c010aaf2:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010aaf9:	00 
c010aafa:	89 54 24 08          	mov    %edx,0x8(%esp)
c010aafe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab05:	89 04 24             	mov    %eax,(%esp)
c010ab08:	e8 4a 92 ff ff       	call   c0103d57 <copy_from_user>
c010ab0d:	85 c0                	test   %eax,%eax
c010ab0f:	75 07                	jne    c010ab18 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010ab11:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010ab18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab1b:	89 04 24             	mov    %eax,(%esp)
c010ab1e:	e8 a1 f8 ff ff       	call   c010a3c4 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010ab23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab27:	75 5d                	jne    c010ab86 <sysfile_getdirentry+0xe4>
c010ab29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab30:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab33:	89 04 24             	mov    %eax,(%esp)
c010ab36:	e8 3d 0d 00 00       	call   c010b878 <file_getdirentry>
c010ab3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab42:	75 42                	jne    c010ab86 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010ab44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab47:	89 04 24             	mov    %eax,(%esp)
c010ab4a:	e8 42 f8 ff ff       	call   c010a391 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010ab4f:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010ab56:	00 
c010ab57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ab5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab61:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab68:	89 04 24             	mov    %eax,(%esp)
c010ab6b:	e8 38 92 ff ff       	call   c0103da8 <copy_to_user>
c010ab70:	85 c0                	test   %eax,%eax
c010ab72:	75 07                	jne    c010ab7b <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010ab74:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010ab7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab7e:	89 04 24             	mov    %eax,(%esp)
c010ab81:	e8 3e f8 ff ff       	call   c010a3c4 <unlock_mm>

out:
    kfree(direntp);
c010ab86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab89:	89 04 24             	mov    %eax,(%esp)
c010ab8c:	e8 8c b0 ff ff       	call   c0105c1d <kfree>
    return ret;
c010ab91:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ab94:	c9                   	leave  
c010ab95:	c3                   	ret    

c010ab96 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010ab96:	55                   	push   %ebp
c010ab97:	89 e5                	mov    %esp,%ebp
c010ab99:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010ab9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aba3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba6:	89 04 24             	mov    %eax,(%esp)
c010aba9:	e8 d8 0d 00 00       	call   c010b986 <file_dup>
}
c010abae:	c9                   	leave  
c010abaf:	c3                   	ret    

c010abb0 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010abb0:	55                   	push   %ebp
c010abb1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010abb3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010abb8:	5d                   	pop    %ebp
c010abb9:	c3                   	ret    

c010abba <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010abba:	55                   	push   %ebp
c010abbb:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010abbd:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010abc2:	5d                   	pop    %ebp
c010abc3:	c3                   	ret    

c010abc4 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010abc4:	55                   	push   %ebp
c010abc5:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010abc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010abca:	8b 40 08             	mov    0x8(%eax),%eax
}
c010abcd:	5d                   	pop    %ebp
c010abce:	c3                   	ret    

c010abcf <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010abcf:	55                   	push   %ebp
c010abd0:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010abd2:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd5:	8b 40 18             	mov    0x18(%eax),%eax
}
c010abd8:	5d                   	pop    %ebp
c010abd9:	c3                   	ret    

c010abda <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010abda:	55                   	push   %ebp
c010abdb:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010abdd:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe0:	8b 40 18             	mov    0x18(%eax),%eax
c010abe3:	8d 50 01             	lea    0x1(%eax),%edx
c010abe6:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe9:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010abec:	8b 45 08             	mov    0x8(%ebp),%eax
c010abef:	8b 40 18             	mov    0x18(%eax),%eax
}
c010abf2:	5d                   	pop    %ebp
c010abf3:	c3                   	ret    

c010abf4 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010abf4:	55                   	push   %ebp
c010abf5:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010abf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010abfa:	8b 40 18             	mov    0x18(%eax),%eax
c010abfd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ac00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac03:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010ac06:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac09:	8b 40 18             	mov    0x18(%eax),%eax
}
c010ac0c:	5d                   	pop    %ebp
c010ac0d:	c3                   	ret    

c010ac0e <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010ac0e:	55                   	push   %ebp
c010ac0f:	89 e5                	mov    %esp,%ebp
c010ac11:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010ac14:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ac19:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ac1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010ac22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac26:	74 0f                	je     c010ac37 <get_fd_array+0x29>
c010ac28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac2b:	89 04 24             	mov    %eax,(%esp)
c010ac2e:	e8 91 ff ff ff       	call   c010abc4 <files_count>
c010ac33:	85 c0                	test   %eax,%eax
c010ac35:	7f 24                	jg     c010ac5b <get_fd_array+0x4d>
c010ac37:	c7 44 24 0c 34 7d 11 	movl   $0xc0117d34,0xc(%esp)
c010ac3e:	c0 
c010ac3f:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010ac46:	c0 
c010ac47:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010ac4e:	00 
c010ac4f:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010ac56:	e8 98 58 ff ff       	call   c01004f3 <__panic>
    return filesp->fd_array;
c010ac5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac5e:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ac61:	c9                   	leave  
c010ac62:	c3                   	ret    

c010ac63 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010ac63:	55                   	push   %ebp
c010ac64:	89 e5                	mov    %esp,%ebp
c010ac66:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010ac69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010ac6f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010ac76:	eb 24                	jmp    c010ac9c <fd_array_init+0x39>
        file->open_count = 0;
c010ac78:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ac7b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010ac82:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ac85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010ac8b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ac8e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ac91:	89 50 0c             	mov    %edx,0xc(%eax)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010ac94:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010ac98:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010ac9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac9f:	3d 90 00 00 00       	cmp    $0x90,%eax
c010aca4:	76 d2                	jbe    c010ac78 <fd_array_init+0x15>
    }
}
c010aca6:	c9                   	leave  
c010aca7:	c3                   	ret    

c010aca8 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010aca8:	55                   	push   %ebp
c010aca9:	89 e5                	mov    %esp,%ebp
c010acab:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010acae:	e8 5b ff ff ff       	call   c010ac0e <get_fd_array>
c010acb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010acb6:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010acbd:	75 30                	jne    c010acef <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010acbf:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010acc6:	eb 13                	jmp    c010acdb <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010acc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010accb:	8b 00                	mov    (%eax),%eax
c010accd:	85 c0                	test   %eax,%eax
c010accf:	75 02                	jne    c010acd3 <fd_array_alloc+0x2b>
                goto found;
c010acd1:	eb 59                	jmp    c010ad2c <fd_array_alloc+0x84>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010acd3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010acd7:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010acdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010acde:	3d 90 00 00 00       	cmp    $0x90,%eax
c010ace3:	76 e3                	jbe    c010acc8 <fd_array_alloc+0x20>
            }
        }
        return -E_MAX_OPEN;
c010ace5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010acea:	e9 90 00 00 00       	jmp    c010ad7f <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010acef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010acf3:	78 30                	js     c010ad25 <fd_array_alloc+0x7d>
c010acf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf8:	3d 90 00 00 00       	cmp    $0x90,%eax
c010acfd:	77 26                	ja     c010ad25 <fd_array_alloc+0x7d>
            file += fd;
c010acff:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad02:	c1 e0 02             	shl    $0x2,%eax
c010ad05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010ad0c:	29 c2                	sub    %eax,%edx
c010ad0e:	89 d0                	mov    %edx,%eax
c010ad10:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010ad13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad16:	8b 00                	mov    (%eax),%eax
c010ad18:	85 c0                	test   %eax,%eax
c010ad1a:	75 02                	jne    c010ad1e <fd_array_alloc+0x76>
                goto found;
c010ad1c:	eb 0e                	jmp    c010ad2c <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010ad1e:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010ad23:	eb 5a                	jmp    c010ad7f <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010ad25:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ad2a:	eb 53                	jmp    c010ad7f <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010ad2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad2f:	89 04 24             	mov    %eax,(%esp)
c010ad32:	e8 98 fe ff ff       	call   c010abcf <fopen_count>
c010ad37:	85 c0                	test   %eax,%eax
c010ad39:	74 24                	je     c010ad5f <fd_array_alloc+0xb7>
c010ad3b:	c7 44 24 0c 82 7d 11 	movl   $0xc0117d82,0xc(%esp)
c010ad42:	c0 
c010ad43:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010ad4a:	c0 
c010ad4b:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010ad52:	00 
c010ad53:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010ad5a:	e8 94 57 ff ff       	call   c01004f3 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010ad5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad62:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010ad68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad6b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010ad72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad75:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad78:	89 10                	mov    %edx,(%eax)
    return 0;
c010ad7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad7f:	c9                   	leave  
c010ad80:	c3                   	ret    

c010ad81 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010ad81:	55                   	push   %ebp
c010ad82:	89 e5                	mov    %esp,%ebp
c010ad84:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010ad87:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad8a:	8b 00                	mov    (%eax),%eax
c010ad8c:	83 f8 01             	cmp    $0x1,%eax
c010ad8f:	74 2e                	je     c010adbf <fd_array_free+0x3e>
c010ad91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad94:	8b 00                	mov    (%eax),%eax
c010ad96:	83 f8 03             	cmp    $0x3,%eax
c010ad99:	74 24                	je     c010adbf <fd_array_free+0x3e>
c010ad9b:	c7 44 24 0c 9c 7d 11 	movl   $0xc0117d9c,0xc(%esp)
c010ada2:	c0 
c010ada3:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010adaa:	c0 
c010adab:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010adb2:	00 
c010adb3:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010adba:	e8 34 57 ff ff       	call   c01004f3 <__panic>
    assert(fopen_count(file) == 0);
c010adbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc2:	89 04 24             	mov    %eax,(%esp)
c010adc5:	e8 05 fe ff ff       	call   c010abcf <fopen_count>
c010adca:	85 c0                	test   %eax,%eax
c010adcc:	74 24                	je     c010adf2 <fd_array_free+0x71>
c010adce:	c7 44 24 0c 82 7d 11 	movl   $0xc0117d82,0xc(%esp)
c010add5:	c0 
c010add6:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010addd:	c0 
c010adde:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010ade5:	00 
c010ade6:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010aded:	e8 01 57 ff ff       	call   c01004f3 <__panic>
    if (file->status == FD_CLOSED) {
c010adf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010adf5:	8b 00                	mov    (%eax),%eax
c010adf7:	83 f8 03             	cmp    $0x3,%eax
c010adfa:	75 0e                	jne    c010ae0a <fd_array_free+0x89>
        vfs_close(file->node);
c010adfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010adff:	8b 40 14             	mov    0x14(%eax),%eax
c010ae02:	89 04 24             	mov    %eax,(%esp)
c010ae05:	e8 75 54 00 00       	call   c011027f <vfs_close>
    }
    file->status = FD_NONE;
c010ae0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010ae13:	c9                   	leave  
c010ae14:	c3                   	ret    

c010ae15 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010ae15:	55                   	push   %ebp
c010ae16:	89 e5                	mov    %esp,%ebp
c010ae18:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010ae1b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae1e:	8b 00                	mov    (%eax),%eax
c010ae20:	83 f8 02             	cmp    $0x2,%eax
c010ae23:	74 24                	je     c010ae49 <fd_array_acquire+0x34>
c010ae25:	c7 44 24 0c d1 7d 11 	movl   $0xc0117dd1,0xc(%esp)
c010ae2c:	c0 
c010ae2d:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010ae34:	c0 
c010ae35:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010ae3c:	00 
c010ae3d:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010ae44:	e8 aa 56 ff ff       	call   c01004f3 <__panic>
    fopen_count_inc(file);
c010ae49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae4c:	89 04 24             	mov    %eax,(%esp)
c010ae4f:	e8 86 fd ff ff       	call   c010abda <fopen_count_inc>
}
c010ae54:	c9                   	leave  
c010ae55:	c3                   	ret    

c010ae56 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010ae56:	55                   	push   %ebp
c010ae57:	89 e5                	mov    %esp,%ebp
c010ae59:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010ae5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae5f:	8b 00                	mov    (%eax),%eax
c010ae61:	83 f8 02             	cmp    $0x2,%eax
c010ae64:	74 2e                	je     c010ae94 <fd_array_release+0x3e>
c010ae66:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae69:	8b 00                	mov    (%eax),%eax
c010ae6b:	83 f8 03             	cmp    $0x3,%eax
c010ae6e:	74 24                	je     c010ae94 <fd_array_release+0x3e>
c010ae70:	c7 44 24 0c ec 7d 11 	movl   $0xc0117dec,0xc(%esp)
c010ae77:	c0 
c010ae78:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010ae7f:	c0 
c010ae80:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010ae87:	00 
c010ae88:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010ae8f:	e8 5f 56 ff ff       	call   c01004f3 <__panic>
    assert(fopen_count(file) > 0);
c010ae94:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae97:	89 04 24             	mov    %eax,(%esp)
c010ae9a:	e8 30 fd ff ff       	call   c010abcf <fopen_count>
c010ae9f:	85 c0                	test   %eax,%eax
c010aea1:	7f 24                	jg     c010aec7 <fd_array_release+0x71>
c010aea3:	c7 44 24 0c 23 7e 11 	movl   $0xc0117e23,0xc(%esp)
c010aeaa:	c0 
c010aeab:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010aeb2:	c0 
c010aeb3:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010aeba:	00 
c010aebb:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010aec2:	e8 2c 56 ff ff       	call   c01004f3 <__panic>
    if (fopen_count_dec(file) == 0) {
c010aec7:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeca:	89 04 24             	mov    %eax,(%esp)
c010aecd:	e8 22 fd ff ff       	call   c010abf4 <fopen_count_dec>
c010aed2:	85 c0                	test   %eax,%eax
c010aed4:	75 0b                	jne    c010aee1 <fd_array_release+0x8b>
        fd_array_free(file);
c010aed6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed9:	89 04 24             	mov    %eax,(%esp)
c010aedc:	e8 a0 fe ff ff       	call   c010ad81 <fd_array_free>
    }
}
c010aee1:	c9                   	leave  
c010aee2:	c3                   	ret    

c010aee3 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010aee3:	55                   	push   %ebp
c010aee4:	89 e5                	mov    %esp,%ebp
c010aee6:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010aee9:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeec:	8b 00                	mov    (%eax),%eax
c010aeee:	83 f8 01             	cmp    $0x1,%eax
c010aef1:	75 0a                	jne    c010aefd <fd_array_open+0x1a>
c010aef3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aef6:	8b 40 14             	mov    0x14(%eax),%eax
c010aef9:	85 c0                	test   %eax,%eax
c010aefb:	75 24                	jne    c010af21 <fd_array_open+0x3e>
c010aefd:	c7 44 24 0c 3c 7e 11 	movl   $0xc0117e3c,0xc(%esp)
c010af04:	c0 
c010af05:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010af0c:	c0 
c010af0d:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010af14:	00 
c010af15:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010af1c:	e8 d2 55 ff ff       	call   c01004f3 <__panic>
    file->status = FD_OPENED;
c010af21:	8b 45 08             	mov    0x8(%ebp),%eax
c010af24:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010af2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af2d:	89 04 24             	mov    %eax,(%esp)
c010af30:	e8 a5 fc ff ff       	call   c010abda <fopen_count_inc>
}
c010af35:	c9                   	leave  
c010af36:	c3                   	ret    

c010af37 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010af37:	55                   	push   %ebp
c010af38:	89 e5                	mov    %esp,%ebp
c010af3a:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010af3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010af40:	8b 00                	mov    (%eax),%eax
c010af42:	83 f8 02             	cmp    $0x2,%eax
c010af45:	74 24                	je     c010af6b <fd_array_close+0x34>
c010af47:	c7 44 24 0c d1 7d 11 	movl   $0xc0117dd1,0xc(%esp)
c010af4e:	c0 
c010af4f:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010af56:	c0 
c010af57:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010af5e:	00 
c010af5f:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010af66:	e8 88 55 ff ff       	call   c01004f3 <__panic>
    assert(fopen_count(file) > 0);
c010af6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6e:	89 04 24             	mov    %eax,(%esp)
c010af71:	e8 59 fc ff ff       	call   c010abcf <fopen_count>
c010af76:	85 c0                	test   %eax,%eax
c010af78:	7f 24                	jg     c010af9e <fd_array_close+0x67>
c010af7a:	c7 44 24 0c 23 7e 11 	movl   $0xc0117e23,0xc(%esp)
c010af81:	c0 
c010af82:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010af89:	c0 
c010af8a:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010af91:	00 
c010af92:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010af99:	e8 55 55 ff ff       	call   c01004f3 <__panic>
    file->status = FD_CLOSED;
c010af9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010afa1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010afa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afaa:	89 04 24             	mov    %eax,(%esp)
c010afad:	e8 42 fc ff ff       	call   c010abf4 <fopen_count_dec>
c010afb2:	85 c0                	test   %eax,%eax
c010afb4:	75 0b                	jne    c010afc1 <fd_array_close+0x8a>
        fd_array_free(file);
c010afb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010afb9:	89 04 24             	mov    %eax,(%esp)
c010afbc:	e8 c0 fd ff ff       	call   c010ad81 <fd_array_free>
    }
}
c010afc1:	c9                   	leave  
c010afc2:	c3                   	ret    

c010afc3 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010afc3:	55                   	push   %ebp
c010afc4:	89 e5                	mov    %esp,%ebp
c010afc6:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010afc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010afcc:	8b 00                	mov    (%eax),%eax
c010afce:	83 f8 01             	cmp    $0x1,%eax
c010afd1:	75 0a                	jne    c010afdd <fd_array_dup+0x1a>
c010afd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afd6:	8b 00                	mov    (%eax),%eax
c010afd8:	83 f8 02             	cmp    $0x2,%eax
c010afdb:	74 24                	je     c010b001 <fd_array_dup+0x3e>
c010afdd:	c7 44 24 0c 6c 7e 11 	movl   $0xc0117e6c,0xc(%esp)
c010afe4:	c0 
c010afe5:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010afec:	c0 
c010afed:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010aff4:	00 
c010aff5:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010affc:	e8 f2 54 ff ff       	call   c01004f3 <__panic>
    to->pos = from->pos;
c010b001:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b004:	8b 50 10             	mov    0x10(%eax),%edx
c010b007:	8b 45 08             	mov    0x8(%ebp),%eax
c010b00a:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010b00d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b010:	8b 50 04             	mov    0x4(%eax),%edx
c010b013:	8b 45 08             	mov    0x8(%ebp),%eax
c010b016:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010b019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b01c:	8b 50 08             	mov    0x8(%eax),%edx
c010b01f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b022:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010b025:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b028:	8b 40 14             	mov    0x14(%eax),%eax
c010b02b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010b02e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b031:	89 04 24             	mov    %eax,(%esp)
c010b034:	e8 96 53 00 00       	call   c01103cf <inode_ref_inc>
c010b039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b03c:	89 04 24             	mov    %eax,(%esp)
c010b03f:	e8 92 54 00 00       	call   c01104d6 <inode_open_inc>
    to->node = node;
c010b044:	8b 45 08             	mov    0x8(%ebp),%eax
c010b047:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b04a:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010b04d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b050:	89 04 24             	mov    %eax,(%esp)
c010b053:	e8 8b fe ff ff       	call   c010aee3 <fd_array_open>
}
c010b058:	c9                   	leave  
c010b059:	c3                   	ret    

c010b05a <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010b05a:	55                   	push   %ebp
c010b05b:	89 e5                	mov    %esp,%ebp
c010b05d:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010b060:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b064:	78 4b                	js     c010b0b1 <fd2file+0x57>
c010b066:	8b 45 08             	mov    0x8(%ebp),%eax
c010b069:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b06e:	77 41                	ja     c010b0b1 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010b070:	e8 99 fb ff ff       	call   c010ac0e <get_fd_array>
c010b075:	89 c2                	mov    %eax,%edx
c010b077:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07a:	c1 e0 02             	shl    $0x2,%eax
c010b07d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010b084:	29 c1                	sub    %eax,%ecx
c010b086:	89 c8                	mov    %ecx,%eax
c010b088:	01 d0                	add    %edx,%eax
c010b08a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010b08d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b090:	8b 00                	mov    (%eax),%eax
c010b092:	83 f8 02             	cmp    $0x2,%eax
c010b095:	75 1a                	jne    c010b0b1 <fd2file+0x57>
c010b097:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b09a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b09d:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b0a0:	75 0f                	jne    c010b0b1 <fd2file+0x57>
            *file_store = file;
c010b0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0a8:	89 10                	mov    %edx,(%eax)
            return 0;
c010b0aa:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0af:	eb 05                	jmp    c010b0b6 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010b0b1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b0b6:	c9                   	leave  
c010b0b7:	c3                   	ret    

c010b0b8 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010b0b8:	55                   	push   %ebp
c010b0b9:	89 e5                	mov    %esp,%ebp
c010b0bb:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b0be:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b0c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b0c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c8:	89 04 24             	mov    %eax,(%esp)
c010b0cb:	e8 8a ff ff ff       	call   c010b05a <fd2file>
c010b0d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0d7:	74 07                	je     c010b0e0 <file_testfd+0x28>
        return 0;
c010b0d9:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0de:	eb 33                	jmp    c010b113 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010b0e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b0e4:	74 11                	je     c010b0f7 <file_testfd+0x3f>
c010b0e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0e9:	8b 40 04             	mov    0x4(%eax),%eax
c010b0ec:	85 c0                	test   %eax,%eax
c010b0ee:	75 07                	jne    c010b0f7 <file_testfd+0x3f>
        return 0;
c010b0f0:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0f5:	eb 1c                	jmp    c010b113 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010b0f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b0fb:	74 11                	je     c010b10e <file_testfd+0x56>
c010b0fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b100:	8b 40 08             	mov    0x8(%eax),%eax
c010b103:	85 c0                	test   %eax,%eax
c010b105:	75 07                	jne    c010b10e <file_testfd+0x56>
        return 0;
c010b107:	b8 00 00 00 00       	mov    $0x0,%eax
c010b10c:	eb 05                	jmp    c010b113 <file_testfd+0x5b>
    }
    return 1;
c010b10e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010b113:	c9                   	leave  
c010b114:	c3                   	ret    

c010b115 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010b115:	55                   	push   %ebp
c010b116:	89 e5                	mov    %esp,%ebp
c010b118:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010b11b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010b129:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b12c:	83 e0 03             	and    $0x3,%eax
c010b12f:	83 f8 01             	cmp    $0x1,%eax
c010b132:	74 15                	je     c010b149 <file_open+0x34>
c010b134:	83 f8 01             	cmp    $0x1,%eax
c010b137:	72 07                	jb     c010b140 <file_open+0x2b>
c010b139:	83 f8 02             	cmp    $0x2,%eax
c010b13c:	74 14                	je     c010b152 <file_open+0x3d>
c010b13e:	eb 21                	jmp    c010b161 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010b140:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010b147:	eb 22                	jmp    c010b16b <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010b149:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010b150:	eb 19                	jmp    c010b16b <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010b152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010b159:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b15c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010b15f:	eb 0a                	jmp    c010b16b <file_open+0x56>
    default:
        return -E_INVAL;
c010b161:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b166:	e9 45 01 00 00       	jmp    c010b2b0 <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010b16b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b16e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b172:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010b179:	e8 2a fb ff ff       	call   c010aca8 <fd_array_alloc>
c010b17e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b181:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b185:	74 08                	je     c010b18f <file_open+0x7a>
        return ret;
c010b187:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b18a:	e9 21 01 00 00       	jmp    c010b2b0 <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010b18f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b192:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b196:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b199:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b19d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a0:	89 04 24             	mov    %eax,(%esp)
c010b1a3:	e8 e7 4d 00 00       	call   c010ff8f <vfs_open>
c010b1a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b1ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b1af:	74 13                	je     c010b1c4 <file_open+0xaf>
        fd_array_free(file);
c010b1b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1b4:	89 04 24             	mov    %eax,(%esp)
c010b1b7:	e8 c5 fb ff ff       	call   c010ad81 <fd_array_free>
        return ret;
c010b1bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1bf:	e9 ec 00 00 00       	jmp    c010b2b0 <file_open+0x19b>
    }

    file->pos = 0;
c010b1c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1c7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010b1ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1d1:	83 e0 20             	and    $0x20,%eax
c010b1d4:	85 c0                	test   %eax,%eax
c010b1d6:	0f 84 a8 00 00 00    	je     c010b284 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010b1dc:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010b1df:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010b1e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b1e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b1e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b1ec:	74 17                	je     c010b205 <file_open+0xf0>
c010b1ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b1f1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b1f4:	85 c0                	test   %eax,%eax
c010b1f6:	74 0d                	je     c010b205 <file_open+0xf0>
c010b1f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b1fb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b1fe:	8b 40 14             	mov    0x14(%eax),%eax
c010b201:	85 c0                	test   %eax,%eax
c010b203:	75 24                	jne    c010b229 <file_open+0x114>
c010b205:	c7 44 24 0c a0 7e 11 	movl   $0xc0117ea0,0xc(%esp)
c010b20c:	c0 
c010b20d:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b214:	c0 
c010b215:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010b21c:	00 
c010b21d:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b224:	e8 ca 52 ff ff       	call   c01004f3 <__panic>
c010b229:	c7 44 24 04 ee 7e 11 	movl   $0xc0117eee,0x4(%esp)
c010b230:	c0 
c010b231:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b234:	89 04 24             	mov    %eax,(%esp)
c010b237:	e8 9b 53 00 00       	call   c01105d7 <inode_check>
c010b23c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b23f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b242:	8b 40 14             	mov    0x14(%eax),%eax
c010b245:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b248:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b24b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b24f:	89 14 24             	mov    %edx,(%esp)
c010b252:	ff d0                	call   *%eax
c010b254:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b257:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b25b:	74 1b                	je     c010b278 <file_open+0x163>
            vfs_close(node);
c010b25d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b260:	89 04 24             	mov    %eax,(%esp)
c010b263:	e8 17 50 00 00       	call   c011027f <vfs_close>
            fd_array_free(file);
c010b268:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b26b:	89 04 24             	mov    %eax,(%esp)
c010b26e:	e8 0e fb ff ff       	call   c010ad81 <fd_array_free>
            return ret;
c010b273:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b276:	eb 38                	jmp    c010b2b0 <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010b278:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b27b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b27e:	8b 52 0c             	mov    0xc(%edx),%edx
c010b281:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010b284:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b287:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b28a:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010b28d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b290:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b293:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010b296:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b299:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b29c:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010b29f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2a2:	89 04 24             	mov    %eax,(%esp)
c010b2a5:	e8 39 fc ff ff       	call   c010aee3 <fd_array_open>
    return file->fd;
c010b2aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2ad:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b2b0:	c9                   	leave  
c010b2b1:	c3                   	ret    

c010b2b2 <file_close>:

// close file
int
file_close(int fd) {
c010b2b2:	55                   	push   %ebp
c010b2b3:	89 e5                	mov    %esp,%ebp
c010b2b5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b2b8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b2bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2c2:	89 04 24             	mov    %eax,(%esp)
c010b2c5:	e8 90 fd ff ff       	call   c010b05a <fd2file>
c010b2ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2d1:	74 05                	je     c010b2d8 <file_close+0x26>
        return ret;
c010b2d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2d6:	eb 10                	jmp    c010b2e8 <file_close+0x36>
    }
    fd_array_close(file);
c010b2d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2db:	89 04 24             	mov    %eax,(%esp)
c010b2de:	e8 54 fc ff ff       	call   c010af37 <fd_array_close>
    return 0;
c010b2e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2e8:	c9                   	leave  
c010b2e9:	c3                   	ret    

c010b2ea <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010b2ea:	55                   	push   %ebp
c010b2eb:	89 e5                	mov    %esp,%ebp
c010b2ed:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010b2f0:	8b 45 14             	mov    0x14(%ebp),%eax
c010b2f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010b2f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010b2fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b300:	8b 45 08             	mov    0x8(%ebp),%eax
c010b303:	89 04 24             	mov    %eax,(%esp)
c010b306:	e8 4f fd ff ff       	call   c010b05a <fd2file>
c010b30b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b30e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b312:	74 08                	je     c010b31c <file_read+0x32>
        return ret;
c010b314:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b317:	e9 06 01 00 00       	jmp    c010b422 <file_read+0x138>
    }
    if (!file->readable) {
c010b31c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b31f:	8b 40 04             	mov    0x4(%eax),%eax
c010b322:	85 c0                	test   %eax,%eax
c010b324:	75 0a                	jne    c010b330 <file_read+0x46>
        return -E_INVAL;
c010b326:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b32b:	e9 f2 00 00 00       	jmp    c010b422 <file_read+0x138>
    }
    fd_array_acquire(file);
c010b330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b333:	89 04 24             	mov    %eax,(%esp)
c010b336:	e8 da fa ff ff       	call   c010ae15 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010b33b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b33e:	8b 40 10             	mov    0x10(%eax),%eax
c010b341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b345:	8b 45 10             	mov    0x10(%ebp),%eax
c010b348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b34c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b34f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b353:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010b356:	89 04 24             	mov    %eax,(%esp)
c010b359:	e8 88 06 00 00       	call   c010b9e6 <iobuf_init>
c010b35e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010b361:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b364:	8b 40 14             	mov    0x14(%eax),%eax
c010b367:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b36a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b36e:	74 17                	je     c010b387 <file_read+0x9d>
c010b370:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b373:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b376:	85 c0                	test   %eax,%eax
c010b378:	74 0d                	je     c010b387 <file_read+0x9d>
c010b37a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b37d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b380:	8b 40 0c             	mov    0xc(%eax),%eax
c010b383:	85 c0                	test   %eax,%eax
c010b385:	75 24                	jne    c010b3ab <file_read+0xc1>
c010b387:	c7 44 24 0c f4 7e 11 	movl   $0xc0117ef4,0xc(%esp)
c010b38e:	c0 
c010b38f:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b396:	c0 
c010b397:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010b39e:	00 
c010b39f:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b3a6:	e8 48 51 ff ff       	call   c01004f3 <__panic>
c010b3ab:	c7 44 24 04 41 7f 11 	movl   $0xc0117f41,0x4(%esp)
c010b3b2:	c0 
c010b3b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3b6:	89 04 24             	mov    %eax,(%esp)
c010b3b9:	e8 19 52 00 00       	call   c01105d7 <inode_check>
c010b3be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3c1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b3c4:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b3ca:	8b 52 14             	mov    0x14(%edx),%edx
c010b3cd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b3d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b3d4:	89 14 24             	mov    %edx,(%esp)
c010b3d7:	ff d0                	call   *%eax
c010b3d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010b3dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3df:	8b 50 08             	mov    0x8(%eax),%edx
c010b3e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3e5:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3e8:	29 c2                	sub    %eax,%edx
c010b3ea:	89 d0                	mov    %edx,%eax
c010b3ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010b3ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3f2:	8b 00                	mov    (%eax),%eax
c010b3f4:	83 f8 02             	cmp    $0x2,%eax
c010b3f7:	75 13                	jne    c010b40c <file_read+0x122>
        file->pos += copied;
c010b3f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b3ff:	8b 52 10             	mov    0x10(%edx),%edx
c010b402:	89 d1                	mov    %edx,%ecx
c010b404:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b407:	01 ca                	add    %ecx,%edx
c010b409:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010b40c:	8b 45 14             	mov    0x14(%ebp),%eax
c010b40f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b412:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010b414:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b417:	89 04 24             	mov    %eax,(%esp)
c010b41a:	e8 37 fa ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b41f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b422:	c9                   	leave  
c010b423:	c3                   	ret    

c010b424 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010b424:	55                   	push   %ebp
c010b425:	89 e5                	mov    %esp,%ebp
c010b427:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010b42a:	8b 45 14             	mov    0x14(%ebp),%eax
c010b42d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010b433:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010b436:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b43a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43d:	89 04 24             	mov    %eax,(%esp)
c010b440:	e8 15 fc ff ff       	call   c010b05a <fd2file>
c010b445:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b448:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b44c:	74 08                	je     c010b456 <file_write+0x32>
        return ret;
c010b44e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b451:	e9 06 01 00 00       	jmp    c010b55c <file_write+0x138>
    }
    if (!file->writable) {
c010b456:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b459:	8b 40 08             	mov    0x8(%eax),%eax
c010b45c:	85 c0                	test   %eax,%eax
c010b45e:	75 0a                	jne    c010b46a <file_write+0x46>
        return -E_INVAL;
c010b460:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b465:	e9 f2 00 00 00       	jmp    c010b55c <file_write+0x138>
    }
    fd_array_acquire(file);
c010b46a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b46d:	89 04 24             	mov    %eax,(%esp)
c010b470:	e8 a0 f9 ff ff       	call   c010ae15 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010b475:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b478:	8b 40 10             	mov    0x10(%eax),%eax
c010b47b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b47f:	8b 45 10             	mov    0x10(%ebp),%eax
c010b482:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b486:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b489:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b48d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010b490:	89 04 24             	mov    %eax,(%esp)
c010b493:	e8 4e 05 00 00       	call   c010b9e6 <iobuf_init>
c010b498:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010b49b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b49e:	8b 40 14             	mov    0x14(%eax),%eax
c010b4a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b4a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b4a8:	74 17                	je     c010b4c1 <file_write+0x9d>
c010b4aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4ad:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4b0:	85 c0                	test   %eax,%eax
c010b4b2:	74 0d                	je     c010b4c1 <file_write+0x9d>
c010b4b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4b7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4ba:	8b 40 10             	mov    0x10(%eax),%eax
c010b4bd:	85 c0                	test   %eax,%eax
c010b4bf:	75 24                	jne    c010b4e5 <file_write+0xc1>
c010b4c1:	c7 44 24 0c 48 7f 11 	movl   $0xc0117f48,0xc(%esp)
c010b4c8:	c0 
c010b4c9:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b4d0:	c0 
c010b4d1:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010b4d8:	00 
c010b4d9:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b4e0:	e8 0e 50 ff ff       	call   c01004f3 <__panic>
c010b4e5:	c7 44 24 04 96 7f 11 	movl   $0xc0117f96,0x4(%esp)
c010b4ec:	c0 
c010b4ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4f0:	89 04 24             	mov    %eax,(%esp)
c010b4f3:	e8 df 50 00 00       	call   c01105d7 <inode_check>
c010b4f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4fb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4fe:	8b 40 10             	mov    0x10(%eax),%eax
c010b501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b504:	8b 52 14             	mov    0x14(%edx),%edx
c010b507:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b50a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b50e:	89 14 24             	mov    %edx,(%esp)
c010b511:	ff d0                	call   *%eax
c010b513:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010b516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b519:	8b 50 08             	mov    0x8(%eax),%edx
c010b51c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b51f:	8b 40 0c             	mov    0xc(%eax),%eax
c010b522:	29 c2                	sub    %eax,%edx
c010b524:	89 d0                	mov    %edx,%eax
c010b526:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010b529:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b52c:	8b 00                	mov    (%eax),%eax
c010b52e:	83 f8 02             	cmp    $0x2,%eax
c010b531:	75 13                	jne    c010b546 <file_write+0x122>
        file->pos += copied;
c010b533:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b536:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b539:	8b 52 10             	mov    0x10(%edx),%edx
c010b53c:	89 d1                	mov    %edx,%ecx
c010b53e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b541:	01 ca                	add    %ecx,%edx
c010b543:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010b546:	8b 45 14             	mov    0x14(%ebp),%eax
c010b549:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b54c:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010b54e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b551:	89 04 24             	mov    %eax,(%esp)
c010b554:	e8 fd f8 ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b559:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b55c:	c9                   	leave  
c010b55d:	c3                   	ret    

c010b55e <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010b55e:	55                   	push   %ebp
c010b55f:	89 e5                	mov    %esp,%ebp
c010b561:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010b564:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b567:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b56a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010b56d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b571:	8b 45 08             	mov    0x8(%ebp),%eax
c010b574:	89 04 24             	mov    %eax,(%esp)
c010b577:	e8 de fa ff ff       	call   c010b05a <fd2file>
c010b57c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b57f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b583:	74 08                	je     c010b58d <file_seek+0x2f>
        return ret;
c010b585:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b588:	e9 72 01 00 00       	jmp    c010b6ff <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010b58d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b590:	89 04 24             	mov    %eax,(%esp)
c010b593:	e8 7d f8 ff ff       	call   c010ae15 <fd_array_acquire>

    switch (whence) {
c010b598:	8b 45 10             	mov    0x10(%ebp),%eax
c010b59b:	83 f8 01             	cmp    $0x1,%eax
c010b59e:	74 12                	je     c010b5b2 <file_seek+0x54>
c010b5a0:	83 f8 02             	cmp    $0x2,%eax
c010b5a3:	74 1b                	je     c010b5c0 <file_seek+0x62>
c010b5a5:	85 c0                	test   %eax,%eax
c010b5a7:	0f 84 af 00 00 00    	je     c010b65c <file_seek+0xfe>
c010b5ad:	e9 a1 00 00 00       	jmp    c010b653 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010b5b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5b5:	8b 40 10             	mov    0x10(%eax),%eax
c010b5b8:	01 45 0c             	add    %eax,0xc(%ebp)
c010b5bb:	e9 9d 00 00 00       	jmp    c010b65d <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010b5c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5c3:	8b 40 14             	mov    0x14(%eax),%eax
c010b5c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b5c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b5cd:	74 17                	je     c010b5e6 <file_seek+0x88>
c010b5cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5d2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b5d5:	85 c0                	test   %eax,%eax
c010b5d7:	74 0d                	je     c010b5e6 <file_seek+0x88>
c010b5d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5dc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b5df:	8b 40 14             	mov    0x14(%eax),%eax
c010b5e2:	85 c0                	test   %eax,%eax
c010b5e4:	75 24                	jne    c010b60a <file_seek+0xac>
c010b5e6:	c7 44 24 0c a0 7e 11 	movl   $0xc0117ea0,0xc(%esp)
c010b5ed:	c0 
c010b5ee:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b5f5:	c0 
c010b5f6:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010b5fd:	00 
c010b5fe:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b605:	e8 e9 4e ff ff       	call   c01004f3 <__panic>
c010b60a:	c7 44 24 04 ee 7e 11 	movl   $0xc0117eee,0x4(%esp)
c010b611:	c0 
c010b612:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b615:	89 04 24             	mov    %eax,(%esp)
c010b618:	e8 ba 4f 00 00       	call   c01105d7 <inode_check>
c010b61d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b620:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b623:	8b 40 14             	mov    0x14(%eax),%eax
c010b626:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b629:	8b 52 14             	mov    0x14(%edx),%edx
c010b62c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b62f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b633:	89 14 24             	mov    %edx,(%esp)
c010b636:	ff d0                	call   *%eax
c010b638:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b63b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b63f:	75 10                	jne    c010b651 <file_seek+0xf3>
            pos += stat->st_size;
c010b641:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b644:	8b 50 0c             	mov    0xc(%eax),%edx
c010b647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b64a:	01 d0                	add    %edx,%eax
c010b64c:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010b64f:	eb 0c                	jmp    c010b65d <file_seek+0xff>
c010b651:	eb 0a                	jmp    c010b65d <file_seek+0xff>
    default: ret = -E_INVAL;
c010b653:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010b65a:	eb 01                	jmp    c010b65d <file_seek+0xff>
    case LSEEK_SET: break;
c010b65c:	90                   	nop
    }

    if (ret == 0) {
c010b65d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b661:	0f 85 8a 00 00 00    	jne    c010b6f1 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010b667:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b66a:	8b 40 14             	mov    0x14(%eax),%eax
c010b66d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b670:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b674:	74 17                	je     c010b68d <file_seek+0x12f>
c010b676:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b679:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b67c:	85 c0                	test   %eax,%eax
c010b67e:	74 0d                	je     c010b68d <file_seek+0x12f>
c010b680:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b683:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b686:	8b 40 2c             	mov    0x2c(%eax),%eax
c010b689:	85 c0                	test   %eax,%eax
c010b68b:	75 24                	jne    c010b6b1 <file_seek+0x153>
c010b68d:	c7 44 24 0c 9c 7f 11 	movl   $0xc0117f9c,0xc(%esp)
c010b694:	c0 
c010b695:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b69c:	c0 
c010b69d:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010b6a4:	00 
c010b6a5:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b6ac:	e8 42 4e ff ff       	call   c01004f3 <__panic>
c010b6b1:	c7 44 24 04 ec 7f 11 	movl   $0xc0117fec,0x4(%esp)
c010b6b8:	c0 
c010b6b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6bc:	89 04 24             	mov    %eax,(%esp)
c010b6bf:	e8 13 4f 00 00       	call   c01105d7 <inode_check>
c010b6c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b6ca:	8b 40 2c             	mov    0x2c(%eax),%eax
c010b6cd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b6d0:	8b 52 14             	mov    0x14(%edx),%edx
c010b6d3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010b6d6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b6da:	89 14 24             	mov    %edx,(%esp)
c010b6dd:	ff d0                	call   *%eax
c010b6df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6e6:	75 09                	jne    c010b6f1 <file_seek+0x193>
            file->pos = pos;
c010b6e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b6eb:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b6ee:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010b6f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b6f4:	89 04 24             	mov    %eax,(%esp)
c010b6f7:	e8 5a f7 ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b6fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b6ff:	c9                   	leave  
c010b700:	c3                   	ret    

c010b701 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010b701:	55                   	push   %ebp
c010b702:	89 e5                	mov    %esp,%ebp
c010b704:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b707:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b70a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b70e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b711:	89 04 24             	mov    %eax,(%esp)
c010b714:	e8 41 f9 ff ff       	call   c010b05a <fd2file>
c010b719:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b71c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b720:	74 08                	je     c010b72a <file_fstat+0x29>
        return ret;
c010b722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b725:	e9 94 00 00 00       	jmp    c010b7be <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010b72a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b72d:	89 04 24             	mov    %eax,(%esp)
c010b730:	e8 e0 f6 ff ff       	call   c010ae15 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010b735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b738:	8b 40 14             	mov    0x14(%eax),%eax
c010b73b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b73e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b742:	74 17                	je     c010b75b <file_fstat+0x5a>
c010b744:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b747:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b74a:	85 c0                	test   %eax,%eax
c010b74c:	74 0d                	je     c010b75b <file_fstat+0x5a>
c010b74e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b751:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b754:	8b 40 14             	mov    0x14(%eax),%eax
c010b757:	85 c0                	test   %eax,%eax
c010b759:	75 24                	jne    c010b77f <file_fstat+0x7e>
c010b75b:	c7 44 24 0c a0 7e 11 	movl   $0xc0117ea0,0xc(%esp)
c010b762:	c0 
c010b763:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b76a:	c0 
c010b76b:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010b772:	00 
c010b773:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b77a:	e8 74 4d ff ff       	call   c01004f3 <__panic>
c010b77f:	c7 44 24 04 ee 7e 11 	movl   $0xc0117eee,0x4(%esp)
c010b786:	c0 
c010b787:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b78a:	89 04 24             	mov    %eax,(%esp)
c010b78d:	e8 45 4e 00 00       	call   c01105d7 <inode_check>
c010b792:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b795:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b798:	8b 40 14             	mov    0x14(%eax),%eax
c010b79b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b79e:	8b 52 14             	mov    0x14(%edx),%edx
c010b7a1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010b7a4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b7a8:	89 14 24             	mov    %edx,(%esp)
c010b7ab:	ff d0                	call   *%eax
c010b7ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010b7b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7b3:	89 04 24             	mov    %eax,(%esp)
c010b7b6:	e8 9b f6 ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b7be:	c9                   	leave  
c010b7bf:	c3                   	ret    

c010b7c0 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010b7c0:	55                   	push   %ebp
c010b7c1:	89 e5                	mov    %esp,%ebp
c010b7c3:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b7c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b7c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7d0:	89 04 24             	mov    %eax,(%esp)
c010b7d3:	e8 82 f8 ff ff       	call   c010b05a <fd2file>
c010b7d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b7db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7df:	74 08                	je     c010b7e9 <file_fsync+0x29>
        return ret;
c010b7e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7e4:	e9 8d 00 00 00       	jmp    c010b876 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010b7e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7ec:	89 04 24             	mov    %eax,(%esp)
c010b7ef:	e8 21 f6 ff ff       	call   c010ae15 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010b7f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7f7:	8b 40 14             	mov    0x14(%eax),%eax
c010b7fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b801:	74 17                	je     c010b81a <file_fsync+0x5a>
c010b803:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b806:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b809:	85 c0                	test   %eax,%eax
c010b80b:	74 0d                	je     c010b81a <file_fsync+0x5a>
c010b80d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b810:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b813:	8b 40 18             	mov    0x18(%eax),%eax
c010b816:	85 c0                	test   %eax,%eax
c010b818:	75 24                	jne    c010b83e <file_fsync+0x7e>
c010b81a:	c7 44 24 0c f4 7f 11 	movl   $0xc0117ff4,0xc(%esp)
c010b821:	c0 
c010b822:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b829:	c0 
c010b82a:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010b831:	00 
c010b832:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b839:	e8 b5 4c ff ff       	call   c01004f3 <__panic>
c010b83e:	c7 44 24 04 42 80 11 	movl   $0xc0118042,0x4(%esp)
c010b845:	c0 
c010b846:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b849:	89 04 24             	mov    %eax,(%esp)
c010b84c:	e8 86 4d 00 00       	call   c01105d7 <inode_check>
c010b851:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b854:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b857:	8b 40 18             	mov    0x18(%eax),%eax
c010b85a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b85d:	8b 52 14             	mov    0x14(%edx),%edx
c010b860:	89 14 24             	mov    %edx,(%esp)
c010b863:	ff d0                	call   *%eax
c010b865:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010b868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b86b:	89 04 24             	mov    %eax,(%esp)
c010b86e:	e8 e3 f5 ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b873:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b876:	c9                   	leave  
c010b877:	c3                   	ret    

c010b878 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010b878:	55                   	push   %ebp
c010b879:	89 e5                	mov    %esp,%ebp
c010b87b:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b87e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b881:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b885:	8b 45 08             	mov    0x8(%ebp),%eax
c010b888:	89 04 24             	mov    %eax,(%esp)
c010b88b:	e8 ca f7 ff ff       	call   c010b05a <fd2file>
c010b890:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b893:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b897:	74 08                	je     c010b8a1 <file_getdirentry+0x29>
        return ret;
c010b899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b89c:	e9 e3 00 00 00       	jmp    c010b984 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010b8a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8a4:	89 04 24             	mov    %eax,(%esp)
c010b8a7:	e8 69 f5 ff ff       	call   c010ae15 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010b8ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8af:	8b 00                	mov    (%eax),%eax
c010b8b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b8b4:	83 c2 04             	add    $0x4,%edx
c010b8b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b8bb:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010b8c2:	00 
c010b8c3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8c7:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b8ca:	89 04 24             	mov    %eax,(%esp)
c010b8cd:	e8 14 01 00 00       	call   c010b9e6 <iobuf_init>
c010b8d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010b8d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8d8:	8b 40 14             	mov    0x14(%eax),%eax
c010b8db:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b8de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b8e2:	74 17                	je     c010b8fb <file_getdirentry+0x83>
c010b8e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8e7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b8ea:	85 c0                	test   %eax,%eax
c010b8ec:	74 0d                	je     c010b8fb <file_getdirentry+0x83>
c010b8ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8f1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b8f4:	8b 40 20             	mov    0x20(%eax),%eax
c010b8f7:	85 c0                	test   %eax,%eax
c010b8f9:	75 24                	jne    c010b91f <file_getdirentry+0xa7>
c010b8fb:	c7 44 24 0c 48 80 11 	movl   $0xc0118048,0xc(%esp)
c010b902:	c0 
c010b903:	c7 44 24 08 5e 7d 11 	movl   $0xc0117d5e,0x8(%esp)
c010b90a:	c0 
c010b90b:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010b912:	00 
c010b913:	c7 04 24 73 7d 11 c0 	movl   $0xc0117d73,(%esp)
c010b91a:	e8 d4 4b ff ff       	call   c01004f3 <__panic>
c010b91f:	c7 44 24 04 9c 80 11 	movl   $0xc011809c,0x4(%esp)
c010b926:	c0 
c010b927:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b92a:	89 04 24             	mov    %eax,(%esp)
c010b92d:	e8 a5 4c 00 00       	call   c01105d7 <inode_check>
c010b932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b935:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b938:	8b 40 20             	mov    0x20(%eax),%eax
c010b93b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b93e:	8b 52 14             	mov    0x14(%edx),%edx
c010b941:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b944:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b948:	89 14 24             	mov    %edx,(%esp)
c010b94b:	ff d0                	call   *%eax
c010b94d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b950:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b954:	75 20                	jne    c010b976 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010b956:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b959:	8b 00                	mov    (%eax),%eax
c010b95b:	89 c2                	mov    %eax,%edx
c010b95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b960:	8b 48 08             	mov    0x8(%eax),%ecx
c010b963:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b966:	8b 40 0c             	mov    0xc(%eax),%eax
c010b969:	29 c1                	sub    %eax,%ecx
c010b96b:	89 c8                	mov    %ecx,%eax
c010b96d:	01 d0                	add    %edx,%eax
c010b96f:	89 c2                	mov    %eax,%edx
c010b971:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b974:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010b976:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b979:	89 04 24             	mov    %eax,(%esp)
c010b97c:	e8 d5 f4 ff ff       	call   c010ae56 <fd_array_release>
    return ret;
c010b981:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b984:	c9                   	leave  
c010b985:	c3                   	ret    

c010b986 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010b986:	55                   	push   %ebp
c010b987:	89 e5                	mov    %esp,%ebp
c010b989:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010b98c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b98f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b993:	8b 45 08             	mov    0x8(%ebp),%eax
c010b996:	89 04 24             	mov    %eax,(%esp)
c010b999:	e8 bc f6 ff ff       	call   c010b05a <fd2file>
c010b99e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9a5:	74 05                	je     c010b9ac <file_dup+0x26>
        return ret;
c010b9a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9aa:	eb 38                	jmp    c010b9e4 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010b9ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b9af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9b6:	89 04 24             	mov    %eax,(%esp)
c010b9b9:	e8 ea f2 ff ff       	call   c010aca8 <fd_array_alloc>
c010b9be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9c5:	74 05                	je     c010b9cc <file_dup+0x46>
        return ret;
c010b9c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9ca:	eb 18                	jmp    c010b9e4 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b9cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b9cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9d2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9d6:	89 04 24             	mov    %eax,(%esp)
c010b9d9:	e8 e5 f5 ff ff       	call   c010afc3 <fd_array_dup>
    return file2->fd;
c010b9de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9e1:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b9e4:	c9                   	leave  
c010b9e5:	c3                   	ret    

c010b9e6 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b9e6:	55                   	push   %ebp
c010b9e7:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b9e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b9ef:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b9f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9f4:	8b 55 14             	mov    0x14(%ebp),%edx
c010b9f7:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b9fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9fd:	8b 55 10             	mov    0x10(%ebp),%edx
c010ba00:	89 50 0c             	mov    %edx,0xc(%eax)
c010ba03:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba06:	8b 50 0c             	mov    0xc(%eax),%edx
c010ba09:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba0c:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010ba0f:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010ba12:	5d                   	pop    %ebp
c010ba13:	c3                   	ret    

c010ba14 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010ba14:	55                   	push   %ebp
c010ba15:	89 e5                	mov    %esp,%ebp
c010ba17:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010ba1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba1d:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba20:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba26:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ba29:	76 06                	jbe    c010ba31 <iobuf_move+0x1d>
        alen = len;
c010ba2b:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010ba31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba35:	74 57                	je     c010ba8e <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010ba37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba3a:	8b 00                	mov    (%eax),%eax
c010ba3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ba3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba42:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010ba45:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010ba49:	74 12                	je     c010ba5d <iobuf_move+0x49>
            void *tmp = src;
c010ba4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010ba51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ba57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010ba5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba60:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba67:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba6e:	89 04 24             	mov    %eax,(%esp)
c010ba71:	e8 4e 94 00 00       	call   c0114ec4 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010ba76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba79:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba80:	89 04 24             	mov    %eax,(%esp)
c010ba83:	e8 a1 00 00 00       	call   c010bb29 <iobuf_skip>
c010ba88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba8b:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010ba8e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010ba92:	74 08                	je     c010ba9c <iobuf_move+0x88>
        *copiedp = alen;
c010ba94:	8b 45 18             	mov    0x18(%ebp),%eax
c010ba97:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ba9a:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010ba9c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010baa0:	75 07                	jne    c010baa9 <iobuf_move+0x95>
c010baa2:	b8 00 00 00 00       	mov    $0x0,%eax
c010baa7:	eb 05                	jmp    c010baae <iobuf_move+0x9a>
c010baa9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010baae:	c9                   	leave  
c010baaf:	c3                   	ret    

c010bab0 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010bab0:	55                   	push   %ebp
c010bab1:	89 e5                	mov    %esp,%ebp
c010bab3:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010bab6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bab9:	8b 40 0c             	mov    0xc(%eax),%eax
c010babc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010babf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bac2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010bac5:	76 06                	jbe    c010bacd <iobuf_move_zeros+0x1d>
        alen = len;
c010bac7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010baca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010bacd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bad1:	74 34                	je     c010bb07 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010bad3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bad6:	8b 00                	mov    (%eax),%eax
c010bad8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010badb:	89 54 24 08          	mov    %edx,0x8(%esp)
c010badf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bae6:	00 
c010bae7:	89 04 24             	mov    %eax,(%esp)
c010baea:	e8 96 93 00 00       	call   c0114e85 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010baef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010baf9:	89 04 24             	mov    %eax,(%esp)
c010bafc:	e8 28 00 00 00       	call   c010bb29 <iobuf_skip>
c010bb01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb04:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010bb07:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010bb0b:	74 08                	je     c010bb15 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010bb0d:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb10:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bb13:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010bb15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb19:	75 07                	jne    c010bb22 <iobuf_move_zeros+0x72>
c010bb1b:	b8 00 00 00 00       	mov    $0x0,%eax
c010bb20:	eb 05                	jmp    c010bb27 <iobuf_move_zeros+0x77>
c010bb22:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010bb27:	c9                   	leave  
c010bb28:	c3                   	ret    

c010bb29 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010bb29:	55                   	push   %ebp
c010bb2a:	89 e5                	mov    %esp,%ebp
c010bb2c:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010bb2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb32:	8b 40 0c             	mov    0xc(%eax),%eax
c010bb35:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010bb38:	73 24                	jae    c010bb5e <iobuf_skip+0x35>
c010bb3a:	c7 44 24 0c a8 80 11 	movl   $0xc01180a8,0xc(%esp)
c010bb41:	c0 
c010bb42:	c7 44 24 08 bb 80 11 	movl   $0xc01180bb,0x8(%esp)
c010bb49:	c0 
c010bb4a:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010bb51:	00 
c010bb52:	c7 04 24 d0 80 11 c0 	movl   $0xc01180d0,(%esp)
c010bb59:	e8 95 49 ff ff       	call   c01004f3 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010bb5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb61:	8b 10                	mov    (%eax),%edx
c010bb63:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb66:	01 c2                	add    %eax,%edx
c010bb68:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb6b:	89 10                	mov    %edx,(%eax)
c010bb6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb70:	8b 40 04             	mov    0x4(%eax),%eax
c010bb73:	89 c2                	mov    %eax,%edx
c010bb75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb78:	01 d0                	add    %edx,%eax
c010bb7a:	89 c2                	mov    %eax,%edx
c010bb7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb7f:	89 50 04             	mov    %edx,0x4(%eax)
c010bb82:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb85:	8b 40 0c             	mov    0xc(%eax),%eax
c010bb88:	2b 45 0c             	sub    0xc(%ebp),%eax
c010bb8b:	89 c2                	mov    %eax,%edx
c010bb8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb90:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010bb93:	c9                   	leave  
c010bb94:	c3                   	ret    

c010bb95 <files_count>:
files_count(struct files_struct *filesp) {
c010bb95:	55                   	push   %ebp
c010bb96:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010bb98:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb9b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bb9e:	5d                   	pop    %ebp
c010bb9f:	c3                   	ret    

c010bba0 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010bba0:	55                   	push   %ebp
c010bba1:	89 e5                	mov    %esp,%ebp
c010bba3:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010bba6:	e8 48 4b 00 00       	call   c01106f3 <vfs_init>
    dev_init();
c010bbab:	e8 68 5a 00 00       	call   c0111618 <dev_init>
    sfs_init();
c010bbb0:	e8 b5 5a 00 00       	call   c011166a <sfs_init>
}
c010bbb5:	c9                   	leave  
c010bbb6:	c3                   	ret    

c010bbb7 <fs_cleanup>:

void
fs_cleanup(void) {
c010bbb7:	55                   	push   %ebp
c010bbb8:	89 e5                	mov    %esp,%ebp
c010bbba:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010bbbd:	e8 d5 35 00 00       	call   c010f197 <vfs_cleanup>
}
c010bbc2:	c9                   	leave  
c010bbc3:	c3                   	ret    

c010bbc4 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010bbc4:	55                   	push   %ebp
c010bbc5:	89 e5                	mov    %esp,%ebp
c010bbc7:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010bbca:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbcd:	83 c0 0c             	add    $0xc,%eax
c010bbd0:	89 04 24             	mov    %eax,(%esp)
c010bbd3:	e8 b2 e4 ff ff       	call   c010a08a <down>
}
c010bbd8:	c9                   	leave  
c010bbd9:	c3                   	ret    

c010bbda <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010bbda:	55                   	push   %ebp
c010bbdb:	89 e5                	mov    %esp,%ebp
c010bbdd:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010bbe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbe3:	83 c0 0c             	add    $0xc,%eax
c010bbe6:	89 04 24             	mov    %eax,(%esp)
c010bbe9:	e8 81 e4 ff ff       	call   c010a06f <up>
}
c010bbee:	c9                   	leave  
c010bbef:	c3                   	ret    

c010bbf0 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010bbf0:	55                   	push   %ebp
c010bbf1:	89 e5                	mov    %esp,%ebp
c010bbf3:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010bbf6:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010bbfd:	e8 00 a0 ff ff       	call   c0105c02 <kmalloc>
c010bc02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc09:	74 43                	je     c010bc4e <files_create+0x5e>
        filesp->pwd = NULL;
c010bc0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010bc14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc17:	8d 50 18             	lea    0x18(%eax),%edx
c010bc1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc1d:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010bc20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc23:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010bc2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc2d:	83 c0 0c             	add    $0xc,%eax
c010bc30:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010bc37:	00 
c010bc38:	89 04 24             	mov    %eax,(%esp)
c010bc3b:	e8 bc e2 ff ff       	call   c0109efc <sem_init>
        fd_array_init(filesp->fd_array);
c010bc40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc43:	8b 40 04             	mov    0x4(%eax),%eax
c010bc46:	89 04 24             	mov    %eax,(%esp)
c010bc49:	e8 15 f0 ff ff       	call   c010ac63 <fd_array_init>
    }
    return filesp;
c010bc4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc51:	c9                   	leave  
c010bc52:	c3                   	ret    

c010bc53 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010bc53:	55                   	push   %ebp
c010bc54:	89 e5                	mov    %esp,%ebp
c010bc56:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010bc59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bc5d:	74 0f                	je     c010bc6e <files_destroy+0x1b>
c010bc5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc62:	89 04 24             	mov    %eax,(%esp)
c010bc65:	e8 2b ff ff ff       	call   c010bb95 <files_count>
c010bc6a:	85 c0                	test   %eax,%eax
c010bc6c:	74 24                	je     c010bc92 <files_destroy+0x3f>
c010bc6e:	c7 44 24 0c e0 80 11 	movl   $0xc01180e0,0xc(%esp)
c010bc75:	c0 
c010bc76:	c7 44 24 08 0b 81 11 	movl   $0xc011810b,0x8(%esp)
c010bc7d:	c0 
c010bc7e:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010bc85:	00 
c010bc86:	c7 04 24 20 81 11 c0 	movl   $0xc0118120,(%esp)
c010bc8d:	e8 61 48 ff ff       	call   c01004f3 <__panic>
    if (filesp->pwd != NULL) {
c010bc92:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc95:	8b 00                	mov    (%eax),%eax
c010bc97:	85 c0                	test   %eax,%eax
c010bc99:	74 0d                	je     c010bca8 <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010bc9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc9e:	8b 00                	mov    (%eax),%eax
c010bca0:	89 04 24             	mov    %eax,(%esp)
c010bca3:	e8 41 47 00 00       	call   c01103e9 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010bca8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcab:	8b 40 04             	mov    0x4(%eax),%eax
c010bcae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010bcb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bcb8:	eb 4a                	jmp    c010bd04 <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010bcba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcbd:	8b 00                	mov    (%eax),%eax
c010bcbf:	83 f8 02             	cmp    $0x2,%eax
c010bcc2:	75 0b                	jne    c010bccf <files_destroy+0x7c>
            fd_array_close(file);
c010bcc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcc7:	89 04 24             	mov    %eax,(%esp)
c010bcca:	e8 68 f2 ff ff       	call   c010af37 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010bccf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcd2:	8b 00                	mov    (%eax),%eax
c010bcd4:	85 c0                	test   %eax,%eax
c010bcd6:	74 24                	je     c010bcfc <files_destroy+0xa9>
c010bcd8:	c7 44 24 0c 2d 81 11 	movl   $0xc011812d,0xc(%esp)
c010bcdf:	c0 
c010bce0:	c7 44 24 08 0b 81 11 	movl   $0xc011810b,0x8(%esp)
c010bce7:	c0 
c010bce8:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010bcef:	00 
c010bcf0:	c7 04 24 20 81 11 c0 	movl   $0xc0118120,(%esp)
c010bcf7:	e8 f7 47 ff ff       	call   c01004f3 <__panic>
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010bcfc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bd00:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010bd04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd07:	3d 90 00 00 00       	cmp    $0x90,%eax
c010bd0c:	76 ac                	jbe    c010bcba <files_destroy+0x67>
    }
    kfree(filesp);
c010bd0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd11:	89 04 24             	mov    %eax,(%esp)
c010bd14:	e8 04 9f ff ff       	call   c0105c1d <kfree>
}
c010bd19:	c9                   	leave  
c010bd1a:	c3                   	ret    

c010bd1b <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010bd1b:	55                   	push   %ebp
c010bd1c:	89 e5                	mov    %esp,%ebp
c010bd1e:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010bd21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bd25:	74 0f                	je     c010bd36 <files_closeall+0x1b>
c010bd27:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd2a:	89 04 24             	mov    %eax,(%esp)
c010bd2d:	e8 63 fe ff ff       	call   c010bb95 <files_count>
c010bd32:	85 c0                	test   %eax,%eax
c010bd34:	7f 24                	jg     c010bd5a <files_closeall+0x3f>
c010bd36:	c7 44 24 0c 48 81 11 	movl   $0xc0118148,0xc(%esp)
c010bd3d:	c0 
c010bd3e:	c7 44 24 08 0b 81 11 	movl   $0xc011810b,0x8(%esp)
c010bd45:	c0 
c010bd46:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010bd4d:	00 
c010bd4e:	c7 04 24 20 81 11 c0 	movl   $0xc0118120,(%esp)
c010bd55:	e8 99 47 ff ff       	call   c01004f3 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010bd5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd5d:	8b 40 04             	mov    0x4(%eax),%eax
c010bd60:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010bd63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010bd6a:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010bd6e:	eb 1d                	jmp    c010bd8d <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010bd70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd73:	8b 00                	mov    (%eax),%eax
c010bd75:	83 f8 02             	cmp    $0x2,%eax
c010bd78:	75 0b                	jne    c010bd85 <files_closeall+0x6a>
            fd_array_close(file);
c010bd7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd7d:	89 04 24             	mov    %eax,(%esp)
c010bd80:	e8 b2 f1 ff ff       	call   c010af37 <fd_array_close>
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010bd85:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bd89:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010bd8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd90:	3d 90 00 00 00       	cmp    $0x90,%eax
c010bd95:	76 d9                	jbe    c010bd70 <files_closeall+0x55>
        }
    }
}
c010bd97:	c9                   	leave  
c010bd98:	c3                   	ret    

c010bd99 <dup_fs>:

int
dup_fs(struct files_struct *to, struct files_struct *from) {
c010bd99:	55                   	push   %ebp
c010bd9a:	89 e5                	mov    %esp,%ebp
c010bd9c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010bd9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bda3:	74 06                	je     c010bdab <dup_fs+0x12>
c010bda5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bda9:	75 24                	jne    c010bdcf <dup_fs+0x36>
c010bdab:	c7 44 24 0c 72 81 11 	movl   $0xc0118172,0xc(%esp)
c010bdb2:	c0 
c010bdb3:	c7 44 24 08 0b 81 11 	movl   $0xc011810b,0x8(%esp)
c010bdba:	c0 
c010bdbb:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010bdc2:	00 
c010bdc3:	c7 04 24 20 81 11 c0 	movl   $0xc0118120,(%esp)
c010bdca:	e8 24 47 ff ff       	call   c01004f3 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010bdcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd2:	89 04 24             	mov    %eax,(%esp)
c010bdd5:	e8 bb fd ff ff       	call   c010bb95 <files_count>
c010bdda:	85 c0                	test   %eax,%eax
c010bddc:	75 0f                	jne    c010bded <dup_fs+0x54>
c010bdde:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bde1:	89 04 24             	mov    %eax,(%esp)
c010bde4:	e8 ac fd ff ff       	call   c010bb95 <files_count>
c010bde9:	85 c0                	test   %eax,%eax
c010bdeb:	7f 24                	jg     c010be11 <dup_fs+0x78>
c010bded:	c7 44 24 0c 90 81 11 	movl   $0xc0118190,0xc(%esp)
c010bdf4:	c0 
c010bdf5:	c7 44 24 08 0b 81 11 	movl   $0xc011810b,0x8(%esp)
c010bdfc:	c0 
c010bdfd:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010be04:	00 
c010be05:	c7 04 24 20 81 11 c0 	movl   $0xc0118120,(%esp)
c010be0c:	e8 e2 46 ff ff       	call   c01004f3 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010be11:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be14:	8b 10                	mov    (%eax),%edx
c010be16:	8b 45 08             	mov    0x8(%ebp),%eax
c010be19:	89 10                	mov    %edx,(%eax)
c010be1b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be1e:	8b 00                	mov    (%eax),%eax
c010be20:	85 c0                	test   %eax,%eax
c010be22:	74 0d                	je     c010be31 <dup_fs+0x98>
        vop_ref_inc(to->pwd);
c010be24:	8b 45 08             	mov    0x8(%ebp),%eax
c010be27:	8b 00                	mov    (%eax),%eax
c010be29:	89 04 24             	mov    %eax,(%esp)
c010be2c:	e8 9e 45 00 00       	call   c01103cf <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010be31:	8b 45 08             	mov    0x8(%ebp),%eax
c010be34:	8b 40 04             	mov    0x4(%eax),%eax
c010be37:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be3d:	8b 40 04             	mov    0x4(%eax),%eax
c010be40:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010be43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010be4a:	eb 31                	jmp    c010be7d <dup_fs+0xe4>
        if (from_file->status == FD_OPENED) {
c010be4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be4f:	8b 00                	mov    (%eax),%eax
c010be51:	83 f8 02             	cmp    $0x2,%eax
c010be54:	75 1b                	jne    c010be71 <dup_fs+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010be56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be59:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010be5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be62:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be69:	89 04 24             	mov    %eax,(%esp)
c010be6c:	e8 52 f1 ff ff       	call   c010afc3 <fd_array_dup>
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010be71:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010be75:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010be79:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010be7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be80:	3d 90 00 00 00       	cmp    $0x90,%eax
c010be85:	76 c5                	jbe    c010be4c <dup_fs+0xb3>
        }
    }
    return 0;
c010be87:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be8c:	c9                   	leave  
c010be8d:	c3                   	ret    

c010be8e <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010be8e:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010be92:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010be94:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010be97:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010be9a:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010be9d:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010bea0:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010bea3:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010bea6:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010bea9:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010bead:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010beb0:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010beb3:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010beb6:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010beb9:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010bebc:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010bebf:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010bec2:	ff 30                	pushl  (%eax)

    ret
c010bec4:	c3                   	ret    

c010bec5 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bec5:	52                   	push   %edx
    call *%ebx              # call fn
c010bec6:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bec8:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bec9:	e8 3d 0e 00 00       	call   c010cd0b <do_exit>

c010bece <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bece:	55                   	push   %ebp
c010becf:	89 e5                	mov    %esp,%ebp
c010bed1:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bed4:	8b 55 10             	mov    0x10(%ebp),%edx
c010bed7:	8b 45 08             	mov    0x8(%ebp),%eax
c010beda:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bedc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bedf:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bee2:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bee5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee8:	83 c0 08             	add    $0x8,%eax
c010beeb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010beee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bef1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bef4:	89 50 04             	mov    %edx,0x4(%eax)
c010bef7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010befa:	8b 50 04             	mov    0x4(%eax),%edx
c010befd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bf00:	89 10                	mov    %edx,(%eax)
    return timer;
c010bf02:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bf05:	c9                   	leave  
c010bf06:	c3                   	ret    

c010bf07 <__intr_save>:
__intr_save(void) {
c010bf07:	55                   	push   %ebp
c010bf08:	89 e5                	mov    %esp,%ebp
c010bf0a:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bf0d:	9c                   	pushf  
c010bf0e:	58                   	pop    %eax
c010bf0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bf12:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bf15:	25 00 02 00 00       	and    $0x200,%eax
c010bf1a:	85 c0                	test   %eax,%eax
c010bf1c:	74 0c                	je     c010bf2a <__intr_save+0x23>
        intr_disable();
c010bf1e:	e8 e5 63 ff ff       	call   c0102308 <intr_disable>
        return 1;
c010bf23:	b8 01 00 00 00       	mov    $0x1,%eax
c010bf28:	eb 05                	jmp    c010bf2f <__intr_save+0x28>
    return 0;
c010bf2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf2f:	c9                   	leave  
c010bf30:	c3                   	ret    

c010bf31 <__intr_restore>:
__intr_restore(bool flag) {
c010bf31:	55                   	push   %ebp
c010bf32:	89 e5                	mov    %esp,%ebp
c010bf34:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bf37:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf3b:	74 05                	je     c010bf42 <__intr_restore+0x11>
        intr_enable();
c010bf3d:	e8 c0 63 ff ff       	call   c0102302 <intr_enable>
}
c010bf42:	c9                   	leave  
c010bf43:	c3                   	ret    

c010bf44 <page2ppn>:
page2ppn(struct Page *page) {
c010bf44:	55                   	push   %ebp
c010bf45:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bf47:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf4a:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c010bf4f:	29 c2                	sub    %eax,%edx
c010bf51:	89 d0                	mov    %edx,%eax
c010bf53:	c1 f8 02             	sar    $0x2,%eax
c010bf56:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010bf5c:	5d                   	pop    %ebp
c010bf5d:	c3                   	ret    

c010bf5e <page2pa>:
page2pa(struct Page *page) {
c010bf5e:	55                   	push   %ebp
c010bf5f:	89 e5                	mov    %esp,%ebp
c010bf61:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bf64:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf67:	89 04 24             	mov    %eax,(%esp)
c010bf6a:	e8 d5 ff ff ff       	call   c010bf44 <page2ppn>
c010bf6f:	c1 e0 0c             	shl    $0xc,%eax
}
c010bf72:	c9                   	leave  
c010bf73:	c3                   	ret    

c010bf74 <pa2page>:
pa2page(uintptr_t pa) {
c010bf74:	55                   	push   %ebp
c010bf75:	89 e5                	mov    %esp,%ebp
c010bf77:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bf7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7d:	c1 e8 0c             	shr    $0xc,%eax
c010bf80:	89 c2                	mov    %eax,%edx
c010bf82:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c010bf87:	39 c2                	cmp    %eax,%edx
c010bf89:	72 1c                	jb     c010bfa7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bf8b:	c7 44 24 08 c0 81 11 	movl   $0xc01181c0,0x8(%esp)
c010bf92:	c0 
c010bf93:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bf9a:	00 
c010bf9b:	c7 04 24 df 81 11 c0 	movl   $0xc01181df,(%esp)
c010bfa2:	e8 4c 45 ff ff       	call   c01004f3 <__panic>
    return &pages[PPN(pa)];
c010bfa7:	8b 0d 00 62 15 c0    	mov    0xc0156200,%ecx
c010bfad:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb0:	c1 e8 0c             	shr    $0xc,%eax
c010bfb3:	89 c2                	mov    %eax,%edx
c010bfb5:	89 d0                	mov    %edx,%eax
c010bfb7:	c1 e0 03             	shl    $0x3,%eax
c010bfba:	01 d0                	add    %edx,%eax
c010bfbc:	c1 e0 02             	shl    $0x2,%eax
c010bfbf:	01 c8                	add    %ecx,%eax
}
c010bfc1:	c9                   	leave  
c010bfc2:	c3                   	ret    

c010bfc3 <page2kva>:
page2kva(struct Page *page) {
c010bfc3:	55                   	push   %ebp
c010bfc4:	89 e5                	mov    %esp,%ebp
c010bfc6:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bfc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfcc:	89 04 24             	mov    %eax,(%esp)
c010bfcf:	e8 8a ff ff ff       	call   c010bf5e <page2pa>
c010bfd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bfd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfda:	c1 e8 0c             	shr    $0xc,%eax
c010bfdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bfe0:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c010bfe5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bfe8:	72 23                	jb     c010c00d <page2kva+0x4a>
c010bfea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bff1:	c7 44 24 08 f0 81 11 	movl   $0xc01181f0,0x8(%esp)
c010bff8:	c0 
c010bff9:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010c000:	00 
c010c001:	c7 04 24 df 81 11 c0 	movl   $0xc01181df,(%esp)
c010c008:	e8 e6 44 ff ff       	call   c01004f3 <__panic>
c010c00d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c010:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010c015:	c9                   	leave  
c010c016:	c3                   	ret    

c010c017 <kva2page>:
kva2page(void *kva) {
c010c017:	55                   	push   %ebp
c010c018:	89 e5                	mov    %esp,%ebp
c010c01a:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010c01d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c020:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c023:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010c02a:	77 23                	ja     c010c04f <kva2page+0x38>
c010c02c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c02f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c033:	c7 44 24 08 14 82 11 	movl   $0xc0118214,0x8(%esp)
c010c03a:	c0 
c010c03b:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010c042:	00 
c010c043:	c7 04 24 df 81 11 c0 	movl   $0xc01181df,(%esp)
c010c04a:	e8 a4 44 ff ff       	call   c01004f3 <__panic>
c010c04f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c052:	05 00 00 00 40       	add    $0x40000000,%eax
c010c057:	89 04 24             	mov    %eax,(%esp)
c010c05a:	e8 15 ff ff ff       	call   c010bf74 <pa2page>
}
c010c05f:	c9                   	leave  
c010c060:	c3                   	ret    

c010c061 <mm_count_inc>:
mm_count_inc(struct mm_struct *mm) {
c010c061:	55                   	push   %ebp
c010c062:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010c064:	8b 45 08             	mov    0x8(%ebp),%eax
c010c067:	8b 40 18             	mov    0x18(%eax),%eax
c010c06a:	8d 50 01             	lea    0x1(%eax),%edx
c010c06d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c070:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010c073:	8b 45 08             	mov    0x8(%ebp),%eax
c010c076:	8b 40 18             	mov    0x18(%eax),%eax
}
c010c079:	5d                   	pop    %ebp
c010c07a:	c3                   	ret    

c010c07b <mm_count_dec>:
mm_count_dec(struct mm_struct *mm) {
c010c07b:	55                   	push   %ebp
c010c07c:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010c07e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c081:	8b 40 18             	mov    0x18(%eax),%eax
c010c084:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c087:	8b 45 08             	mov    0x8(%ebp),%eax
c010c08a:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010c08d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c090:	8b 40 18             	mov    0x18(%eax),%eax
}
c010c093:	5d                   	pop    %ebp
c010c094:	c3                   	ret    

c010c095 <lock_mm>:
lock_mm(struct mm_struct *mm) {
c010c095:	55                   	push   %ebp
c010c096:	89 e5                	mov    %esp,%ebp
c010c098:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010c09b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c09f:	74 25                	je     c010c0c6 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010c0a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0a4:	83 c0 1c             	add    $0x1c,%eax
c010c0a7:	89 04 24             	mov    %eax,(%esp)
c010c0aa:	e8 db df ff ff       	call   c010a08a <down>
        if (current != NULL) {
c010c0af:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c0b4:	85 c0                	test   %eax,%eax
c010c0b6:	74 0e                	je     c010c0c6 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010c0b8:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c0bd:	8b 50 04             	mov    0x4(%eax),%edx
c010c0c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c3:	89 50 28             	mov    %edx,0x28(%eax)
}
c010c0c6:	c9                   	leave  
c010c0c7:	c3                   	ret    

c010c0c8 <unlock_mm>:
unlock_mm(struct mm_struct *mm) {
c010c0c8:	55                   	push   %ebp
c010c0c9:	89 e5                	mov    %esp,%ebp
c010c0cb:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010c0ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c0d2:	74 18                	je     c010c0ec <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010c0d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0d7:	83 c0 1c             	add    $0x1c,%eax
c010c0da:	89 04 24             	mov    %eax,(%esp)
c010c0dd:	e8 8d df ff ff       	call   c010a06f <up>
        mm->locked_by = 0;
c010c0e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0e5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
}
c010c0ec:	c9                   	leave  
c010c0ed:	c3                   	ret    

c010c0ee <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010c0ee:	55                   	push   %ebp
c010c0ef:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010c0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f4:	8b 40 08             	mov    0x8(%eax),%eax
c010c0f7:	8d 50 01             	lea    0x1(%eax),%edx
c010c0fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0fd:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c100:	8b 45 08             	mov    0x8(%ebp),%eax
c010c103:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c106:	5d                   	pop    %ebp
c010c107:	c3                   	ret    

c010c108 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010c108:	55                   	push   %ebp
c010c109:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010c10b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c10e:	8b 40 08             	mov    0x8(%eax),%eax
c010c111:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c114:	8b 45 08             	mov    0x8(%ebp),%eax
c010c117:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c11a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c11d:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c120:	5d                   	pop    %ebp
c010c121:	c3                   	ret    

c010c122 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010c122:	55                   	push   %ebp
c010c123:	89 e5                	mov    %esp,%ebp
c010c125:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010c128:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010c12f:	e8 ce 9a ff ff       	call   c0105c02 <kmalloc>
c010c134:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010c137:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c13b:	0f 84 70 01 00 00    	je     c010c2b1 <alloc_proc+0x18f>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010c141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c144:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010c14a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c14d:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010c154:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c157:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010c15e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c161:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010c168:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c16b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010c172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c175:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010c17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c17f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010c186:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c189:	83 c0 1c             	add    $0x1c,%eax
c010c18c:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010c193:	00 
c010c194:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c19b:	00 
c010c19c:	89 04 24             	mov    %eax,(%esp)
c010c19f:	e8 e1 8c 00 00       	call   c0114e85 <memset>
        proc->tf = NULL;
c010c1a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1a7:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010c1ae:	8b 15 fc 61 15 c0    	mov    0xc01561fc,%edx
c010c1b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1b7:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010c1ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1bd:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010c1c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1c7:	83 c0 48             	add    $0x48,%eax
c010c1ca:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c1d1:	00 
c010c1d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1d9:	00 
c010c1da:	89 04 24             	mov    %eax,(%esp)
c010c1dd:	e8 a3 8c 00 00       	call   c0114e85 <memset>
        proc->wait_state = 0;
c010c1e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1e5:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c1ec:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010c1ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1f2:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c1f9:	00 00 00 
c010c1fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1ff:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010c205:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c208:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c20e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c211:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010c217:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c21a:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010c220:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c223:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c22a:	00 00 00 
        list_init(&(proc->run_link));
c010c22d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c230:	05 a4 00 00 00       	add    $0xa4,%eax
c010c235:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c238:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c23b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c23e:	89 50 04             	mov    %edx,0x4(%eax)
c010c241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c244:	8b 50 04             	mov    0x4(%eax),%edx
c010c247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c24a:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010c24c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c24f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c256:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c259:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c25c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c263:	00 00 00 
c010c266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c269:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c26f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c272:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c278:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c27b:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c284:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010c28a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c28d:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010c294:	00 00 00 
        proc->lab6_priority = 0;
c010c297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c29a:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c2a1:	00 00 00 
        proc->filesp = NULL;
c010c2a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2a7:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c2ae:	00 00 00 
    }
    return proc;
c010c2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c2b4:	c9                   	leave  
c010c2b5:	c3                   	ret    

c010c2b6 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c2b6:	55                   	push   %ebp
c010c2b7:	89 e5                	mov    %esp,%ebp
c010c2b9:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c2bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2bf:	83 c0 48             	add    $0x48,%eax
c010c2c2:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c2c9:	00 
c010c2ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c2d1:	00 
c010c2d2:	89 04 24             	mov    %eax,(%esp)
c010c2d5:	e8 ab 8b 00 00       	call   c0114e85 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2dd:	8d 50 48             	lea    0x48(%eax),%edx
c010c2e0:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c2e7:	00 
c010c2e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2ef:	89 14 24             	mov    %edx,(%esp)
c010c2f2:	e8 70 8c 00 00       	call   c0114f67 <memcpy>
}
c010c2f7:	c9                   	leave  
c010c2f8:	c3                   	ret    

c010c2f9 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c2f9:	55                   	push   %ebp
c010c2fa:	89 e5                	mov    %esp,%ebp
c010c2fc:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c2ff:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c306:	00 
c010c307:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c30e:	00 
c010c30f:	c7 04 24 60 50 15 c0 	movl   $0xc0155060,(%esp)
c010c316:	e8 6a 8b 00 00       	call   c0114e85 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c31b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c31e:	83 c0 48             	add    $0x48,%eax
c010c321:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c328:	00 
c010c329:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c32d:	c7 04 24 60 50 15 c0 	movl   $0xc0155060,(%esp)
c010c334:	e8 2e 8c 00 00       	call   c0114f67 <memcpy>
}
c010c339:	c9                   	leave  
c010c33a:	c3                   	ret    

c010c33b <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c33b:	55                   	push   %ebp
c010c33c:	89 e5                	mov    %esp,%ebp
c010c33e:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c341:	8b 45 08             	mov    0x8(%ebp),%eax
c010c344:	83 c0 7c             	add    $0x7c,%eax
c010c347:	c7 45 fc fc 62 15 c0 	movl   $0xc01562fc,-0x4(%ebp)
c010c34e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c351:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c354:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c357:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c35a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __list_add(elm, listelm, listelm->next);
c010c35d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c360:	8b 40 04             	mov    0x4(%eax),%eax
c010c363:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c366:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c369:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c36c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c36f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next->prev = elm;
c010c372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c375:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c378:	89 10                	mov    %edx,(%eax)
c010c37a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c37d:	8b 10                	mov    (%eax),%edx
c010c37f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c382:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c385:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c388:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c38b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c38e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c391:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c394:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c396:	8b 45 08             	mov    0x8(%ebp),%eax
c010c399:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c3a0:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c3a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a6:	8b 40 14             	mov    0x14(%eax),%eax
c010c3a9:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c3af:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b2:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c3b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3bb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c3c1:	85 c0                	test   %eax,%eax
c010c3c3:	74 12                	je     c010c3d7 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c3c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c3ce:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3d1:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c3d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3da:	8b 40 14             	mov    0x14(%eax),%eax
c010c3dd:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3e0:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c3e6:	a1 40 50 15 c0       	mov    0xc0155040,%eax
c010c3eb:	83 c0 01             	add    $0x1,%eax
c010c3ee:	a3 40 50 15 c0       	mov    %eax,0xc0155040
}
c010c3f3:	c9                   	leave  
c010c3f4:	c3                   	ret    

c010c3f5 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c3f5:	55                   	push   %ebp
c010c3f6:	89 e5                	mov    %esp,%ebp
c010c3f8:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c3fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fe:	83 c0 7c             	add    $0x7c,%eax
c010c401:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010c404:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c407:	8b 40 04             	mov    0x4(%eax),%eax
c010c40a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c40d:	8b 12                	mov    (%edx),%edx
c010c40f:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c412:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010c415:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c418:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c41b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c41e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c421:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c424:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c426:	8b 45 08             	mov    0x8(%ebp),%eax
c010c429:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c42f:	85 c0                	test   %eax,%eax
c010c431:	74 18                	je     c010c44b <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c433:	8b 45 08             	mov    0x8(%ebp),%eax
c010c436:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c43c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c43f:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c445:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c44b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44e:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c454:	85 c0                	test   %eax,%eax
c010c456:	74 1a                	je     c010c472 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c458:	8b 45 08             	mov    0x8(%ebp),%eax
c010c45b:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c461:	8b 55 08             	mov    0x8(%ebp),%edx
c010c464:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c46a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c470:	eb 15                	jmp    c010c487 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c472:	8b 45 08             	mov    0x8(%ebp),%eax
c010c475:	8b 40 14             	mov    0x14(%eax),%eax
c010c478:	8b 55 08             	mov    0x8(%ebp),%edx
c010c47b:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c481:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c487:	a1 40 50 15 c0       	mov    0xc0155040,%eax
c010c48c:	83 e8 01             	sub    $0x1,%eax
c010c48f:	a3 40 50 15 c0       	mov    %eax,0xc0155040
}
c010c494:	c9                   	leave  
c010c495:	c3                   	ret    

c010c496 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c496:	55                   	push   %ebp
c010c497:	89 e5                	mov    %esp,%ebp
c010c499:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c49c:	c7 45 f8 fc 62 15 c0 	movl   $0xc01562fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c4a3:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c4a8:	83 c0 01             	add    $0x1,%eax
c010c4ab:	a3 7c fa 14 c0       	mov    %eax,0xc014fa7c
c010c4b0:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c4b5:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c4ba:	7e 0c                	jle    c010c4c8 <get_pid+0x32>
        last_pid = 1;
c010c4bc:	c7 05 7c fa 14 c0 01 	movl   $0x1,0xc014fa7c
c010c4c3:	00 00 00 
        goto inside;
c010c4c6:	eb 13                	jmp    c010c4db <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c4c8:	8b 15 7c fa 14 c0    	mov    0xc014fa7c,%edx
c010c4ce:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010c4d3:	39 c2                	cmp    %eax,%edx
c010c4d5:	0f 8c ac 00 00 00    	jl     c010c587 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c4db:	c7 05 80 fa 14 c0 00 	movl   $0x2000,0xc014fa80
c010c4e2:	20 00 00 
    repeat:
        le = list;
c010c4e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c4eb:	eb 7f                	jmp    c010c56c <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c4ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4f0:	83 e8 7c             	sub    $0x7c,%eax
c010c4f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c4f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4f9:	8b 50 04             	mov    0x4(%eax),%edx
c010c4fc:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c501:	39 c2                	cmp    %eax,%edx
c010c503:	75 3e                	jne    c010c543 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c505:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c50a:	83 c0 01             	add    $0x1,%eax
c010c50d:	a3 7c fa 14 c0       	mov    %eax,0xc014fa7c
c010c512:	8b 15 7c fa 14 c0    	mov    0xc014fa7c,%edx
c010c518:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010c51d:	39 c2                	cmp    %eax,%edx
c010c51f:	7c 4b                	jl     c010c56c <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c521:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c526:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c52b:	7e 0a                	jle    c010c537 <get_pid+0xa1>
                        last_pid = 1;
c010c52d:	c7 05 7c fa 14 c0 01 	movl   $0x1,0xc014fa7c
c010c534:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c537:	c7 05 80 fa 14 c0 00 	movl   $0x2000,0xc014fa80
c010c53e:	20 00 00 
                    goto repeat;
c010c541:	eb a2                	jmp    c010c4e5 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c543:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c546:	8b 50 04             	mov    0x4(%eax),%edx
c010c549:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
c010c54e:	39 c2                	cmp    %eax,%edx
c010c550:	7e 1a                	jle    c010c56c <get_pid+0xd6>
c010c552:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c555:	8b 50 04             	mov    0x4(%eax),%edx
c010c558:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010c55d:	39 c2                	cmp    %eax,%edx
c010c55f:	7d 0b                	jge    c010c56c <get_pid+0xd6>
                next_safe = proc->pid;
c010c561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c564:	8b 40 04             	mov    0x4(%eax),%eax
c010c567:	a3 80 fa 14 c0       	mov    %eax,0xc014fa80
c010c56c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c56f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->next;
c010c572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c575:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010c578:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c57b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c57e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c581:	0f 85 66 ff ff ff    	jne    c010c4ed <get_pid+0x57>
            }
        }
    }
    return last_pid;
c010c587:	a1 7c fa 14 c0       	mov    0xc014fa7c,%eax
}
c010c58c:	c9                   	leave  
c010c58d:	c3                   	ret    

c010c58e <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c58e:	55                   	push   %ebp
c010c58f:	89 e5                	mov    %esp,%ebp
c010c591:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c594:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c599:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c59c:	74 63                	je     c010c601 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c59e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c5a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c5ac:	e8 56 f9 ff ff       	call   c010bf07 <__intr_save>
c010c5b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c5b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5b7:	a3 28 30 15 c0       	mov    %eax,0xc0153028
            load_esp0(next->kstack + KSTACKSIZE);
c010c5bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5bf:	8b 40 0c             	mov    0xc(%eax),%eax
c010c5c2:	05 00 20 00 00       	add    $0x2000,%eax
c010c5c7:	89 04 24             	mov    %eax,(%esp)
c010c5ca:	e8 c1 b0 ff ff       	call   c0107690 <load_esp0>
            lcr3(next->cr3);
c010c5cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5d2:	8b 40 40             	mov    0x40(%eax),%eax
c010c5d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c5d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5db:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c5de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5e1:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c5e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5e7:	83 c0 1c             	add    $0x1c,%eax
c010c5ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c5ee:	89 04 24             	mov    %eax,(%esp)
c010c5f1:	e8 98 f8 ff ff       	call   c010be8e <switch_to>
        }
        local_intr_restore(intr_flag);
c010c5f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5f9:	89 04 24             	mov    %eax,(%esp)
c010c5fc:	e8 30 f9 ff ff       	call   c010bf31 <__intr_restore>
    }
}
c010c601:	c9                   	leave  
c010c602:	c3                   	ret    

c010c603 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c603:	55                   	push   %ebp
c010c604:	89 e5                	mov    %esp,%ebp
c010c606:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c609:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c60e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c611:	89 04 24             	mov    %eax,(%esp)
c010c614:	e8 bc 6f ff ff       	call   c01035d5 <forkrets>
}
c010c619:	c9                   	leave  
c010c61a:	c3                   	ret    

c010c61b <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c61b:	55                   	push   %ebp
c010c61c:	89 e5                	mov    %esp,%ebp
c010c61e:	53                   	push   %ebx
c010c61f:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c622:	8b 45 08             	mov    0x8(%ebp),%eax
c010c625:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c62b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c62e:	8b 40 04             	mov    0x4(%eax),%eax
c010c631:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c638:	00 
c010c639:	89 04 24             	mov    %eax,(%esp)
c010c63c:	e8 d4 90 00 00       	call   c0115715 <hash32>
c010c641:	c1 e0 03             	shl    $0x3,%eax
c010c644:	05 40 30 15 c0       	add    $0xc0153040,%eax
c010c649:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c64c:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c652:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c655:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c658:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c010c65b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c65e:	8b 40 04             	mov    0x4(%eax),%eax
c010c661:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c664:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c667:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c66a:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c66d:	89 45 dc             	mov    %eax,-0x24(%ebp)
    prev->next = next->prev = elm;
c010c670:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c673:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c676:	89 10                	mov    %edx,(%eax)
c010c678:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c67b:	8b 10                	mov    (%eax),%edx
c010c67d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c680:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c683:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c686:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c689:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c68c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c68f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c692:	89 10                	mov    %edx,(%eax)
}
c010c694:	83 c4 34             	add    $0x34,%esp
c010c697:	5b                   	pop    %ebx
c010c698:	5d                   	pop    %ebp
c010c699:	c3                   	ret    

c010c69a <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c69a:	55                   	push   %ebp
c010c69b:	89 e5                	mov    %esp,%ebp
c010c69d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c6a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6a3:	05 84 00 00 00       	add    $0x84,%eax
c010c6a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010c6ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c6ae:	8b 40 04             	mov    0x4(%eax),%eax
c010c6b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c6b4:	8b 12                	mov    (%edx),%edx
c010c6b6:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c6b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010c6bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c6bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6c2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c6c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6c8:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c6cb:	89 10                	mov    %edx,(%eax)
}
c010c6cd:	c9                   	leave  
c010c6ce:	c3                   	ret    

c010c6cf <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c6cf:	55                   	push   %ebp
c010c6d0:	89 e5                	mov    %esp,%ebp
c010c6d2:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c6d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c6d9:	7e 61                	jle    c010c73c <find_proc+0x6d>
c010c6db:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c6e2:	7f 58                	jg     c010c73c <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c6e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e7:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c6ee:	00 
c010c6ef:	89 04 24             	mov    %eax,(%esp)
c010c6f2:	e8 1e 90 00 00       	call   c0115715 <hash32>
c010c6f7:	c1 e0 03             	shl    $0x3,%eax
c010c6fa:	05 40 30 15 c0       	add    $0xc0153040,%eax
c010c6ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c702:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c705:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c708:	eb 1b                	jmp    c010c725 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c70a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c70d:	2d 84 00 00 00       	sub    $0x84,%eax
c010c712:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c715:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c718:	8b 40 04             	mov    0x4(%eax),%eax
c010c71b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c71e:	75 05                	jne    c010c725 <find_proc+0x56>
                return proc;
c010c720:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c723:	eb 1c                	jmp    c010c741 <find_proc+0x72>
c010c725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c728:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c010c72b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c72e:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010c731:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c737:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c73a:	75 ce                	jne    c010c70a <find_proc+0x3b>
            }
        }
    }
    return NULL;
c010c73c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c741:	c9                   	leave  
c010c742:	c3                   	ret    

c010c743 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c743:	55                   	push   %ebp
c010c744:	89 e5                	mov    %esp,%ebp
c010c746:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c749:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c750:	00 
c010c751:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c758:	00 
c010c759:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c75c:	89 04 24             	mov    %eax,(%esp)
c010c75f:	e8 21 87 00 00       	call   c0114e85 <memset>
    tf.tf_cs = KERNEL_CS;
c010c764:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c76a:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c770:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c774:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c778:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c77c:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c780:	8b 45 08             	mov    0x8(%ebp),%eax
c010c783:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c786:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c789:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c78c:	b8 c5 be 10 c0       	mov    $0xc010bec5,%eax
c010c791:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c794:	8b 45 10             	mov    0x10(%ebp),%eax
c010c797:	80 cc 01             	or     $0x1,%ah
c010c79a:	89 c2                	mov    %eax,%edx
c010c79c:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c79f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c7a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c7aa:	00 
c010c7ab:	89 14 24             	mov    %edx,(%esp)
c010c7ae:	e8 0e 04 00 00       	call   c010cbc1 <do_fork>
}
c010c7b3:	c9                   	leave  
c010c7b4:	c3                   	ret    

c010c7b5 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c7b5:	55                   	push   %ebp
c010c7b6:	89 e5                	mov    %esp,%ebp
c010c7b8:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c7bb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c7c2:	e8 17 b0 ff ff       	call   c01077de <alloc_pages>
c010c7c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c7ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c7ce:	74 1a                	je     c010c7ea <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c7d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7d3:	89 04 24             	mov    %eax,(%esp)
c010c7d6:	e8 e8 f7 ff ff       	call   c010bfc3 <page2kva>
c010c7db:	89 c2                	mov    %eax,%edx
c010c7dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e0:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c7e3:	b8 00 00 00 00       	mov    $0x0,%eax
c010c7e8:	eb 05                	jmp    c010c7ef <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c7ea:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c7ef:	c9                   	leave  
c010c7f0:	c3                   	ret    

c010c7f1 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c7f1:	55                   	push   %ebp
c010c7f2:	89 e5                	mov    %esp,%ebp
c010c7f4:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c7f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7fa:	8b 40 0c             	mov    0xc(%eax),%eax
c010c7fd:	89 04 24             	mov    %eax,(%esp)
c010c800:	e8 12 f8 ff ff       	call   c010c017 <kva2page>
c010c805:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c80c:	00 
c010c80d:	89 04 24             	mov    %eax,(%esp)
c010c810:	e8 34 b0 ff ff       	call   c0107849 <free_pages>
}
c010c815:	c9                   	leave  
c010c816:	c3                   	ret    

c010c817 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c817:	55                   	push   %ebp
c010c818:	89 e5                	mov    %esp,%ebp
c010c81a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c81d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c824:	e8 b5 af ff ff       	call   c01077de <alloc_pages>
c010c829:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c82c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c830:	75 0a                	jne    c010c83c <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c832:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c837:	e9 80 00 00 00       	jmp    c010c8bc <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c83c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c83f:	89 04 24             	mov    %eax,(%esp)
c010c842:	e8 7c f7 ff ff       	call   c010bfc3 <page2kva>
c010c847:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c84a:	a1 20 fa 14 c0       	mov    0xc014fa20,%eax
c010c84f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c856:	00 
c010c857:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c85b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c85e:	89 04 24             	mov    %eax,(%esp)
c010c861:	e8 01 87 00 00       	call   c0114f67 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c866:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c869:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c86f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c872:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c875:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c87c:	77 23                	ja     c010c8a1 <setup_pgdir+0x8a>
c010c87e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c881:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c885:	c7 44 24 08 14 82 11 	movl   $0xc0118214,0x8(%esp)
c010c88c:	c0 
c010c88d:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010c894:	00 
c010c895:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010c89c:	e8 52 3c ff ff       	call   c01004f3 <__panic>
c010c8a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8a4:	05 00 00 00 40       	add    $0x40000000,%eax
c010c8a9:	83 c8 03             	or     $0x3,%eax
c010c8ac:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c8ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c8b4:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c8b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c8bc:	c9                   	leave  
c010c8bd:	c3                   	ret    

c010c8be <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c8be:	55                   	push   %ebp
c010c8bf:	89 e5                	mov    %esp,%ebp
c010c8c1:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c8c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8c7:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8ca:	89 04 24             	mov    %eax,(%esp)
c010c8cd:	e8 45 f7 ff ff       	call   c010c017 <kva2page>
c010c8d2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c8d9:	00 
c010c8da:	89 04 24             	mov    %eax,(%esp)
c010c8dd:	e8 67 af ff ff       	call   c0107849 <free_pages>
}
c010c8e2:	c9                   	leave  
c010c8e3:	c3                   	ret    

c010c8e4 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c8e4:	55                   	push   %ebp
c010c8e5:	89 e5                	mov    %esp,%ebp
c010c8e7:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c8ea:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010c8ef:	8b 40 18             	mov    0x18(%eax),%eax
c010c8f2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c8f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c8f9:	75 0a                	jne    c010c905 <copy_mm+0x21>
        return 0;
c010c8fb:	b8 00 00 00 00       	mov    $0x0,%eax
c010c900:	e9 f9 00 00 00       	jmp    c010c9fe <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c905:	8b 45 08             	mov    0x8(%ebp),%eax
c010c908:	25 00 01 00 00       	and    $0x100,%eax
c010c90d:	85 c0                	test   %eax,%eax
c010c90f:	74 08                	je     c010c919 <copy_mm+0x35>
        mm = oldmm;
c010c911:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c914:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c917:	eb 78                	jmp    c010c991 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c919:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c920:	e8 36 6d ff ff       	call   c010365b <mm_create>
c010c925:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c928:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c92c:	75 05                	jne    c010c933 <copy_mm+0x4f>
        goto bad_mm;
c010c92e:	e9 c8 00 00 00       	jmp    c010c9fb <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c936:	89 04 24             	mov    %eax,(%esp)
c010c939:	e8 d9 fe ff ff       	call   c010c817 <setup_pgdir>
c010c93e:	85 c0                	test   %eax,%eax
c010c940:	74 05                	je     c010c947 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c942:	e9 a9 00 00 00       	jmp    c010c9f0 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c947:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c94a:	89 04 24             	mov    %eax,(%esp)
c010c94d:	e8 43 f7 ff ff       	call   c010c095 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c952:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c955:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c959:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c95c:	89 04 24             	mov    %eax,(%esp)
c010c95f:	e8 1a 72 ff ff       	call   c0103b7e <dup_mmap>
c010c964:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c96a:	89 04 24             	mov    %eax,(%esp)
c010c96d:	e8 56 f7 ff ff       	call   c010c0c8 <unlock_mm>

    if (ret != 0) {
c010c972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c976:	74 19                	je     c010c991 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c978:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c979:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c97c:	89 04 24             	mov    %eax,(%esp)
c010c97f:	e8 fb 72 ff ff       	call   c0103c7f <exit_mmap>
    put_pgdir(mm);
c010c984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c987:	89 04 24             	mov    %eax,(%esp)
c010c98a:	e8 2f ff ff ff       	call   c010c8be <put_pgdir>
c010c98f:	eb 5f                	jmp    c010c9f0 <copy_mm+0x10c>
    mm_count_inc(mm);
c010c991:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c994:	89 04 24             	mov    %eax,(%esp)
c010c997:	e8 c5 f6 ff ff       	call   c010c061 <mm_count_inc>
    proc->mm = mm;
c010c99c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c99f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c9a2:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c9a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9a8:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c9ae:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c9b5:	77 23                	ja     c010c9da <copy_mm+0xf6>
c010c9b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c9be:	c7 44 24 08 14 82 11 	movl   $0xc0118214,0x8(%esp)
c010c9c5:	c0 
c010c9c6:	c7 44 24 04 68 01 00 	movl   $0x168,0x4(%esp)
c010c9cd:	00 
c010c9ce:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010c9d5:	e8 19 3b ff ff       	call   c01004f3 <__panic>
c010c9da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9dd:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c9e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9e6:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c9e9:	b8 00 00 00 00       	mov    $0x0,%eax
c010c9ee:	eb 0e                	jmp    c010c9fe <copy_mm+0x11a>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c9f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9f3:	89 04 24             	mov    %eax,(%esp)
c010c9f6:	e8 c5 6f ff ff       	call   c01039c0 <mm_destroy>
bad_mm:
    return ret;
c010c9fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c9fe:	c9                   	leave  
c010c9ff:	c3                   	ret    

c010ca00 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ca00:	55                   	push   %ebp
c010ca01:	89 e5                	mov    %esp,%ebp
c010ca03:	57                   	push   %edi
c010ca04:	56                   	push   %esi
c010ca05:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010ca06:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca09:	8b 40 0c             	mov    0xc(%eax),%eax
c010ca0c:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010ca11:	89 c2                	mov    %eax,%edx
c010ca13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca16:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010ca19:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca1c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ca1f:	8b 55 10             	mov    0x10(%ebp),%edx
c010ca22:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010ca27:	89 c1                	mov    %eax,%ecx
c010ca29:	83 e1 01             	and    $0x1,%ecx
c010ca2c:	85 c9                	test   %ecx,%ecx
c010ca2e:	74 0e                	je     c010ca3e <copy_thread+0x3e>
c010ca30:	0f b6 0a             	movzbl (%edx),%ecx
c010ca33:	88 08                	mov    %cl,(%eax)
c010ca35:	83 c0 01             	add    $0x1,%eax
c010ca38:	83 c2 01             	add    $0x1,%edx
c010ca3b:	83 eb 01             	sub    $0x1,%ebx
c010ca3e:	89 c1                	mov    %eax,%ecx
c010ca40:	83 e1 02             	and    $0x2,%ecx
c010ca43:	85 c9                	test   %ecx,%ecx
c010ca45:	74 0f                	je     c010ca56 <copy_thread+0x56>
c010ca47:	0f b7 0a             	movzwl (%edx),%ecx
c010ca4a:	66 89 08             	mov    %cx,(%eax)
c010ca4d:	83 c0 02             	add    $0x2,%eax
c010ca50:	83 c2 02             	add    $0x2,%edx
c010ca53:	83 eb 02             	sub    $0x2,%ebx
c010ca56:	89 d9                	mov    %ebx,%ecx
c010ca58:	c1 e9 02             	shr    $0x2,%ecx
c010ca5b:	89 c7                	mov    %eax,%edi
c010ca5d:	89 d6                	mov    %edx,%esi
c010ca5f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010ca61:	89 f2                	mov    %esi,%edx
c010ca63:	89 f8                	mov    %edi,%eax
c010ca65:	b9 00 00 00 00       	mov    $0x0,%ecx
c010ca6a:	89 de                	mov    %ebx,%esi
c010ca6c:	83 e6 02             	and    $0x2,%esi
c010ca6f:	85 f6                	test   %esi,%esi
c010ca71:	74 0b                	je     c010ca7e <copy_thread+0x7e>
c010ca73:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010ca77:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010ca7b:	83 c1 02             	add    $0x2,%ecx
c010ca7e:	83 e3 01             	and    $0x1,%ebx
c010ca81:	85 db                	test   %ebx,%ebx
c010ca83:	74 07                	je     c010ca8c <copy_thread+0x8c>
c010ca85:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010ca89:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010ca8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca8f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ca92:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010ca99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca9c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ca9f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010caa2:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010caa5:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010caab:	8b 55 08             	mov    0x8(%ebp),%edx
c010caae:	8b 52 3c             	mov    0x3c(%edx),%edx
c010cab1:	8b 52 40             	mov    0x40(%edx),%edx
c010cab4:	80 ce 02             	or     $0x2,%dh
c010cab7:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010caba:	ba 03 c6 10 c0       	mov    $0xc010c603,%edx
c010cabf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac2:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010cac5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cacb:	89 c2                	mov    %eax,%edx
c010cacd:	8b 45 08             	mov    0x8(%ebp),%eax
c010cad0:	89 50 20             	mov    %edx,0x20(%eax)
}
c010cad3:	5b                   	pop    %ebx
c010cad4:	5e                   	pop    %esi
c010cad5:	5f                   	pop    %edi
c010cad6:	5d                   	pop    %ebp
c010cad7:	c3                   	ret    

c010cad8 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c010cad8:	55                   	push   %ebp
c010cad9:	89 e5                	mov    %esp,%ebp
c010cadb:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010cade:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cae3:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010cae9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010caec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010caf0:	75 24                	jne    c010cb16 <copy_fs+0x3e>
c010caf2:	c7 44 24 0c 4c 82 11 	movl   $0xc011824c,0xc(%esp)
c010caf9:	c0 
c010cafa:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010cb01:	c0 
c010cb02:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c010cb09:	00 
c010cb0a:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cb11:	e8 dd 39 ff ff       	call   c01004f3 <__panic>

    if (clone_flags & CLONE_FS) {
c010cb16:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb19:	25 00 08 00 00       	and    $0x800,%eax
c010cb1e:	85 c0                	test   %eax,%eax
c010cb20:	74 08                	je     c010cb2a <copy_fs+0x52>
        filesp = old_filesp;
c010cb22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb25:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010cb28:	eb 40                	jmp    c010cb6a <copy_fs+0x92>
    }

    int ret = -E_NO_MEM;
c010cb2a:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010cb31:	e8 ba f0 ff ff       	call   c010bbf0 <files_create>
c010cb36:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cb39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb3d:	75 02                	jne    c010cb41 <copy_fs+0x69>
        goto bad_files_struct;
c010cb3f:	eb 47                	jmp    c010cb88 <copy_fs+0xb0>
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
c010cb41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb44:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb4b:	89 04 24             	mov    %eax,(%esp)
c010cb4e:	e8 46 f2 ff ff       	call   c010bd99 <dup_fs>
c010cb53:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cb5a:	74 0e                	je     c010cb6a <copy_fs+0x92>
        goto bad_dup_cleanup_fs;
c010cb5c:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010cb5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb60:	89 04 24             	mov    %eax,(%esp)
c010cb63:	e8 eb f0 ff ff       	call   c010bc53 <files_destroy>
c010cb68:	eb 1e                	jmp    c010cb88 <copy_fs+0xb0>
    files_count_inc(filesp);
c010cb6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb6d:	89 04 24             	mov    %eax,(%esp)
c010cb70:	e8 79 f5 ff ff       	call   c010c0ee <files_count_inc>
    proc->filesp = filesp;
c010cb75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb78:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb7b:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010cb81:	b8 00 00 00 00       	mov    $0x0,%eax
c010cb86:	eb 03                	jmp    c010cb8b <copy_fs+0xb3>
bad_files_struct:
    return ret;
c010cb88:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010cb8b:	c9                   	leave  
c010cb8c:	c3                   	ret    

c010cb8d <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c010cb8d:	55                   	push   %ebp
c010cb8e:	89 e5                	mov    %esp,%ebp
c010cb90:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010cb93:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb96:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010cb9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010cb9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cba3:	74 1a                	je     c010cbbf <put_fs+0x32>
        if (files_count_dec(filesp) == 0) {
c010cba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cba8:	89 04 24             	mov    %eax,(%esp)
c010cbab:	e8 58 f5 ff ff       	call   c010c108 <files_count_dec>
c010cbb0:	85 c0                	test   %eax,%eax
c010cbb2:	75 0b                	jne    c010cbbf <put_fs+0x32>
            files_destroy(filesp);
c010cbb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbb7:	89 04 24             	mov    %eax,(%esp)
c010cbba:	e8 94 f0 ff ff       	call   c010bc53 <files_destroy>
        }
    }
}
c010cbbf:	c9                   	leave  
c010cbc0:	c3                   	ret    

c010cbc1 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010cbc1:	55                   	push   %ebp
c010cbc2:	89 e5                	mov    %esp,%ebp
c010cbc4:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010cbc7:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010cbce:	a1 40 50 15 c0       	mov    0xc0155040,%eax
c010cbd3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010cbd8:	7e 05                	jle    c010cbdf <do_fork+0x1e>
        goto fork_out;
c010cbda:	e9 0d 01 00 00       	jmp    c010ccec <do_fork+0x12b>
    }
    ret = -E_NO_MEM;
c010cbdf:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010cbe6:	e8 37 f5 ff ff       	call   c010c122 <alloc_proc>
c010cbeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cbee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cbf2:	75 05                	jne    c010cbf9 <do_fork+0x38>
        goto fork_out;
c010cbf4:	e9 f3 00 00 00       	jmp    c010ccec <do_fork+0x12b>
    }

    proc->parent = current;
c010cbf9:	8b 15 28 30 15 c0    	mov    0xc0153028,%edx
c010cbff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc02:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010cc05:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cc0a:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc10:	85 c0                	test   %eax,%eax
c010cc12:	74 24                	je     c010cc38 <do_fork+0x77>
c010cc14:	c7 44 24 0c 74 82 11 	movl   $0xc0118274,0xc(%esp)
c010cc1b:	c0 
c010cc1c:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010cc23:	c0 
c010cc24:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c010cc2b:	00 
c010cc2c:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cc33:	e8 bb 38 ff ff       	call   c01004f3 <__panic>

    if (setup_kstack(proc) != 0) {
c010cc38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc3b:	89 04 24             	mov    %eax,(%esp)
c010cc3e:	e8 72 fb ff ff       	call   c010c7b5 <setup_kstack>
c010cc43:	85 c0                	test   %eax,%eax
c010cc45:	74 05                	je     c010cc4c <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010cc47:	e9 b0 00 00 00       	jmp    c010ccfc <do_fork+0x13b>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c010cc4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc53:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc56:	89 04 24             	mov    %eax,(%esp)
c010cc59:	e8 7a fe ff ff       	call   c010cad8 <copy_fs>
c010cc5e:	85 c0                	test   %eax,%eax
c010cc60:	74 05                	je     c010cc67 <do_fork+0xa6>
        goto bad_fork_cleanup_kstack;
c010cc62:	e9 8a 00 00 00       	jmp    c010ccf1 <do_fork+0x130>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010cc67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc71:	89 04 24             	mov    %eax,(%esp)
c010cc74:	e8 6b fc ff ff       	call   c010c8e4 <copy_mm>
c010cc79:	85 c0                	test   %eax,%eax
c010cc7b:	74 0e                	je     c010cc8b <do_fork+0xca>
        goto bad_fork_cleanup_fs;
c010cc7d:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
c010cc7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc81:	89 04 24             	mov    %eax,(%esp)
c010cc84:	e8 04 ff ff ff       	call   c010cb8d <put_fs>
c010cc89:	eb 66                	jmp    c010ccf1 <do_fork+0x130>
    copy_thread(proc, stack, tf);
c010cc8b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc8e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc9c:	89 04 24             	mov    %eax,(%esp)
c010cc9f:	e8 5c fd ff ff       	call   c010ca00 <copy_thread>
    local_intr_save(intr_flag);
c010cca4:	e8 5e f2 ff ff       	call   c010bf07 <__intr_save>
c010cca9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        proc->pid = get_pid();
c010ccac:	e8 e5 f7 ff ff       	call   c010c496 <get_pid>
c010ccb1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ccb4:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010ccb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccba:	89 04 24             	mov    %eax,(%esp)
c010ccbd:	e8 59 f9 ff ff       	call   c010c61b <hash_proc>
        set_links(proc);
c010ccc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccc5:	89 04 24             	mov    %eax,(%esp)
c010ccc8:	e8 6e f6 ff ff       	call   c010c33b <set_links>
    local_intr_restore(intr_flag);
c010cccd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccd0:	89 04 24             	mov    %eax,(%esp)
c010ccd3:	e8 59 f2 ff ff       	call   c010bf31 <__intr_restore>
    wakeup_proc(proc);
c010ccd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccdb:	89 04 24             	mov    %eax,(%esp)
c010ccde:	e8 cd 16 00 00       	call   c010e3b0 <wakeup_proc>
    ret = proc->pid;
c010cce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cce6:	8b 40 04             	mov    0x4(%eax),%eax
c010cce9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010ccec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccef:	eb 18                	jmp    c010cd09 <do_fork+0x148>
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010ccf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccf4:	89 04 24             	mov    %eax,(%esp)
c010ccf7:	e8 f5 fa ff ff       	call   c010c7f1 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010ccfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccff:	89 04 24             	mov    %eax,(%esp)
c010cd02:	e8 16 8f ff ff       	call   c0105c1d <kfree>
    goto fork_out;
c010cd07:	eb e3                	jmp    c010ccec <do_fork+0x12b>
}
c010cd09:	c9                   	leave  
c010cd0a:	c3                   	ret    

c010cd0b <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cd0b:	55                   	push   %ebp
c010cd0c:	89 e5                	mov    %esp,%ebp
c010cd0e:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cd11:	8b 15 28 30 15 c0    	mov    0xc0153028,%edx
c010cd17:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010cd1c:	39 c2                	cmp    %eax,%edx
c010cd1e:	75 1c                	jne    c010cd3c <do_exit+0x31>
        panic("idleproc exit.\n");
c010cd20:	c7 44 24 08 8d 82 11 	movl   $0xc011828d,0x8(%esp)
c010cd27:	c0 
c010cd28:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c010cd2f:	00 
c010cd30:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cd37:	e8 b7 37 ff ff       	call   c01004f3 <__panic>
    }
    if (current == initproc) {
c010cd3c:	8b 15 28 30 15 c0    	mov    0xc0153028,%edx
c010cd42:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cd47:	39 c2                	cmp    %eax,%edx
c010cd49:	75 1c                	jne    c010cd67 <do_exit+0x5c>
        panic("initproc exit.\n");
c010cd4b:	c7 44 24 08 9d 82 11 	movl   $0xc011829d,0x8(%esp)
c010cd52:	c0 
c010cd53:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010cd5a:	00 
c010cd5b:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cd62:	e8 8c 37 ff ff       	call   c01004f3 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cd67:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cd6c:	8b 40 18             	mov    0x18(%eax),%eax
c010cd6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cd72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd76:	74 4a                	je     c010cdc2 <do_exit+0xb7>
        lcr3(boot_cr3);
c010cd78:	a1 fc 61 15 c0       	mov    0xc01561fc,%eax
c010cd7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd83:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cd86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd89:	89 04 24             	mov    %eax,(%esp)
c010cd8c:	e8 ea f2 ff ff       	call   c010c07b <mm_count_dec>
c010cd91:	85 c0                	test   %eax,%eax
c010cd93:	75 21                	jne    c010cdb6 <do_exit+0xab>
            exit_mmap(mm);
c010cd95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd98:	89 04 24             	mov    %eax,(%esp)
c010cd9b:	e8 df 6e ff ff       	call   c0103c7f <exit_mmap>
            put_pgdir(mm);
c010cda0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cda3:	89 04 24             	mov    %eax,(%esp)
c010cda6:	e8 13 fb ff ff       	call   c010c8be <put_pgdir>
            mm_destroy(mm);
c010cdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdae:	89 04 24             	mov    %eax,(%esp)
c010cdb1:	e8 0a 6c ff ff       	call   c01039c0 <mm_destroy>
        }
        current->mm = NULL;
c010cdb6:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cdbb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c010cdc2:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cdc7:	89 04 24             	mov    %eax,(%esp)
c010cdca:	e8 be fd ff ff       	call   c010cb8d <put_fs>
    current->state = PROC_ZOMBIE;
c010cdcf:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cdd4:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cdda:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cddf:	8b 55 08             	mov    0x8(%ebp),%edx
c010cde2:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cde8:	e8 1a f1 ff ff       	call   c010bf07 <__intr_save>
c010cded:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cdf0:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cdf5:	8b 40 14             	mov    0x14(%eax),%eax
c010cdf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cdfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdfe:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ce04:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ce09:	75 10                	jne    c010ce1b <do_exit+0x110>
            wakeup_proc(proc);
c010ce0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce0e:	89 04 24             	mov    %eax,(%esp)
c010ce11:	e8 9a 15 00 00       	call   c010e3b0 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010ce16:	e9 ac 00 00 00       	jmp    c010cec7 <do_exit+0x1bc>
c010ce1b:	e9 a7 00 00 00       	jmp    c010cec7 <do_exit+0x1bc>
            proc = current->cptr;
c010ce20:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ce25:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ce2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010ce2e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ce33:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce36:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ce3c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010ce42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce45:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010ce4c:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010ce4f:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010ce54:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010ce5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce5d:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ce63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce66:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010ce6c:	85 c0                	test   %eax,%eax
c010ce6e:	74 14                	je     c010ce84 <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010ce70:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010ce75:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ce7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce7e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010ce84:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010ce8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce8d:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010ce90:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010ce95:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce98:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010ce9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cea1:	8b 00                	mov    (%eax),%eax
c010cea3:	83 f8 03             	cmp    $0x3,%eax
c010cea6:	75 1f                	jne    c010cec7 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cea8:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cead:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ceb3:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ceb8:	75 0d                	jne    c010cec7 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010ceba:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cebf:	89 04 24             	mov    %eax,(%esp)
c010cec2:	e8 e9 14 00 00       	call   c010e3b0 <wakeup_proc>
        while (current->cptr != NULL) {
c010cec7:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cecc:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ced2:	85 c0                	test   %eax,%eax
c010ced4:	0f 85 46 ff ff ff    	jne    c010ce20 <do_exit+0x115>
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ceda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cedd:	89 04 24             	mov    %eax,(%esp)
c010cee0:	e8 4c f0 ff ff       	call   c010bf31 <__intr_restore>
    
    schedule();
c010cee5:	e8 62 15 00 00       	call   c010e44c <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ceea:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ceef:	8b 40 04             	mov    0x4(%eax),%eax
c010cef2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cef6:	c7 44 24 08 b0 82 11 	movl   $0xc01182b0,0x8(%esp)
c010cefd:	c0 
c010cefe:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
c010cf05:	00 
c010cf06:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cf0d:	e8 e1 35 ff ff       	call   c01004f3 <__panic>

c010cf12 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cf12:	55                   	push   %ebp
c010cf13:	89 e5                	mov    %esp,%ebp
c010cf15:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cf18:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cf1f:	00 
c010cf20:	8b 45 14             	mov    0x14(%ebp),%eax
c010cf23:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf27:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf2a:	89 04 24             	mov    %eax,(%esp)
c010cf2d:	e8 9d d8 ff ff       	call   c010a7cf <sysfile_seek>
c010cf32:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf39:	74 05                	je     c010cf40 <load_icode_read+0x2e>
        return ret;
c010cf3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf3e:	eb 38                	jmp    c010cf78 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cf40:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf43:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf47:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf51:	89 04 24             	mov    %eax,(%esp)
c010cf54:	e8 84 d5 ff ff       	call   c010a4dd <sysfile_read>
c010cf59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf5f:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cf62:	74 0f                	je     c010cf73 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010cf64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010cf69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf6d:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010cf71:	eb 05                	jmp    c010cf78 <load_icode_read+0x66>
    }
    return 0;
c010cf73:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cf78:	c9                   	leave  
c010cf79:	c3                   	ret    

c010cf7a <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010cf7a:	55                   	push   %ebp
c010cf7b:	89 e5                	mov    %esp,%ebp
c010cf7d:	53                   	push   %ebx
c010cf7e:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010cf84:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cf88:	78 06                	js     c010cf90 <load_icode+0x16>
c010cf8a:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010cf8e:	7e 24                	jle    c010cfb4 <load_icode+0x3a>
c010cf90:	c7 44 24 0c d0 82 11 	movl   $0xc01182d0,0xc(%esp)
c010cf97:	c0 
c010cf98:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010cf9f:	c0 
c010cfa0:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c010cfa7:	00 
c010cfa8:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cfaf:	e8 3f 35 ff ff       	call   c01004f3 <__panic>

    if (current->mm != NULL) {
c010cfb4:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010cfb9:	8b 40 18             	mov    0x18(%eax),%eax
c010cfbc:	85 c0                	test   %eax,%eax
c010cfbe:	74 1c                	je     c010cfdc <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c010cfc0:	c7 44 24 08 f8 82 11 	movl   $0xc01182f8,0x8(%esp)
c010cfc7:	c0 
c010cfc8:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c010cfcf:	00 
c010cfd0:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010cfd7:	e8 17 35 ff ff       	call   c01004f3 <__panic>
    }

    int ret = -E_NO_MEM;
c010cfdc:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010cfe3:	e8 73 66 ff ff       	call   c010365b <mm_create>
c010cfe8:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010cfeb:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010cfef:	75 06                	jne    c010cff7 <load_icode+0x7d>
        goto bad_mm;
c010cff1:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cff2:	e9 85 07 00 00       	jmp    c010d77c <load_icode+0x802>
    if (setup_pgdir(mm) != 0) {
c010cff7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cffa:	89 04 24             	mov    %eax,(%esp)
c010cffd:	e8 15 f8 ff ff       	call   c010c817 <setup_pgdir>
c010d002:	85 c0                	test   %eax,%eax
c010d004:	74 05                	je     c010d00b <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c010d006:	e9 8c 07 00 00       	jmp    c010d797 <load_icode+0x81d>
    struct elfhdr __elf, *elf = &__elf;
c010d00b:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010d011:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010d014:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d01b:	00 
c010d01c:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010d023:	00 
c010d024:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d027:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02e:	89 04 24             	mov    %eax,(%esp)
c010d031:	e8 dc fe ff ff       	call   c010cf12 <load_icode_read>
c010d036:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d039:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d03d:	74 05                	je     c010d044 <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c010d03f:	e9 48 07 00 00       	jmp    c010d78c <load_icode+0x812>
    if (elf->e_magic != ELF_MAGIC) {
c010d044:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d047:	8b 00                	mov    (%eax),%eax
c010d049:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010d04e:	74 0c                	je     c010d05c <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c010d050:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010d057:	e9 30 07 00 00       	jmp    c010d78c <load_icode+0x812>
    struct proghdr __ph, *ph = &__ph;
c010d05c:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010d062:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d065:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010d06c:	e9 76 03 00 00       	jmp    c010d3e7 <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010d071:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d074:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d077:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d07a:	c1 e2 05             	shl    $0x5,%edx
c010d07d:	01 d0                	add    %edx,%eax
c010d07f:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010d082:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010d085:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d089:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010d090:	00 
c010d091:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d094:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d098:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09b:	89 04 24             	mov    %eax,(%esp)
c010d09e:	e8 6f fe ff ff       	call   c010cf12 <load_icode_read>
c010d0a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d0a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d0aa:	74 05                	je     c010d0b1 <load_icode+0x137>
            goto bad_cleanup_mmap;
c010d0ac:	e9 d0 06 00 00       	jmp    c010d781 <load_icode+0x807>
        if (ph->p_type != ELF_PT_LOAD) {
c010d0b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0b4:	8b 00                	mov    (%eax),%eax
c010d0b6:	83 f8 01             	cmp    $0x1,%eax
c010d0b9:	74 05                	je     c010d0c0 <load_icode+0x146>
            continue ;
c010d0bb:	e9 23 03 00 00       	jmp    c010d3e3 <load_icode+0x469>
        if (ph->p_filesz > ph->p_memsz) {
c010d0c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0c3:	8b 50 10             	mov    0x10(%eax),%edx
c010d0c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0c9:	8b 40 14             	mov    0x14(%eax),%eax
c010d0cc:	39 c2                	cmp    %eax,%edx
c010d0ce:	76 0c                	jbe    c010d0dc <load_icode+0x162>
            ret = -E_INVAL_ELF;
c010d0d0:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010d0d7:	e9 a5 06 00 00       	jmp    c010d781 <load_icode+0x807>
        if (ph->p_filesz == 0) {
c010d0dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0df:	8b 40 10             	mov    0x10(%eax),%eax
c010d0e2:	85 c0                	test   %eax,%eax
c010d0e4:	75 05                	jne    c010d0eb <load_icode+0x171>
            continue ;
c010d0e6:	e9 f8 02 00 00       	jmp    c010d3e3 <load_icode+0x469>
        vm_flags = 0, perm = PTE_U;
c010d0eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010d0f2:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010d0f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0fc:	8b 40 18             	mov    0x18(%eax),%eax
c010d0ff:	83 e0 01             	and    $0x1,%eax
c010d102:	85 c0                	test   %eax,%eax
c010d104:	74 04                	je     c010d10a <load_icode+0x190>
c010d106:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010d10a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d10d:	8b 40 18             	mov    0x18(%eax),%eax
c010d110:	83 e0 02             	and    $0x2,%eax
c010d113:	85 c0                	test   %eax,%eax
c010d115:	74 04                	je     c010d11b <load_icode+0x1a1>
c010d117:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010d11b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d11e:	8b 40 18             	mov    0x18(%eax),%eax
c010d121:	83 e0 04             	and    $0x4,%eax
c010d124:	85 c0                	test   %eax,%eax
c010d126:	74 04                	je     c010d12c <load_icode+0x1b2>
c010d128:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010d12c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d12f:	83 e0 02             	and    $0x2,%eax
c010d132:	85 c0                	test   %eax,%eax
c010d134:	74 04                	je     c010d13a <load_icode+0x1c0>
c010d136:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010d13a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d13d:	8b 50 14             	mov    0x14(%eax),%edx
c010d140:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d143:	8b 40 08             	mov    0x8(%eax),%eax
c010d146:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d14d:	00 
c010d14e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d151:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010d155:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d159:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d15d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d160:	89 04 24             	mov    %eax,(%esp)
c010d163:	e8 fa 68 ff ff       	call   c0103a62 <mm_map>
c010d168:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d16b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d16f:	74 05                	je     c010d176 <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c010d171:	e9 0b 06 00 00       	jmp    c010d781 <load_icode+0x807>
        off_t offset = ph->p_offset;
c010d176:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d179:	8b 40 04             	mov    0x4(%eax),%eax
c010d17c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010d17f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d182:	8b 40 08             	mov    0x8(%eax),%eax
c010d185:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d188:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d18b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010d18e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010d191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d196:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        ret = -E_NO_MEM;
c010d199:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
        end = ph->p_va + ph->p_filesz;
c010d1a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1a3:	8b 50 08             	mov    0x8(%eax),%edx
c010d1a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d1a9:	8b 40 10             	mov    0x10(%eax),%eax
c010d1ac:	01 d0                	add    %edx,%eax
c010d1ae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010d1b1:	e9 b1 00 00 00       	jmp    c010d267 <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d1b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d1b9:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d1bf:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d1c3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d1c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d1ca:	89 04 24             	mov    %eax,(%esp)
c010d1cd:	e8 6a b4 ff ff       	call   c010863c <pgdir_alloc_page>
c010d1d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d1d9:	75 0c                	jne    c010d1e7 <load_icode+0x26d>
                ret = -E_NO_MEM;
c010d1db:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d1e2:	e9 9a 05 00 00       	jmp    c010d781 <load_icode+0x807>
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d1e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d1ed:	29 c2                	sub    %eax,%edx
c010d1ef:	89 d0                	mov    %edx,%eax
c010d1f1:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d1f4:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d1f9:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d1fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d1ff:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d206:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d209:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d20c:	73 0d                	jae    c010d21b <load_icode+0x2a1>
                size -= la - end;
c010d20e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d211:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d214:	29 c2                	sub    %eax,%edx
c010d216:	89 d0                	mov    %edx,%eax
c010d218:	01 45 dc             	add    %eax,-0x24(%ebp)
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010d21b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d21e:	89 04 24             	mov    %eax,(%esp)
c010d221:	e8 9d ed ff ff       	call   c010bfc3 <page2kva>
c010d226:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d229:	01 c2                	add    %eax,%edx
c010d22b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d22e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d232:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d235:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d239:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d23d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d240:	89 04 24             	mov    %eax,(%esp)
c010d243:	e8 ca fc ff ff       	call   c010cf12 <load_icode_read>
c010d248:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d24b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d24f:	74 05                	je     c010d256 <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c010d251:	e9 2b 05 00 00       	jmp    c010d781 <load_icode+0x807>
            start += size, offset += size;
c010d256:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d259:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d25c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d25f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d262:	01 d0                	add    %edx,%eax
c010d264:	89 45 e0             	mov    %eax,-0x20(%ebp)
        while (start < end) {
c010d267:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d26a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d26d:	0f 82 43 ff ff ff    	jb     c010d1b6 <load_icode+0x23c>
        end = ph->p_va + ph->p_memsz;
c010d273:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d276:	8b 50 08             	mov    0x8(%eax),%edx
c010d279:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d27c:	8b 40 14             	mov    0x14(%eax),%eax
c010d27f:	01 d0                	add    %edx,%eax
c010d281:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010d284:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d287:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d28a:	0f 83 b0 00 00 00    	jae    c010d340 <load_icode+0x3c6>
            if (start == end) {
c010d290:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d293:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d296:	75 05                	jne    c010d29d <load_icode+0x323>
                continue ;
c010d298:	e9 46 01 00 00       	jmp    c010d3e3 <load_icode+0x469>
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d29d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d2a0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d2a3:	29 c2                	sub    %eax,%edx
c010d2a5:	89 d0                	mov    %edx,%eax
c010d2a7:	05 00 10 00 00       	add    $0x1000,%eax
c010d2ac:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d2af:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d2b4:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d2b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d2ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d2bd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d2c0:	73 0d                	jae    c010d2cf <load_icode+0x355>
                size -= la - end;
c010d2c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d2c5:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d2c8:	29 c2                	sub    %eax,%edx
c010d2ca:	89 d0                	mov    %edx,%eax
c010d2cc:	01 45 dc             	add    %eax,-0x24(%ebp)
            memset(page2kva(page) + off, 0, size);
c010d2cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2d2:	89 04 24             	mov    %eax,(%esp)
c010d2d5:	e8 e9 ec ff ff       	call   c010bfc3 <page2kva>
c010d2da:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d2dd:	01 c2                	add    %eax,%edx
c010d2df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d2e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d2ed:	00 
c010d2ee:	89 14 24             	mov    %edx,(%esp)
c010d2f1:	e8 8f 7b 00 00       	call   c0114e85 <memset>
            start += size;
c010d2f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d2f9:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d2fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d2ff:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d302:	73 08                	jae    c010d30c <load_icode+0x392>
c010d304:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d307:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d30a:	74 34                	je     c010d340 <load_icode+0x3c6>
c010d30c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d30f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d312:	72 08                	jb     c010d31c <load_icode+0x3a2>
c010d314:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d317:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d31a:	74 24                	je     c010d340 <load_icode+0x3c6>
c010d31c:	c7 44 24 0c 20 83 11 	movl   $0xc0118320,0xc(%esp)
c010d323:	c0 
c010d324:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010d32b:	c0 
c010d32c:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010d333:	00 
c010d334:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d33b:	e8 b3 31 ff ff       	call   c01004f3 <__panic>
        while (start < end) {
c010d340:	e9 92 00 00 00       	jmp    c010d3d7 <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d345:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d348:	8b 40 0c             	mov    0xc(%eax),%eax
c010d34b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d34e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d352:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d355:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d359:	89 04 24             	mov    %eax,(%esp)
c010d35c:	e8 db b2 ff ff       	call   c010863c <pgdir_alloc_page>
c010d361:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d364:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d368:	75 0c                	jne    c010d376 <load_icode+0x3fc>
                ret = -E_NO_MEM;
c010d36a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d371:	e9 0b 04 00 00       	jmp    c010d781 <load_icode+0x807>
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d376:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d379:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d37c:	29 c2                	sub    %eax,%edx
c010d37e:	89 d0                	mov    %edx,%eax
c010d380:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d383:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d388:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d38b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d38e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d395:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d398:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d39b:	73 0d                	jae    c010d3aa <load_icode+0x430>
                size -= la - end;
c010d39d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d3a0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d3a3:	29 c2                	sub    %eax,%edx
c010d3a5:	89 d0                	mov    %edx,%eax
c010d3a7:	01 45 dc             	add    %eax,-0x24(%ebp)
            memset(page2kva(page) + off, 0, size);
c010d3aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3ad:	89 04 24             	mov    %eax,(%esp)
c010d3b0:	e8 0e ec ff ff       	call   c010bfc3 <page2kva>
c010d3b5:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d3b8:	01 c2                	add    %eax,%edx
c010d3ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d3bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d3c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d3c8:	00 
c010d3c9:	89 14 24             	mov    %edx,(%esp)
c010d3cc:	e8 b4 7a 00 00       	call   c0114e85 <memset>
            start += size;
c010d3d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d3d4:	01 45 d8             	add    %eax,-0x28(%ebp)
        while (start < end) {
c010d3d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d3da:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d3dd:	0f 82 62 ff ff ff    	jb     c010d345 <load_icode+0x3cb>
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d3e3:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d3ea:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d3ee:	0f b7 c0             	movzwl %ax,%eax
c010d3f1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d3f4:	0f 87 77 fc ff ff    	ja     c010d071 <load_icode+0xf7>
    sysfile_close(fd);
c010d3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3fd:	89 04 24             	mov    %eax,(%esp)
c010d400:	e8 c5 d0 ff ff       	call   c010a4ca <sysfile_close>
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d405:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d40c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d413:	00 
c010d414:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d417:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d41b:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d422:	00 
c010d423:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d42a:	af 
c010d42b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d42e:	89 04 24             	mov    %eax,(%esp)
c010d431:	e8 2c 66 ff ff       	call   c0103a62 <mm_map>
c010d436:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d439:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d43d:	74 05                	je     c010d444 <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c010d43f:	e9 3d 03 00 00       	jmp    c010d781 <load_icode+0x807>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d444:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d447:	8b 40 0c             	mov    0xc(%eax),%eax
c010d44a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d451:	00 
c010d452:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d459:	af 
c010d45a:	89 04 24             	mov    %eax,(%esp)
c010d45d:	e8 da b1 ff ff       	call   c010863c <pgdir_alloc_page>
c010d462:	85 c0                	test   %eax,%eax
c010d464:	75 24                	jne    c010d48a <load_icode+0x510>
c010d466:	c7 44 24 0c 5c 83 11 	movl   $0xc011835c,0xc(%esp)
c010d46d:	c0 
c010d46e:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010d475:	c0 
c010d476:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
c010d47d:	00 
c010d47e:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d485:	e8 69 30 ff ff       	call   c01004f3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d48a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d48d:	8b 40 0c             	mov    0xc(%eax),%eax
c010d490:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d497:	00 
c010d498:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d49f:	af 
c010d4a0:	89 04 24             	mov    %eax,(%esp)
c010d4a3:	e8 94 b1 ff ff       	call   c010863c <pgdir_alloc_page>
c010d4a8:	85 c0                	test   %eax,%eax
c010d4aa:	75 24                	jne    c010d4d0 <load_icode+0x556>
c010d4ac:	c7 44 24 0c a0 83 11 	movl   $0xc01183a0,0xc(%esp)
c010d4b3:	c0 
c010d4b4:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010d4bb:	c0 
c010d4bc:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c010d4c3:	00 
c010d4c4:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d4cb:	e8 23 30 ff ff       	call   c01004f3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d4d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4d3:	8b 40 0c             	mov    0xc(%eax),%eax
c010d4d6:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d4dd:	00 
c010d4de:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d4e5:	af 
c010d4e6:	89 04 24             	mov    %eax,(%esp)
c010d4e9:	e8 4e b1 ff ff       	call   c010863c <pgdir_alloc_page>
c010d4ee:	85 c0                	test   %eax,%eax
c010d4f0:	75 24                	jne    c010d516 <load_icode+0x59c>
c010d4f2:	c7 44 24 0c e4 83 11 	movl   $0xc01183e4,0xc(%esp)
c010d4f9:	c0 
c010d4fa:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010d501:	c0 
c010d502:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
c010d509:	00 
c010d50a:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d511:	e8 dd 2f ff ff       	call   c01004f3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d516:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d519:	8b 40 0c             	mov    0xc(%eax),%eax
c010d51c:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d523:	00 
c010d524:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d52b:	af 
c010d52c:	89 04 24             	mov    %eax,(%esp)
c010d52f:	e8 08 b1 ff ff       	call   c010863c <pgdir_alloc_page>
c010d534:	85 c0                	test   %eax,%eax
c010d536:	75 24                	jne    c010d55c <load_icode+0x5e2>
c010d538:	c7 44 24 0c 28 84 11 	movl   $0xc0118428,0xc(%esp)
c010d53f:	c0 
c010d540:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010d547:	c0 
c010d548:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c010d54f:	00 
c010d550:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d557:	e8 97 2f ff ff       	call   c01004f3 <__panic>
    mm_count_inc(mm);
c010d55c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d55f:	89 04 24             	mov    %eax,(%esp)
c010d562:	e8 fa ea ff ff       	call   c010c061 <mm_count_inc>
    current->mm = mm;
c010d567:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d56c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d56f:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d572:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d577:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d57a:	8b 52 0c             	mov    0xc(%edx),%edx
c010d57d:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d580:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d587:	77 23                	ja     c010d5ac <load_icode+0x632>
c010d589:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d58c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d590:	c7 44 24 08 14 82 11 	movl   $0xc0118214,0x8(%esp)
c010d597:	c0 
c010d598:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c010d59f:	00 
c010d5a0:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d5a7:	e8 47 2f ff ff       	call   c01004f3 <__panic>
c010d5ac:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d5af:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d5b5:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d5b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d5bb:	8b 40 0c             	mov    0xc(%eax),%eax
c010d5be:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d5c1:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d5c8:	77 23                	ja     c010d5ed <load_icode+0x673>
c010d5ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d5cd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d5d1:	c7 44 24 08 14 82 11 	movl   $0xc0118214,0x8(%esp)
c010d5d8:	c0 
c010d5d9:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c010d5e0:	00 
c010d5e1:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010d5e8:	e8 06 2f ff ff       	call   c01004f3 <__panic>
c010d5ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d5f0:	05 00 00 00 40       	add    $0x40000000,%eax
c010d5f5:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d5f8:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d5fb:	0f 22 d8             	mov    %eax,%cr3
    uint32_t argv_size=0, i;
c010d5fe:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d605:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d60c:	eb 30                	jmp    c010d63e <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d60e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d611:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d618:	8b 45 10             	mov    0x10(%ebp),%eax
c010d61b:	01 d0                	add    %edx,%eax
c010d61d:	8b 00                	mov    (%eax),%eax
c010d61f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d626:	00 
c010d627:	89 04 24             	mov    %eax,(%esp)
c010d62a:	e8 28 75 00 00       	call   c0114b57 <strnlen>
c010d62f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d632:	01 d0                	add    %edx,%eax
c010d634:	83 c0 01             	add    $0x1,%eax
c010d637:	89 45 d0             	mov    %eax,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d63a:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d63e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d641:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d644:	77 c8                	ja     c010d60e <load_icode+0x694>
    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d646:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d649:	c1 e8 02             	shr    $0x2,%eax
c010d64c:	89 c2                	mov    %eax,%edx
c010d64e:	b8 00 00 00 00       	mov    $0x0,%eax
c010d653:	29 d0                	sub    %edx,%eax
c010d655:	c1 e0 02             	shl    $0x2,%eax
c010d658:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d65d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d660:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d663:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d66a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d66d:	29 d0                	sub    %edx,%eax
c010d66f:	89 45 a0             	mov    %eax,-0x60(%ebp)
    argv_size = 0;
c010d672:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d679:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d680:	eb 67                	jmp    c010d6e9 <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d682:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d68c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d68f:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d692:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d695:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d69c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d69f:	01 d0                	add    %edx,%eax
c010d6a1:	8b 10                	mov    (%eax),%edx
c010d6a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d6a6:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d6a9:	01 c8                	add    %ecx,%eax
c010d6ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d6af:	89 04 24             	mov    %eax,(%esp)
c010d6b2:	e8 f7 74 00 00       	call   c0114bae <strcpy>
c010d6b7:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d6b9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d6bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6c3:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6c6:	01 d0                	add    %edx,%eax
c010d6c8:	8b 00                	mov    (%eax),%eax
c010d6ca:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d6d1:	00 
c010d6d2:	89 04 24             	mov    %eax,(%esp)
c010d6d5:	e8 7d 74 00 00       	call   c0114b57 <strnlen>
c010d6da:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d6dd:	01 d0                	add    %edx,%eax
c010d6df:	83 c0 01             	add    $0x1,%eax
c010d6e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d6e5:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d6e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d6ef:	77 91                	ja     c010d682 <load_icode+0x708>
    stacktop = (uintptr_t)uargv - sizeof(int);
c010d6f1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d6f4:	83 e8 04             	sub    $0x4,%eax
c010d6f7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010d6fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d6fd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d700:	89 10                	mov    %edx,(%eax)
    struct trapframe *tf = current->tf;
c010d702:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d707:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d70a:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d70d:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d714:	00 
c010d715:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d71c:	00 
c010d71d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d720:	89 04 24             	mov    %eax,(%esp)
c010d723:	e8 5d 77 00 00       	call   c0114e85 <memset>
    tf->tf_cs = USER_CS;
c010d728:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d72b:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d731:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d734:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d73a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d73d:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d741:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d744:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d748:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d74b:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d74f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d752:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d756:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d759:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d75c:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d75f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d762:	8b 50 18             	mov    0x18(%eax),%edx
c010d765:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d768:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d76b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d76e:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d775:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return ret;
c010d77c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d77f:	eb 23                	jmp    c010d7a4 <load_icode+0x82a>
    exit_mmap(mm);
c010d781:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d784:	89 04 24             	mov    %eax,(%esp)
c010d787:	e8 f3 64 ff ff       	call   c0103c7f <exit_mmap>
    put_pgdir(mm);
c010d78c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d78f:	89 04 24             	mov    %eax,(%esp)
c010d792:	e8 27 f1 ff ff       	call   c010c8be <put_pgdir>
    mm_destroy(mm);
c010d797:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d79a:	89 04 24             	mov    %eax,(%esp)
c010d79d:	e8 1e 62 ff ff       	call   c01039c0 <mm_destroy>
    goto out;
c010d7a2:	eb d8                	jmp    c010d77c <load_icode+0x802>
}
c010d7a4:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d7aa:	5b                   	pop    %ebx
c010d7ab:	5d                   	pop    %ebp
c010d7ac:	c3                   	ret    

c010d7ad <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d7ad:	55                   	push   %ebp
c010d7ae:	89 e5                	mov    %esp,%ebp
c010d7b0:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d7b3:	eb 1d                	jmp    c010d7d2 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d7b5:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d7b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d7c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7c6:	01 d0                	add    %edx,%eax
c010d7c8:	8b 00                	mov    (%eax),%eax
c010d7ca:	89 04 24             	mov    %eax,(%esp)
c010d7cd:	e8 4b 84 ff ff       	call   c0105c1d <kfree>
    while (argc > 0) {
c010d7d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d7d6:	7f dd                	jg     c010d7b5 <put_kargv+0x8>
    }
}
c010d7d8:	c9                   	leave  
c010d7d9:	c3                   	ret    

c010d7da <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d7da:	55                   	push   %ebp
c010d7db:	89 e5                	mov    %esp,%ebp
c010d7dd:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d7e0:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d7e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d7f1:	8b 45 14             	mov    0x14(%ebp),%eax
c010d7f4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d7fb:	00 
c010d7fc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d800:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d804:	8b 45 08             	mov    0x8(%ebp),%eax
c010d807:	89 04 24             	mov    %eax,(%esp)
c010d80a:	e8 53 6f ff ff       	call   c0104762 <user_mem_check>
c010d80f:	85 c0                	test   %eax,%eax
c010d811:	75 08                	jne    c010d81b <copy_kargv+0x41>
        return ret;
c010d813:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d816:	e9 a4 00 00 00       	jmp    c010d8bf <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d81b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d822:	eb 77                	jmp    c010d89b <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d824:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d82b:	e8 d2 83 ff ff       	call   c0105c02 <kmalloc>
c010d830:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d833:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d837:	75 0a                	jne    c010d843 <copy_kargv+0x69>
            goto failed_nomem;
c010d839:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d83a:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d841:	eb 67                	jmp    c010d8aa <copy_kargv+0xd0>
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d846:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d84d:	8b 45 14             	mov    0x14(%ebp),%eax
c010d850:	01 d0                	add    %edx,%eax
c010d852:	8b 00                	mov    (%eax),%eax
c010d854:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d85b:	00 
c010d85c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d860:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d863:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d867:	8b 45 08             	mov    0x8(%ebp),%eax
c010d86a:	89 04 24             	mov    %eax,(%esp)
c010d86d:	e8 13 70 ff ff       	call   c0104885 <copy_string>
c010d872:	85 c0                	test   %eax,%eax
c010d874:	75 0d                	jne    c010d883 <copy_kargv+0xa9>
            kfree(buffer);
c010d876:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d879:	89 04 24             	mov    %eax,(%esp)
c010d87c:	e8 9c 83 ff ff       	call   c0105c1d <kfree>
            goto failed_cleanup;
c010d881:	eb 27                	jmp    c010d8aa <copy_kargv+0xd0>
        kargv[i] = buffer;
c010d883:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d886:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d88d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d890:	01 c2                	add    %eax,%edx
c010d892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d895:	89 02                	mov    %eax,(%edx)
    for (i = 0; i < argc; i ++) {
c010d897:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d89b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d89e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d8a1:	7c 81                	jl     c010d824 <copy_kargv+0x4a>
    return 0;
c010d8a3:	b8 00 00 00 00       	mov    $0x0,%eax
c010d8a8:	eb 15                	jmp    c010d8bf <copy_kargv+0xe5>
failed_cleanup:
    put_kargv(i, kargv);
c010d8aa:	8b 45 10             	mov    0x10(%ebp),%eax
c010d8ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8b4:	89 04 24             	mov    %eax,(%esp)
c010d8b7:	e8 f1 fe ff ff       	call   c010d7ad <put_kargv>
    return ret;
c010d8bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d8bf:	c9                   	leave  
c010d8c0:	c3                   	ret    

c010d8c1 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d8c1:	55                   	push   %ebp
c010d8c2:	89 e5                	mov    %esp,%ebp
c010d8c4:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d8ca:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d8cf:	8b 40 18             	mov    0x18(%eax),%eax
c010d8d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d8d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d8d9:	7e 06                	jle    c010d8e1 <do_execve+0x20>
c010d8db:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d8df:	7e 0a                	jle    c010d8eb <do_execve+0x2a>
        return -E_INVAL;
c010d8e1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d8e6:	e9 11 02 00 00       	jmp    c010dafc <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d8eb:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d8f2:	00 
c010d8f3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d8fa:	00 
c010d8fb:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d8fe:	89 04 24             	mov    %eax,(%esp)
c010d901:	e8 7f 75 00 00       	call   c0114e85 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d906:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d90d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d910:	89 04 24             	mov    %eax,(%esp)
c010d913:	e8 7d e7 ff ff       	call   c010c095 <lock_mm>
    if (name == NULL) {
c010d918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d91c:	75 29                	jne    c010d947 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d91e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d923:	8b 40 04             	mov    0x4(%eax),%eax
c010d926:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d92a:	c7 44 24 08 6b 84 11 	movl   $0xc011846b,0x8(%esp)
c010d931:	c0 
c010d932:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d939:	00 
c010d93a:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d93d:	89 04 24             	mov    %eax,(%esp)
c010d940:	e8 30 7d 00 00       	call   c0115675 <snprintf>
c010d945:	eb 38                	jmp    c010d97f <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d947:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d94e:	00 
c010d94f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d952:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d956:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d959:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d960:	89 04 24             	mov    %eax,(%esp)
c010d963:	e8 1d 6f ff ff       	call   c0104885 <copy_string>
c010d968:	85 c0                	test   %eax,%eax
c010d96a:	75 13                	jne    c010d97f <do_execve+0xbe>
            unlock_mm(mm);
c010d96c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d96f:	89 04 24             	mov    %eax,(%esp)
c010d972:	e8 51 e7 ff ff       	call   c010c0c8 <unlock_mm>
            return ret;
c010d977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d97a:	e9 7d 01 00 00       	jmp    c010dafc <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d97f:	8b 45 10             	mov    0x10(%ebp),%eax
c010d982:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d986:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d98c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d990:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d993:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d997:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d99a:	89 04 24             	mov    %eax,(%esp)
c010d99d:	e8 38 fe ff ff       	call   c010d7da <copy_kargv>
c010d9a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9a9:	74 13                	je     c010d9be <do_execve+0xfd>
        unlock_mm(mm);
c010d9ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9ae:	89 04 24             	mov    %eax,(%esp)
c010d9b1:	e8 12 e7 ff ff       	call   c010c0c8 <unlock_mm>
        return ret;
c010d9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9b9:	e9 3e 01 00 00       	jmp    c010dafc <do_execve+0x23b>
    }
    path = argv[0];
c010d9be:	8b 45 10             	mov    0x10(%ebp),%eax
c010d9c1:	8b 00                	mov    (%eax),%eax
c010d9c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d9c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9c9:	89 04 24             	mov    %eax,(%esp)
c010d9cc:	e8 f7 e6 ff ff       	call   c010c0c8 <unlock_mm>
    files_closeall(current->filesp);
c010d9d1:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010d9d6:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d9dc:	89 04 24             	mov    %eax,(%esp)
c010d9df:	e8 37 e3 ff ff       	call   c010bd1b <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d9e4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d9eb:	00 
c010d9ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d9ef:	89 04 24             	mov    %eax,(%esp)
c010d9f2:	e8 88 ca ff ff       	call   c010a47f <sysfile_open>
c010d9f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d9fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da04:	79 05                	jns    c010da0b <do_execve+0x14a>
        goto execve_exit;
c010da06:	e9 ae 00 00 00       	jmp    c010dab9 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010da0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010da0f:	74 4a                	je     c010da5b <do_execve+0x19a>
        lcr3(boot_cr3);
c010da11:	a1 fc 61 15 c0       	mov    0xc01561fc,%eax
c010da16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010da19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da1c:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010da1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da22:	89 04 24             	mov    %eax,(%esp)
c010da25:	e8 51 e6 ff ff       	call   c010c07b <mm_count_dec>
c010da2a:	85 c0                	test   %eax,%eax
c010da2c:	75 21                	jne    c010da4f <do_execve+0x18e>
            exit_mmap(mm);
c010da2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da31:	89 04 24             	mov    %eax,(%esp)
c010da34:	e8 46 62 ff ff       	call   c0103c7f <exit_mmap>
            put_pgdir(mm);
c010da39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da3c:	89 04 24             	mov    %eax,(%esp)
c010da3f:	e8 7a ee ff ff       	call   c010c8be <put_pgdir>
            mm_destroy(mm);
c010da44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da47:	89 04 24             	mov    %eax,(%esp)
c010da4a:	e8 71 5f ff ff       	call   c01039c0 <mm_destroy>
        }
        current->mm = NULL;
c010da4f:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010da54:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010da5b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010da62:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010da68:	89 44 24 08          	mov    %eax,0x8(%esp)
c010da6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da76:	89 04 24             	mov    %eax,(%esp)
c010da79:	e8 fc f4 ff ff       	call   c010cf7a <load_icode>
c010da7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da85:	74 02                	je     c010da89 <do_execve+0x1c8>
        goto execve_exit;
c010da87:	eb 30                	jmp    c010dab9 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010da89:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010da8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da96:	89 04 24             	mov    %eax,(%esp)
c010da99:	e8 0f fd ff ff       	call   c010d7ad <put_kargv>
    set_proc_name(current, local_name);
c010da9e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010daa3:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010daa6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010daaa:	89 04 24             	mov    %eax,(%esp)
c010daad:	e8 04 e8 ff ff       	call   c010c2b6 <set_proc_name>
    return 0;
c010dab2:	b8 00 00 00 00       	mov    $0x0,%eax
c010dab7:	eb 43                	jmp    c010dafc <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010dab9:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010dabf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dac3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dac6:	89 04 24             	mov    %eax,(%esp)
c010dac9:	e8 df fc ff ff       	call   c010d7ad <put_kargv>
    do_exit(ret);
c010dace:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dad1:	89 04 24             	mov    %eax,(%esp)
c010dad4:	e8 32 f2 ff ff       	call   c010cd0b <do_exit>
    panic("already exit: %e.\n", ret);
c010dad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dadc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dae0:	c7 44 24 08 75 84 11 	movl   $0xc0118475,0x8(%esp)
c010dae7:	c0 
c010dae8:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010daef:	00 
c010daf0:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010daf7:	e8 f7 29 ff ff       	call   c01004f3 <__panic>
}
c010dafc:	c9                   	leave  
c010dafd:	c3                   	ret    

c010dafe <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010dafe:	55                   	push   %ebp
c010daff:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010db01:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010db06:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010db0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010db12:	5d                   	pop    %ebp
c010db13:	c3                   	ret    

c010db14 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010db14:	55                   	push   %ebp
c010db15:	89 e5                	mov    %esp,%ebp
c010db17:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010db1a:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010db1f:	8b 40 18             	mov    0x18(%eax),%eax
c010db22:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010db25:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010db29:	74 30                	je     c010db5b <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010db2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db2e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010db35:	00 
c010db36:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010db3d:	00 
c010db3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db45:	89 04 24             	mov    %eax,(%esp)
c010db48:	e8 15 6c ff ff       	call   c0104762 <user_mem_check>
c010db4d:	85 c0                	test   %eax,%eax
c010db4f:	75 0a                	jne    c010db5b <do_wait+0x47>
            return -E_INVAL;
c010db51:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010db56:	e9 57 01 00 00       	jmp    c010dcb2 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010db5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010db62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010db66:	74 39                	je     c010dba1 <do_wait+0x8d>
        proc = find_proc(pid);
c010db68:	8b 45 08             	mov    0x8(%ebp),%eax
c010db6b:	89 04 24             	mov    %eax,(%esp)
c010db6e:	e8 5c eb ff ff       	call   c010c6cf <find_proc>
c010db73:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010db76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db7a:	74 5a                	je     c010dbd6 <do_wait+0xc2>
c010db7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db7f:	8b 50 14             	mov    0x14(%eax),%edx
c010db82:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010db87:	39 c2                	cmp    %eax,%edx
c010db89:	75 4b                	jne    c010dbd6 <do_wait+0xc2>
            haskid = 1;
c010db8b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010db92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db95:	8b 00                	mov    (%eax),%eax
c010db97:	83 f8 03             	cmp    $0x3,%eax
c010db9a:	75 3a                	jne    c010dbd6 <do_wait+0xc2>
                goto found;
c010db9c:	e9 89 00 00 00       	jmp    c010dc2a <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010dba1:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010dba6:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dbac:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010dbaf:	eb 1f                	jmp    c010dbd0 <do_wait+0xbc>
            haskid = 1;
c010dbb1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010dbb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbbb:	8b 00                	mov    (%eax),%eax
c010dbbd:	83 f8 03             	cmp    $0x3,%eax
c010dbc0:	75 02                	jne    c010dbc4 <do_wait+0xb0>
                goto found;
c010dbc2:	eb 66                	jmp    c010dc2a <do_wait+0x116>
        for (; proc != NULL; proc = proc->optr) {
c010dbc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbc7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dbcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbd0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dbd4:	75 db                	jne    c010dbb1 <do_wait+0x9d>
            }
        }
    }
    if (haskid) {
c010dbd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dbda:	74 44                	je     c010dc20 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010dbdc:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010dbe1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010dbe7:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010dbec:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010dbf3:	00 00 80 
        schedule();
c010dbf6:	e8 51 08 00 00       	call   c010e44c <schedule>
        if (current->flags & PF_EXITING) {
c010dbfb:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010dc00:	8b 40 44             	mov    0x44(%eax),%eax
c010dc03:	83 e0 01             	and    $0x1,%eax
c010dc06:	85 c0                	test   %eax,%eax
c010dc08:	74 11                	je     c010dc1b <do_wait+0x107>
            do_exit(-E_KILLED);
c010dc0a:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010dc11:	e8 f5 f0 ff ff       	call   c010cd0b <do_exit>
        }
        goto repeat;
c010dc16:	e9 40 ff ff ff       	jmp    c010db5b <do_wait+0x47>
c010dc1b:	e9 3b ff ff ff       	jmp    c010db5b <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010dc20:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010dc25:	e9 88 00 00 00       	jmp    c010dcb2 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010dc2a:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010dc2f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010dc32:	74 0a                	je     c010dc3e <do_wait+0x12a>
c010dc34:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010dc39:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010dc3c:	75 1c                	jne    c010dc5a <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010dc3e:	c7 44 24 08 88 84 11 	movl   $0xc0118488,0x8(%esp)
c010dc45:	c0 
c010dc46:	c7 44 24 04 9a 03 00 	movl   $0x39a,0x4(%esp)
c010dc4d:	00 
c010dc4e:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010dc55:	e8 99 28 ff ff       	call   c01004f3 <__panic>
    }
    if (code_store != NULL) {
c010dc5a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dc5e:	74 0e                	je     c010dc6e <do_wait+0x15a>
        *code_store = proc->exit_code;
c010dc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc63:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010dc69:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc6c:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010dc6e:	e8 94 e2 ff ff       	call   c010bf07 <__intr_save>
c010dc73:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010dc76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc79:	89 04 24             	mov    %eax,(%esp)
c010dc7c:	e8 19 ea ff ff       	call   c010c69a <unhash_proc>
        remove_links(proc);
c010dc81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc84:	89 04 24             	mov    %eax,(%esp)
c010dc87:	e8 69 e7 ff ff       	call   c010c3f5 <remove_links>
    }
    local_intr_restore(intr_flag);
c010dc8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dc8f:	89 04 24             	mov    %eax,(%esp)
c010dc92:	e8 9a e2 ff ff       	call   c010bf31 <__intr_restore>
    put_kstack(proc);
c010dc97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc9a:	89 04 24             	mov    %eax,(%esp)
c010dc9d:	e8 4f eb ff ff       	call   c010c7f1 <put_kstack>
    kfree(proc);
c010dca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dca5:	89 04 24             	mov    %eax,(%esp)
c010dca8:	e8 70 7f ff ff       	call   c0105c1d <kfree>
    return 0;
c010dcad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dcb2:	c9                   	leave  
c010dcb3:	c3                   	ret    

c010dcb4 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010dcb4:	55                   	push   %ebp
c010dcb5:	89 e5                	mov    %esp,%ebp
c010dcb7:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010dcba:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcbd:	89 04 24             	mov    %eax,(%esp)
c010dcc0:	e8 0a ea ff ff       	call   c010c6cf <find_proc>
c010dcc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dcc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dccc:	74 44                	je     c010dd12 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010dcce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcd1:	8b 40 44             	mov    0x44(%eax),%eax
c010dcd4:	83 e0 01             	and    $0x1,%eax
c010dcd7:	85 c0                	test   %eax,%eax
c010dcd9:	75 30                	jne    c010dd0b <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010dcdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcde:	8b 40 44             	mov    0x44(%eax),%eax
c010dce1:	83 c8 01             	or     $0x1,%eax
c010dce4:	89 c2                	mov    %eax,%edx
c010dce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dce9:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010dcec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcef:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dcf5:	85 c0                	test   %eax,%eax
c010dcf7:	79 0b                	jns    c010dd04 <do_kill+0x50>
                wakeup_proc(proc);
c010dcf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcfc:	89 04 24             	mov    %eax,(%esp)
c010dcff:	e8 ac 06 00 00       	call   c010e3b0 <wakeup_proc>
            }
            return 0;
c010dd04:	b8 00 00 00 00       	mov    $0x0,%eax
c010dd09:	eb 0c                	jmp    c010dd17 <do_kill+0x63>
        }
        return -E_KILLED;
c010dd0b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010dd10:	eb 05                	jmp    c010dd17 <do_kill+0x63>
    }
    return -E_INVAL;
c010dd12:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010dd17:	c9                   	leave  
c010dd18:	c3                   	ret    

c010dd19 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010dd19:	55                   	push   %ebp
c010dd1a:	89 e5                	mov    %esp,%ebp
c010dd1c:	53                   	push   %ebx
c010dd1d:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010dd20:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dd27:	eb 04                	jmp    c010dd2d <kernel_execve+0x14>
        argc ++;
c010dd29:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dd2d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dd30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dd37:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd3a:	01 d0                	add    %edx,%eax
c010dd3c:	8b 00                	mov    (%eax),%eax
c010dd3e:	85 c0                	test   %eax,%eax
c010dd40:	75 e7                	jne    c010dd29 <kernel_execve+0x10>
    }
    asm volatile (
c010dd42:	b8 04 00 00 00       	mov    $0x4,%eax
c010dd47:	8b 55 08             	mov    0x8(%ebp),%edx
c010dd4a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010dd4d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dd50:	cd 80                	int    $0x80
c010dd52:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010dd55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dd58:	83 c4 10             	add    $0x10,%esp
c010dd5b:	5b                   	pop    %ebx
c010dd5c:	5d                   	pop    %ebp
c010dd5d:	c3                   	ret    

c010dd5e <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010dd5e:	55                   	push   %ebp
c010dd5f:	89 e5                	mov    %esp,%ebp
c010dd61:	83 ec 28             	sub    $0x28,%esp
#ifdef TEST
#ifdef TESTSCRIPT
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
c010dd64:	c7 45 f0 a4 84 11 c0 	movl   $0xc01184a4,-0x10(%ebp)
c010dd6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dd72:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010dd77:	8b 40 04             	mov    0x4(%eax),%eax
c010dd7a:	c7 44 24 08 a4 84 11 	movl   $0xc01184a4,0x8(%esp)
c010dd81:	c0 
c010dd82:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd86:	c7 04 24 ac 84 11 c0 	movl   $0xc01184ac,(%esp)
c010dd8d:	e8 0a 26 ff ff       	call   c010039c <cprintf>
c010dd92:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dd95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd99:	c7 04 24 a4 84 11 c0 	movl   $0xc01184a4,(%esp)
c010dda0:	e8 74 ff ff ff       	call   c010dd19 <kernel_execve>
#endif
#else
    KERNEL_EXECVE(sh);
#endif
    panic("user_main execve failed.\n");
c010dda5:	c7 44 24 08 d3 84 11 	movl   $0xc01184d3,0x8(%esp)
c010ddac:	c0 
c010ddad:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
c010ddb4:	00 
c010ddb5:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010ddbc:	e8 32 27 ff ff       	call   c01004f3 <__panic>

c010ddc1 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010ddc1:	55                   	push   %ebp
c010ddc2:	89 e5                	mov    %esp,%ebp
c010ddc4:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010ddc7:	c7 04 24 ed 84 11 c0 	movl   $0xc01184ed,(%esp)
c010ddce:	e8 9c 29 00 00       	call   c011076f <vfs_set_bootfs>
c010ddd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ddd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ddda:	74 23                	je     c010ddff <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dde3:	c7 44 24 08 f4 84 11 	movl   $0xc01184f4,0x8(%esp)
c010ddea:	c0 
c010ddeb:	c7 44 24 04 ed 03 00 	movl   $0x3ed,0x4(%esp)
c010ddf2:	00 
c010ddf3:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010ddfa:	e8 f4 26 ff ff       	call   c01004f3 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010ddff:	e8 77 9a ff ff       	call   c010787b <nr_free_pages>
c010de04:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010de07:	e8 d9 7c ff ff       	call   c0105ae5 <kallocated>
c010de0c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010de0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010de16:	00 
c010de17:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010de1e:	00 
c010de1f:	c7 04 24 5e dd 10 c0 	movl   $0xc010dd5e,(%esp)
c010de26:	e8 18 e9 ff ff       	call   c010c743 <kernel_thread>
c010de2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010de2e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de32:	7f 1c                	jg     c010de50 <init_main+0x8f>
        panic("create user_main failed.\n");
c010de34:	c7 44 24 08 0d 85 11 	movl   $0xc011850d,0x8(%esp)
c010de3b:	c0 
c010de3c:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
c010de43:	00 
c010de44:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010de4b:	e8 a3 26 ff ff       	call   c01004f3 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010de50:	e8 57 ba ff ff       	call   c01098ac <check_sync>

    while (do_wait(0, NULL) == 0) {
c010de55:	eb 05                	jmp    c010de5c <init_main+0x9b>
        schedule();
c010de57:	e8 f0 05 00 00       	call   c010e44c <schedule>
    while (do_wait(0, NULL) == 0) {
c010de5c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010de63:	00 
c010de64:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010de6b:	e8 a4 fc ff ff       	call   c010db14 <do_wait>
c010de70:	85 c0                	test   %eax,%eax
c010de72:	74 e3                	je     c010de57 <init_main+0x96>
    }

    fs_cleanup();
c010de74:	e8 3e dd ff ff       	call   c010bbb7 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010de79:	c7 04 24 28 85 11 c0 	movl   $0xc0118528,(%esp)
c010de80:	e8 17 25 ff ff       	call   c010039c <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010de85:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010de8a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010de90:	85 c0                	test   %eax,%eax
c010de92:	75 1e                	jne    c010deb2 <init_main+0xf1>
c010de94:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010de99:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010de9f:	85 c0                	test   %eax,%eax
c010dea1:	75 0f                	jne    c010deb2 <init_main+0xf1>
c010dea3:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010dea8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010deae:	85 c0                	test   %eax,%eax
c010deb0:	74 24                	je     c010ded6 <init_main+0x115>
c010deb2:	c7 44 24 0c 4c 85 11 	movl   $0xc011854c,0xc(%esp)
c010deb9:	c0 
c010deba:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010dec1:	c0 
c010dec2:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
c010dec9:	00 
c010deca:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010ded1:	e8 1d 26 ff ff       	call   c01004f3 <__panic>
    assert(nr_process == 2);
c010ded6:	a1 40 50 15 c0       	mov    0xc0155040,%eax
c010dedb:	83 f8 02             	cmp    $0x2,%eax
c010dede:	74 24                	je     c010df04 <init_main+0x143>
c010dee0:	c7 44 24 0c 97 85 11 	movl   $0xc0118597,0xc(%esp)
c010dee7:	c0 
c010dee8:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010deef:	c0 
c010def0:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010def7:	00 
c010def8:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010deff:	e8 ef 25 ff ff       	call   c01004f3 <__panic>
c010df04:	c7 45 e4 fc 62 15 c0 	movl   $0xc01562fc,-0x1c(%ebp)
c010df0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010df0e:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010df11:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010df17:	83 c2 7c             	add    $0x7c,%edx
c010df1a:	39 d0                	cmp    %edx,%eax
c010df1c:	74 24                	je     c010df42 <init_main+0x181>
c010df1e:	c7 44 24 0c a8 85 11 	movl   $0xc01185a8,0xc(%esp)
c010df25:	c0 
c010df26:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010df2d:	c0 
c010df2e:	c7 44 24 04 03 04 00 	movl   $0x403,0x4(%esp)
c010df35:	00 
c010df36:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010df3d:	e8 b1 25 ff ff       	call   c01004f3 <__panic>
c010df42:	c7 45 e0 fc 62 15 c0 	movl   $0xc01562fc,-0x20(%ebp)
    return listelm->prev;
c010df49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010df4c:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010df4e:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010df54:	83 c2 7c             	add    $0x7c,%edx
c010df57:	39 d0                	cmp    %edx,%eax
c010df59:	74 24                	je     c010df7f <init_main+0x1be>
c010df5b:	c7 44 24 0c d8 85 11 	movl   $0xc01185d8,0xc(%esp)
c010df62:	c0 
c010df63:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010df6a:	c0 
c010df6b:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
c010df72:	00 
c010df73:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010df7a:	e8 74 25 ff ff       	call   c01004f3 <__panic>
    //assert(nr_free_pages_store == nr_free_pages());
    //assert(kernel_allocated_store == kallocated());
    cprintf("init check memory pass.\n");
c010df7f:	c7 04 24 08 86 11 c0 	movl   $0xc0118608,(%esp)
c010df86:	e8 11 24 ff ff       	call   c010039c <cprintf>
    return 0;
c010df8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df90:	c9                   	leave  
c010df91:	c3                   	ret    

c010df92 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010df92:	55                   	push   %ebp
c010df93:	89 e5                	mov    %esp,%ebp
c010df95:	53                   	push   %ebx
c010df96:	83 ec 24             	sub    $0x24,%esp
c010df99:	c7 45 ec fc 62 15 c0 	movl   $0xc01562fc,-0x14(%ebp)
    elm->prev = elm->next = elm;
c010dfa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dfa3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dfa6:	89 50 04             	mov    %edx,0x4(%eax)
c010dfa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dfac:	8b 50 04             	mov    0x4(%eax),%edx
c010dfaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dfb2:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dfb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dfbb:	eb 26                	jmp    c010dfe3 <proc_init+0x51>
        list_init(hash_list + i);
c010dfbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfc0:	c1 e0 03             	shl    $0x3,%eax
c010dfc3:	05 40 30 15 c0       	add    $0xc0153040,%eax
c010dfc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dfcb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dfd1:	89 50 04             	mov    %edx,0x4(%eax)
c010dfd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfd7:	8b 50 04             	mov    0x4(%eax),%edx
c010dfda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfdd:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dfdf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dfe3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dfea:	7e d1                	jle    c010dfbd <proc_init+0x2b>
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010dfec:	e8 31 e1 ff ff       	call   c010c122 <alloc_proc>
c010dff1:	a3 20 30 15 c0       	mov    %eax,0xc0153020
c010dff6:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010dffb:	85 c0                	test   %eax,%eax
c010dffd:	75 1c                	jne    c010e01b <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010dfff:	c7 44 24 08 21 86 11 	movl   $0xc0118621,0x8(%esp)
c010e006:	c0 
c010e007:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
c010e00e:	00 
c010e00f:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010e016:	e8 d8 24 ff ff       	call   c01004f3 <__panic>
    }

    idleproc->pid = 0;
c010e01b:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e020:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010e027:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e02c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010e032:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e037:	ba 00 d0 14 c0       	mov    $0xc014d000,%edx
c010e03c:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010e03f:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e044:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010e04b:	8b 1d 20 30 15 c0    	mov    0xc0153020,%ebx
c010e051:	e8 9a db ff ff       	call   c010bbf0 <files_create>
c010e056:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010e05c:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010e062:	85 c0                	test   %eax,%eax
c010e064:	75 1c                	jne    c010e082 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010e066:	c7 44 24 08 3c 86 11 	movl   $0xc011863c,0x8(%esp)
c010e06d:	c0 
c010e06e:	c7 44 24 04 20 04 00 	movl   $0x420,0x4(%esp)
c010e075:	00 
c010e076:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010e07d:	e8 71 24 ff ff       	call   c01004f3 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010e082:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e087:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010e08d:	89 04 24             	mov    %eax,(%esp)
c010e090:	e8 59 e0 ff ff       	call   c010c0ee <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010e095:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e09a:	c7 44 24 04 5e 86 11 	movl   $0xc011865e,0x4(%esp)
c010e0a1:	c0 
c010e0a2:	89 04 24             	mov    %eax,(%esp)
c010e0a5:	e8 0c e2 ff ff       	call   c010c2b6 <set_proc_name>
    nr_process ++;
c010e0aa:	a1 40 50 15 c0       	mov    0xc0155040,%eax
c010e0af:	83 c0 01             	add    $0x1,%eax
c010e0b2:	a3 40 50 15 c0       	mov    %eax,0xc0155040

    current = idleproc;
c010e0b7:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e0bc:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    int pid = kernel_thread(init_main, NULL, 0);
c010e0c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e0c8:	00 
c010e0c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e0d0:	00 
c010e0d1:	c7 04 24 c1 dd 10 c0 	movl   $0xc010ddc1,(%esp)
c010e0d8:	e8 66 e6 ff ff       	call   c010c743 <kernel_thread>
c010e0dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010e0e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e0e4:	7f 1c                	jg     c010e102 <proc_init+0x170>
        panic("create init_main failed.\n");
c010e0e6:	c7 44 24 08 63 86 11 	movl   $0xc0118663,0x8(%esp)
c010e0ed:	c0 
c010e0ee:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010e0f5:	00 
c010e0f6:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010e0fd:	e8 f1 23 ff ff       	call   c01004f3 <__panic>
    }

    initproc = find_proc(pid);
c010e102:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e105:	89 04 24             	mov    %eax,(%esp)
c010e108:	e8 c2 e5 ff ff       	call   c010c6cf <find_proc>
c010e10d:	a3 24 30 15 c0       	mov    %eax,0xc0153024
    set_proc_name(initproc, "init");
c010e112:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010e117:	c7 44 24 04 7d 86 11 	movl   $0xc011867d,0x4(%esp)
c010e11e:	c0 
c010e11f:	89 04 24             	mov    %eax,(%esp)
c010e122:	e8 8f e1 ff ff       	call   c010c2b6 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010e127:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e12c:	85 c0                	test   %eax,%eax
c010e12e:	74 0c                	je     c010e13c <proc_init+0x1aa>
c010e130:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e135:	8b 40 04             	mov    0x4(%eax),%eax
c010e138:	85 c0                	test   %eax,%eax
c010e13a:	74 24                	je     c010e160 <proc_init+0x1ce>
c010e13c:	c7 44 24 0c 84 86 11 	movl   $0xc0118684,0xc(%esp)
c010e143:	c0 
c010e144:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010e14b:	c0 
c010e14c:	c7 44 24 04 31 04 00 	movl   $0x431,0x4(%esp)
c010e153:	00 
c010e154:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010e15b:	e8 93 23 ff ff       	call   c01004f3 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010e160:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010e165:	85 c0                	test   %eax,%eax
c010e167:	74 0d                	je     c010e176 <proc_init+0x1e4>
c010e169:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010e16e:	8b 40 04             	mov    0x4(%eax),%eax
c010e171:	83 f8 01             	cmp    $0x1,%eax
c010e174:	74 24                	je     c010e19a <proc_init+0x208>
c010e176:	c7 44 24 0c ac 86 11 	movl   $0xc01186ac,0xc(%esp)
c010e17d:	c0 
c010e17e:	c7 44 24 08 5f 82 11 	movl   $0xc011825f,0x8(%esp)
c010e185:	c0 
c010e186:	c7 44 24 04 32 04 00 	movl   $0x432,0x4(%esp)
c010e18d:	00 
c010e18e:	c7 04 24 38 82 11 c0 	movl   $0xc0118238,(%esp)
c010e195:	e8 59 23 ff ff       	call   c01004f3 <__panic>
}
c010e19a:	83 c4 24             	add    $0x24,%esp
c010e19d:	5b                   	pop    %ebx
c010e19e:	5d                   	pop    %ebp
c010e19f:	c3                   	ret    

c010e1a0 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010e1a0:	55                   	push   %ebp
c010e1a1:	89 e5                	mov    %esp,%ebp
c010e1a3:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010e1a6:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e1ab:	8b 40 10             	mov    0x10(%eax),%eax
c010e1ae:	85 c0                	test   %eax,%eax
c010e1b0:	74 07                	je     c010e1b9 <cpu_idle+0x19>
            schedule();
c010e1b2:	e8 95 02 00 00       	call   c010e44c <schedule>
        }
    }
c010e1b7:	eb ed                	jmp    c010e1a6 <cpu_idle+0x6>
c010e1b9:	eb eb                	jmp    c010e1a6 <cpu_idle+0x6>

c010e1bb <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010e1bb:	55                   	push   %ebp
c010e1bc:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010e1be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e1c2:	75 11                	jne    c010e1d5 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010e1c4:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e1c9:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010e1d0:	00 00 00 
c010e1d3:	eb 0e                	jmp    c010e1e3 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010e1d5:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e1da:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1dd:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010e1e3:	5d                   	pop    %ebp
c010e1e4:	c3                   	ret    

c010e1e5 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010e1e5:	55                   	push   %ebp
c010e1e6:	89 e5                	mov    %esp,%ebp
c010e1e8:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e1eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e1ef:	75 07                	jne    c010e1f8 <do_sleep+0x13>
        return 0;
c010e1f1:	b8 00 00 00 00       	mov    $0x0,%eax
c010e1f6:	eb 6b                	jmp    c010e263 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e1f8:	e8 0a dd ff ff       	call   c010bf07 <__intr_save>
c010e1fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e200:	8b 55 08             	mov    0x8(%ebp),%edx
c010e203:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e208:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e20c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e210:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e213:	89 04 24             	mov    %eax,(%esp)
c010e216:	e8 b3 dc ff ff       	call   c010bece <timer_init>
c010e21b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e21e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e223:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e229:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e22e:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e235:	00 00 80 
    add_timer(timer);
c010e238:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e23b:	89 04 24             	mov    %eax,(%esp)
c010e23e:	e8 94 02 00 00       	call   c010e4d7 <add_timer>
    local_intr_restore(intr_flag);
c010e243:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e246:	89 04 24             	mov    %eax,(%esp)
c010e249:	e8 e3 dc ff ff       	call   c010bf31 <__intr_restore>

    schedule();
c010e24e:	e8 f9 01 00 00       	call   c010e44c <schedule>

    del_timer(timer);
c010e253:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e256:	89 04 24             	mov    %eax,(%esp)
c010e259:	e8 b7 03 00 00       	call   c010e615 <del_timer>
    return 0;
c010e25e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e263:	c9                   	leave  
c010e264:	c3                   	ret    

c010e265 <__intr_save>:
__intr_save(void) {
c010e265:	55                   	push   %ebp
c010e266:	89 e5                	mov    %esp,%ebp
c010e268:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e26b:	9c                   	pushf  
c010e26c:	58                   	pop    %eax
c010e26d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e270:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e273:	25 00 02 00 00       	and    $0x200,%eax
c010e278:	85 c0                	test   %eax,%eax
c010e27a:	74 0c                	je     c010e288 <__intr_save+0x23>
        intr_disable();
c010e27c:	e8 87 40 ff ff       	call   c0102308 <intr_disable>
        return 1;
c010e281:	b8 01 00 00 00       	mov    $0x1,%eax
c010e286:	eb 05                	jmp    c010e28d <__intr_save+0x28>
    return 0;
c010e288:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e28d:	c9                   	leave  
c010e28e:	c3                   	ret    

c010e28f <__intr_restore>:
__intr_restore(bool flag) {
c010e28f:	55                   	push   %ebp
c010e290:	89 e5                	mov    %esp,%ebp
c010e292:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e295:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e299:	74 05                	je     c010e2a0 <__intr_restore+0x11>
        intr_enable();
c010e29b:	e8 62 40 ff ff       	call   c0102302 <intr_enable>
}
c010e2a0:	c9                   	leave  
c010e2a1:	c3                   	ret    

c010e2a2 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e2a2:	55                   	push   %ebp
c010e2a3:	89 e5                	mov    %esp,%ebp
c010e2a5:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e2a8:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e2ad:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e2b0:	74 1a                	je     c010e2cc <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e2b2:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e2b7:	8b 40 08             	mov    0x8(%eax),%eax
c010e2ba:	8b 15 a0 50 15 c0    	mov    0xc01550a0,%edx
c010e2c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e2c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e2c7:	89 14 24             	mov    %edx,(%esp)
c010e2ca:	ff d0                	call   *%eax
    }
}
c010e2cc:	c9                   	leave  
c010e2cd:	c3                   	ret    

c010e2ce <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e2ce:	55                   	push   %ebp
c010e2cf:	89 e5                	mov    %esp,%ebp
c010e2d1:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e2d4:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e2d9:	8b 40 0c             	mov    0xc(%eax),%eax
c010e2dc:	8b 15 a0 50 15 c0    	mov    0xc01550a0,%edx
c010e2e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e2e5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e2e9:	89 14 24             	mov    %edx,(%esp)
c010e2ec:	ff d0                	call   *%eax
}
c010e2ee:	c9                   	leave  
c010e2ef:	c3                   	ret    

c010e2f0 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e2f0:	55                   	push   %ebp
c010e2f1:	89 e5                	mov    %esp,%ebp
c010e2f3:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e2f6:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e2fb:	8b 40 10             	mov    0x10(%eax),%eax
c010e2fe:	8b 15 a0 50 15 c0    	mov    0xc01550a0,%edx
c010e304:	89 14 24             	mov    %edx,(%esp)
c010e307:	ff d0                	call   *%eax
}
c010e309:	c9                   	leave  
c010e30a:	c3                   	ret    

c010e30b <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e30b:	55                   	push   %ebp
c010e30c:	89 e5                	mov    %esp,%ebp
c010e30e:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e311:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e316:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e319:	74 1c                	je     c010e337 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e31b:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e320:	8b 40 14             	mov    0x14(%eax),%eax
c010e323:	8b 15 a0 50 15 c0    	mov    0xc01550a0,%edx
c010e329:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e32c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e330:	89 14 24             	mov    %edx,(%esp)
c010e333:	ff d0                	call   *%eax
c010e335:	eb 0a                	jmp    c010e341 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e337:	8b 45 08             	mov    0x8(%ebp),%eax
c010e33a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e341:	c9                   	leave  
c010e342:	c3                   	ret    

c010e343 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e343:	55                   	push   %ebp
c010e344:	89 e5                	mov    %esp,%ebp
c010e346:	83 ec 28             	sub    $0x28,%esp
c010e349:	c7 45 f4 94 50 15 c0 	movl   $0xc0155094,-0xc(%ebp)
c010e350:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e353:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e356:	89 50 04             	mov    %edx,0x4(%eax)
c010e359:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e35c:	8b 50 04             	mov    0x4(%eax),%edx
c010e35f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e362:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e364:	c7 05 9c 50 15 c0 84 	movl   $0xc014fa84,0xc015509c
c010e36b:	fa 14 c0 

    rq = &__rq;
c010e36e:	c7 05 a0 50 15 c0 a4 	movl   $0xc01550a4,0xc01550a0
c010e375:	50 15 c0 
    rq->max_time_slice = 5;
c010e378:	a1 a0 50 15 c0       	mov    0xc01550a0,%eax
c010e37d:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e384:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e389:	8b 40 04             	mov    0x4(%eax),%eax
c010e38c:	8b 15 a0 50 15 c0    	mov    0xc01550a0,%edx
c010e392:	89 14 24             	mov    %edx,(%esp)
c010e395:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e397:	a1 9c 50 15 c0       	mov    0xc015509c,%eax
c010e39c:	8b 00                	mov    (%eax),%eax
c010e39e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e3a2:	c7 04 24 d4 86 11 c0 	movl   $0xc01186d4,(%esp)
c010e3a9:	e8 ee 1f ff ff       	call   c010039c <cprintf>
}
c010e3ae:	c9                   	leave  
c010e3af:	c3                   	ret    

c010e3b0 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e3b0:	55                   	push   %ebp
c010e3b1:	89 e5                	mov    %esp,%ebp
c010e3b3:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e3b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3b9:	8b 00                	mov    (%eax),%eax
c010e3bb:	83 f8 03             	cmp    $0x3,%eax
c010e3be:	75 24                	jne    c010e3e4 <wakeup_proc+0x34>
c010e3c0:	c7 44 24 0c e5 86 11 	movl   $0xc01186e5,0xc(%esp)
c010e3c7:	c0 
c010e3c8:	c7 44 24 08 00 87 11 	movl   $0xc0118700,0x8(%esp)
c010e3cf:	c0 
c010e3d0:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010e3d7:	00 
c010e3d8:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e3df:	e8 0f 21 ff ff       	call   c01004f3 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e3e4:	e8 7c fe ff ff       	call   c010e265 <__intr_save>
c010e3e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e3ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3ef:	8b 00                	mov    (%eax),%eax
c010e3f1:	83 f8 02             	cmp    $0x2,%eax
c010e3f4:	74 2d                	je     c010e423 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e3f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3f9:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e3ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010e402:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e409:	00 00 00 
            if (proc != current) {
c010e40c:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e411:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e414:	74 29                	je     c010e43f <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e416:	8b 45 08             	mov    0x8(%ebp),%eax
c010e419:	89 04 24             	mov    %eax,(%esp)
c010e41c:	e8 81 fe ff ff       	call   c010e2a2 <sched_class_enqueue>
c010e421:	eb 1c                	jmp    c010e43f <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e423:	c7 44 24 08 2b 87 11 	movl   $0xc011872b,0x8(%esp)
c010e42a:	c0 
c010e42b:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010e432:	00 
c010e433:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e43a:	e8 31 21 ff ff       	call   c0100570 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e43f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e442:	89 04 24             	mov    %eax,(%esp)
c010e445:	e8 45 fe ff ff       	call   c010e28f <__intr_restore>
}
c010e44a:	c9                   	leave  
c010e44b:	c3                   	ret    

c010e44c <schedule>:

void
schedule(void) {
c010e44c:	55                   	push   %ebp
c010e44d:	89 e5                	mov    %esp,%ebp
c010e44f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e452:	e8 0e fe ff ff       	call   c010e265 <__intr_save>
c010e457:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e45a:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e45f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e466:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e46b:	8b 00                	mov    (%eax),%eax
c010e46d:	83 f8 02             	cmp    $0x2,%eax
c010e470:	75 0d                	jne    c010e47f <schedule+0x33>
            sched_class_enqueue(current);
c010e472:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e477:	89 04 24             	mov    %eax,(%esp)
c010e47a:	e8 23 fe ff ff       	call   c010e2a2 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e47f:	e8 6c fe ff ff       	call   c010e2f0 <sched_class_pick_next>
c010e484:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e48b:	74 0b                	je     c010e498 <schedule+0x4c>
            sched_class_dequeue(next);
c010e48d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e490:	89 04 24             	mov    %eax,(%esp)
c010e493:	e8 36 fe ff ff       	call   c010e2ce <sched_class_dequeue>
        }
        if (next == NULL) {
c010e498:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e49c:	75 08                	jne    c010e4a6 <schedule+0x5a>
            next = idleproc;
c010e49e:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c010e4a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e4a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4a9:	8b 40 08             	mov    0x8(%eax),%eax
c010e4ac:	8d 50 01             	lea    0x1(%eax),%edx
c010e4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4b2:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e4b5:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e4ba:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e4bd:	74 0b                	je     c010e4ca <schedule+0x7e>
            proc_run(next);
c010e4bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4c2:	89 04 24             	mov    %eax,(%esp)
c010e4c5:	e8 c4 e0 ff ff       	call   c010c58e <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e4ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e4cd:	89 04 24             	mov    %eax,(%esp)
c010e4d0:	e8 ba fd ff ff       	call   c010e28f <__intr_restore>
}
c010e4d5:	c9                   	leave  
c010e4d6:	c3                   	ret    

c010e4d7 <add_timer>:

void
add_timer(timer_t *timer) {
c010e4d7:	55                   	push   %ebp
c010e4d8:	89 e5                	mov    %esp,%ebp
c010e4da:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e4dd:	e8 83 fd ff ff       	call   c010e265 <__intr_save>
c010e4e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e4e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4e8:	8b 00                	mov    (%eax),%eax
c010e4ea:	85 c0                	test   %eax,%eax
c010e4ec:	74 0a                	je     c010e4f8 <add_timer+0x21>
c010e4ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4f1:	8b 40 04             	mov    0x4(%eax),%eax
c010e4f4:	85 c0                	test   %eax,%eax
c010e4f6:	75 24                	jne    c010e51c <add_timer+0x45>
c010e4f8:	c7 44 24 0c 48 87 11 	movl   $0xc0118748,0xc(%esp)
c010e4ff:	c0 
c010e500:	c7 44 24 08 00 87 11 	movl   $0xc0118700,0x8(%esp)
c010e507:	c0 
c010e508:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010e50f:	00 
c010e510:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e517:	e8 d7 1f ff ff       	call   c01004f3 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e51c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e51f:	83 c0 08             	add    $0x8,%eax
c010e522:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010e525:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e528:	8b 40 04             	mov    0x4(%eax),%eax
c010e52b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e52e:	0f 94 c0             	sete   %al
c010e531:	0f b6 c0             	movzbl %al,%eax
c010e534:	85 c0                	test   %eax,%eax
c010e536:	75 24                	jne    c010e55c <add_timer+0x85>
c010e538:	c7 44 24 0c 74 87 11 	movl   $0xc0118774,0xc(%esp)
c010e53f:	c0 
c010e540:	c7 44 24 08 00 87 11 	movl   $0xc0118700,0x8(%esp)
c010e547:	c0 
c010e548:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e54f:	00 
c010e550:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e557:	e8 97 1f ff ff       	call   c01004f3 <__panic>
c010e55c:	c7 45 e4 94 50 15 c0 	movl   $0xc0155094,-0x1c(%ebp)
    return listelm->next;
c010e563:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e566:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e569:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e56c:	eb 4a                	jmp    c010e5b8 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e56e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e571:	83 e8 08             	sub    $0x8,%eax
c010e574:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e577:	8b 45 08             	mov    0x8(%ebp),%eax
c010e57a:	8b 10                	mov    (%eax),%edx
c010e57c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e57f:	8b 00                	mov    (%eax),%eax
c010e581:	39 c2                	cmp    %eax,%edx
c010e583:	73 13                	jae    c010e598 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e585:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e588:	8b 10                	mov    (%eax),%edx
c010e58a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e58d:	8b 00                	mov    (%eax),%eax
c010e58f:	29 c2                	sub    %eax,%edx
c010e591:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e594:	89 10                	mov    %edx,(%eax)
                break;
c010e596:	eb 29                	jmp    c010e5c1 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e598:	8b 45 08             	mov    0x8(%ebp),%eax
c010e59b:	8b 10                	mov    (%eax),%edx
c010e59d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e5a0:	8b 00                	mov    (%eax),%eax
c010e5a2:	29 c2                	sub    %eax,%edx
c010e5a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5a7:	89 10                	mov    %edx,(%eax)
c010e5a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e5af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5b2:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e5b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e5b8:	81 7d f4 94 50 15 c0 	cmpl   $0xc0155094,-0xc(%ebp)
c010e5bf:	75 ad                	jne    c010e56e <add_timer+0x97>
        }
        list_add_before(le, &(timer->timer_link));
c010e5c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5c4:	8d 50 08             	lea    0x8(%eax),%edx
c010e5c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e5cd:	89 55 d8             	mov    %edx,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c010e5d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e5d3:	8b 00                	mov    (%eax),%eax
c010e5d5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e5d8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e5db:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e5de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e5e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c010e5e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e5e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e5ea:	89 10                	mov    %edx,(%eax)
c010e5ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e5ef:	8b 10                	mov    (%eax),%edx
c010e5f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e5f4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e5f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e5fa:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e5fd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e600:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e603:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e606:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e608:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e60b:	89 04 24             	mov    %eax,(%esp)
c010e60e:	e8 7c fc ff ff       	call   c010e28f <__intr_restore>
}
c010e613:	c9                   	leave  
c010e614:	c3                   	ret    

c010e615 <del_timer>:

void
del_timer(timer_t *timer) {
c010e615:	55                   	push   %ebp
c010e616:	89 e5                	mov    %esp,%ebp
c010e618:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e61b:	e8 45 fc ff ff       	call   c010e265 <__intr_save>
c010e620:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e623:	8b 45 08             	mov    0x8(%ebp),%eax
c010e626:	83 c0 08             	add    $0x8,%eax
c010e629:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010e62c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e62f:	8b 40 04             	mov    0x4(%eax),%eax
c010e632:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e635:	0f 94 c0             	sete   %al
c010e638:	0f b6 c0             	movzbl %al,%eax
c010e63b:	85 c0                	test   %eax,%eax
c010e63d:	0f 85 89 00 00 00    	jne    c010e6cc <del_timer+0xb7>
            if (timer->expires != 0) {
c010e643:	8b 45 08             	mov    0x8(%ebp),%eax
c010e646:	8b 00                	mov    (%eax),%eax
c010e648:	85 c0                	test   %eax,%eax
c010e64a:	74 35                	je     c010e681 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e64c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e64f:	83 c0 08             	add    $0x8,%eax
c010e652:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010e655:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e658:	8b 40 04             	mov    0x4(%eax),%eax
c010e65b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e65e:	81 7d f0 94 50 15 c0 	cmpl   $0xc0155094,-0x10(%ebp)
c010e665:	74 1a                	je     c010e681 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e667:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e66a:	83 e8 08             	sub    $0x8,%eax
c010e66d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e670:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e673:	8b 10                	mov    (%eax),%edx
c010e675:	8b 45 08             	mov    0x8(%ebp),%eax
c010e678:	8b 00                	mov    (%eax),%eax
c010e67a:	01 c2                	add    %eax,%edx
c010e67c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e67f:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e681:	8b 45 08             	mov    0x8(%ebp),%eax
c010e684:	83 c0 08             	add    $0x8,%eax
c010e687:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e68a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e68d:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_del(listelm->prev, listelm->next);
c010e690:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e693:	8b 40 04             	mov    0x4(%eax),%eax
c010e696:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e699:	8b 12                	mov    (%edx),%edx
c010e69b:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e69e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next;
c010e6a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e6a4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e6a7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e6aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e6ad:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e6b0:	89 10                	mov    %edx,(%eax)
c010e6b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e6b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    elm->prev = elm->next = elm;
c010e6b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e6bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e6be:	89 50 04             	mov    %edx,0x4(%eax)
c010e6c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e6c4:	8b 50 04             	mov    0x4(%eax),%edx
c010e6c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e6ca:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e6cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6cf:	89 04 24             	mov    %eax,(%esp)
c010e6d2:	e8 b8 fb ff ff       	call   c010e28f <__intr_restore>
}
c010e6d7:	c9                   	leave  
c010e6d8:	c3                   	ret    

c010e6d9 <run_timer_list>:

void
run_timer_list(void) {
c010e6d9:	55                   	push   %ebp
c010e6da:	89 e5                	mov    %esp,%ebp
c010e6dc:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e6df:	e8 81 fb ff ff       	call   c010e265 <__intr_save>
c010e6e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e6e7:	c7 45 e4 94 50 15 c0 	movl   $0xc0155094,-0x1c(%ebp)
    return listelm->next;
c010e6ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e6f1:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e6f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e6f7:	81 7d f4 94 50 15 c0 	cmpl   $0xc0155094,-0xc(%ebp)
c010e6fe:	0f 84 fb 00 00 00    	je     c010e7ff <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e707:	83 e8 08             	sub    $0x8,%eax
c010e70a:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e70d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e710:	8b 00                	mov    (%eax),%eax
c010e712:	85 c0                	test   %eax,%eax
c010e714:	75 24                	jne    c010e73a <run_timer_list+0x61>
c010e716:	c7 44 24 0c 95 87 11 	movl   $0xc0118795,0xc(%esp)
c010e71d:	c0 
c010e71e:	c7 44 24 08 00 87 11 	movl   $0xc0118700,0x8(%esp)
c010e725:	c0 
c010e726:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010e72d:	00 
c010e72e:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e735:	e8 b9 1d ff ff       	call   c01004f3 <__panic>
            timer->expires --;
c010e73a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e73d:	8b 00                	mov    (%eax),%eax
c010e73f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e745:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e747:	e9 a6 00 00 00       	jmp    c010e7f2 <run_timer_list+0x119>
c010e74c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e74f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e752:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e755:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e758:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e75b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e75e:	8b 40 04             	mov    0x4(%eax),%eax
c010e761:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e764:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e767:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e76d:	85 c0                	test   %eax,%eax
c010e76f:	74 31                	je     c010e7a2 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e771:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e774:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e77a:	85 c0                	test   %eax,%eax
c010e77c:	78 4a                	js     c010e7c8 <run_timer_list+0xef>
c010e77e:	c7 44 24 0c ac 87 11 	movl   $0xc01187ac,0xc(%esp)
c010e785:	c0 
c010e786:	c7 44 24 08 00 87 11 	movl   $0xc0118700,0x8(%esp)
c010e78d:	c0 
c010e78e:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010e795:	00 
c010e796:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e79d:	e8 51 1d ff ff       	call   c01004f3 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e7a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e7a5:	8b 40 04             	mov    0x4(%eax),%eax
c010e7a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e7ac:	c7 44 24 08 d0 87 11 	movl   $0xc01187d0,0x8(%esp)
c010e7b3:	c0 
c010e7b4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e7bb:	00 
c010e7bc:	c7 04 24 15 87 11 c0 	movl   $0xc0118715,(%esp)
c010e7c3:	e8 a8 1d ff ff       	call   c0100570 <__warn>
                }
                wakeup_proc(proc);
c010e7c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e7cb:	89 04 24             	mov    %eax,(%esp)
c010e7ce:	e8 dd fb ff ff       	call   c010e3b0 <wakeup_proc>
                del_timer(timer);
c010e7d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7d6:	89 04 24             	mov    %eax,(%esp)
c010e7d9:	e8 37 fe ff ff       	call   c010e615 <del_timer>
                if (le == &timer_list) {
c010e7de:	81 7d f4 94 50 15 c0 	cmpl   $0xc0155094,-0xc(%ebp)
c010e7e5:	75 02                	jne    c010e7e9 <run_timer_list+0x110>
                    break;
c010e7e7:	eb 16                	jmp    c010e7ff <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010e7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7ec:	83 e8 08             	sub    $0x8,%eax
c010e7ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while (timer->expires == 0) {
c010e7f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7f5:	8b 00                	mov    (%eax),%eax
c010e7f7:	85 c0                	test   %eax,%eax
c010e7f9:	0f 84 4d ff ff ff    	je     c010e74c <run_timer_list+0x73>
            }
        }
        sched_class_proc_tick(current);
c010e7ff:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e804:	89 04 24             	mov    %eax,(%esp)
c010e807:	e8 ff fa ff ff       	call   c010e30b <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010e80c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e80f:	89 04 24             	mov    %eax,(%esp)
c010e812:	e8 78 fa ff ff       	call   c010e28f <__intr_restore>
}
c010e817:	c9                   	leave  
c010e818:	c3                   	ret    

c010e819 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e819:	55                   	push   %ebp
c010e81a:	89 e5                	mov    %esp,%ebp
c010e81c:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e81f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e823:	75 08                	jne    c010e82d <skew_heap_merge+0x14>
c010e825:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e828:	e9 bd 00 00 00       	jmp    c010e8ea <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e82d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e831:	75 08                	jne    c010e83b <skew_heap_merge+0x22>
c010e833:	8b 45 08             	mov    0x8(%ebp),%eax
c010e836:	e9 af 00 00 00       	jmp    c010e8ea <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e83b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e83e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e842:	8b 45 08             	mov    0x8(%ebp),%eax
c010e845:	89 04 24             	mov    %eax,(%esp)
c010e848:	8b 45 10             	mov    0x10(%ebp),%eax
c010e84b:	ff d0                	call   *%eax
c010e84d:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e850:	75 4d                	jne    c010e89f <skew_heap_merge+0x86>
     {
          r = a->left;
c010e852:	8b 45 08             	mov    0x8(%ebp),%eax
c010e855:	8b 40 04             	mov    0x4(%eax),%eax
c010e858:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e85b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e85e:	8b 40 08             	mov    0x8(%eax),%eax
c010e861:	8b 55 10             	mov    0x10(%ebp),%edx
c010e864:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e868:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e86b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e86f:	89 04 24             	mov    %eax,(%esp)
c010e872:	e8 a2 ff ff ff       	call   c010e819 <skew_heap_merge>
c010e877:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e87a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e87d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e880:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e883:	8b 45 08             	mov    0x8(%ebp),%eax
c010e886:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e889:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e88c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e890:	74 08                	je     c010e89a <skew_heap_merge+0x81>
c010e892:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e895:	8b 55 08             	mov    0x8(%ebp),%edx
c010e898:	89 10                	mov    %edx,(%eax)

          return a;
c010e89a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e89d:	eb 4b                	jmp    c010e8ea <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e89f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8a2:	8b 40 04             	mov    0x4(%eax),%eax
c010e8a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e8a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8ab:	8b 40 08             	mov    0x8(%eax),%eax
c010e8ae:	8b 55 10             	mov    0x10(%ebp),%edx
c010e8b1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e8b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e8b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8bc:	89 04 24             	mov    %eax,(%esp)
c010e8bf:	e8 55 ff ff ff       	call   c010e819 <skew_heap_merge>
c010e8c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e8c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e8cd:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e8d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e8d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e8d6:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e8d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e8dd:	74 08                	je     c010e8e7 <skew_heap_merge+0xce>
c010e8df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e8e5:	89 10                	mov    %edx,(%eax)

          return b;
c010e8e7:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e8ea:	c9                   	leave  
c010e8eb:	c3                   	ret    

c010e8ec <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e8ec:	55                   	push   %ebp
c010e8ed:	89 e5                	mov    %esp,%ebp
c010e8ef:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e8f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8f5:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e8fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e8fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e900:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e905:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e908:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e90b:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e911:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e914:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e91a:	29 c2                	sub    %eax,%edx
c010e91c:	89 d0                	mov    %edx,%eax
c010e91e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e921:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e925:	7e 07                	jle    c010e92e <proc_stride_comp_f+0x42>
c010e927:	b8 01 00 00 00       	mov    $0x1,%eax
c010e92c:	eb 12                	jmp    c010e940 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e92e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e932:	75 07                	jne    c010e93b <proc_stride_comp_f+0x4f>
c010e934:	b8 00 00 00 00       	mov    $0x0,%eax
c010e939:	eb 05                	jmp    c010e940 <proc_stride_comp_f+0x54>
     else return -1;
c010e93b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e940:	c9                   	leave  
c010e941:	c3                   	ret    

c010e942 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e942:	55                   	push   %ebp
c010e943:	89 e5                	mov    %esp,%ebp
c010e945:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010e948:	8b 45 08             	mov    0x8(%ebp),%eax
c010e94b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010e94e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e951:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e954:	89 50 04             	mov    %edx,0x4(%eax)
c010e957:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e95a:	8b 50 04             	mov    0x4(%eax),%edx
c010e95d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e960:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e962:	8b 45 08             	mov    0x8(%ebp),%eax
c010e965:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e96c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e96f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e976:	c9                   	leave  
c010e977:	c3                   	ret    

c010e978 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e978:	55                   	push   %ebp
c010e979:	89 e5                	mov    %esp,%ebp
c010e97b:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e97e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e981:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e987:	8b 45 08             	mov    0x8(%ebp),%eax
c010e98a:	8b 40 10             	mov    0x10(%eax),%eax
c010e98d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e990:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e993:	c7 45 ec ec e8 10 c0 	movl   $0xc010e8ec,-0x14(%ebp)
c010e99a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e99d:	89 45 e8             	mov    %eax,-0x18(%ebp)
     a->left = a->right = a->parent = NULL;
c010e9a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e9a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9ac:	8b 10                	mov    (%eax),%edx
c010e9ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9b1:	89 50 08             	mov    %edx,0x8(%eax)
c010e9b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9b7:	8b 50 08             	mov    0x8(%eax),%edx
c010e9ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9bd:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e9c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e9c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e9ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9d1:	89 04 24             	mov    %eax,(%esp)
c010e9d4:	e8 40 fe ff ff       	call   c010e819 <skew_heap_merge>
c010e9d9:	89 c2                	mov    %eax,%edx
     rq->lab6_run_pool =
c010e9db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9de:	89 50 10             	mov    %edx,0x10(%eax)
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e9e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e9e4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e9ea:	85 c0                	test   %eax,%eax
c010e9ec:	74 13                	je     c010ea01 <stride_enqueue+0x89>
c010e9ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e9f1:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e9f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9fa:	8b 40 0c             	mov    0xc(%eax),%eax
c010e9fd:	39 c2                	cmp    %eax,%edx
c010e9ff:	7e 0f                	jle    c010ea10 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010ea01:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea04:	8b 50 0c             	mov    0xc(%eax),%edx
c010ea07:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea0a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010ea10:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea13:	8b 55 08             	mov    0x8(%ebp),%edx
c010ea16:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010ea1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea1f:	8b 40 08             	mov    0x8(%eax),%eax
c010ea22:	8d 50 01             	lea    0x1(%eax),%edx
c010ea25:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea28:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ea2b:	c9                   	leave  
c010ea2c:	c3                   	ret    

c010ea2d <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010ea2d:	55                   	push   %ebp
c010ea2e:	89 e5                	mov    %esp,%ebp
c010ea30:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010ea33:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea36:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010ea3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea3f:	8b 40 10             	mov    0x10(%eax),%eax
c010ea42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea45:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010ea48:	c7 45 ec ec e8 10 c0 	movl   $0xc010e8ec,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010ea4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea52:	8b 00                	mov    (%eax),%eax
c010ea54:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010ea57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea5a:	8b 50 08             	mov    0x8(%eax),%edx
c010ea5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea60:	8b 40 04             	mov    0x4(%eax),%eax
c010ea63:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ea66:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010ea6a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ea6e:	89 04 24             	mov    %eax,(%esp)
c010ea71:	e8 a3 fd ff ff       	call   c010e819 <skew_heap_merge>
c010ea76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010ea79:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ea7d:	74 08                	je     c010ea87 <stride_dequeue+0x5a>
c010ea7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ea82:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ea85:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010ea87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ea8b:	74 24                	je     c010eab1 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010ea8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea90:	8b 40 04             	mov    0x4(%eax),%eax
c010ea93:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ea96:	75 0b                	jne    c010eaa3 <stride_dequeue+0x76>
               p->left = rep;
c010ea98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ea9e:	89 50 04             	mov    %edx,0x4(%eax)
c010eaa1:	eb 09                	jmp    c010eaac <stride_dequeue+0x7f>
          else p->right = rep;
c010eaa3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eaa6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010eaa9:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010eaac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaaf:	eb 03                	jmp    c010eab4 <stride_dequeue+0x87>
     }
     else return rep;
c010eab1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010eab4:	89 c2                	mov    %eax,%edx
     rq->lab6_run_pool =
c010eab6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eab9:	89 50 10             	mov    %edx,0x10(%eax)
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010eabc:	8b 45 08             	mov    0x8(%ebp),%eax
c010eabf:	8b 40 08             	mov    0x8(%eax),%eax
c010eac2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010eac5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eac8:	89 50 08             	mov    %edx,0x8(%eax)
}
c010eacb:	c9                   	leave  
c010eacc:	c3                   	ret    

c010eacd <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010eacd:	55                   	push   %ebp
c010eace:	89 e5                	mov    %esp,%ebp
c010ead0:	53                   	push   %ebx
c010ead1:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010ead4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ead7:	8b 40 10             	mov    0x10(%eax),%eax
c010eada:	85 c0                	test   %eax,%eax
c010eadc:	75 07                	jne    c010eae5 <stride_pick_next+0x18>
c010eade:	b8 00 00 00 00       	mov    $0x0,%eax
c010eae3:	eb 62                	jmp    c010eb47 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010eae5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae8:	8b 40 10             	mov    0x10(%eax),%eax
c010eaeb:	2d b0 00 00 00       	sub    $0xb0,%eax
c010eaf0:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010eaf3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eaf6:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010eafc:	85 c0                	test   %eax,%eax
c010eafe:	75 1a                	jne    c010eb1a <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010eb00:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eb03:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010eb09:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010eb0f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eb12:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010eb18:	eb 2a                	jmp    c010eb44 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010eb1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eb1d:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010eb23:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eb26:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010eb2c:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010eb31:	ba 00 00 00 00       	mov    $0x0,%edx
c010eb36:	f7 f3                	div    %ebx
c010eb38:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010eb3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010eb3e:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010eb44:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010eb47:	83 c4 10             	add    $0x10,%esp
c010eb4a:	5b                   	pop    %ebx
c010eb4b:	5d                   	pop    %ebp
c010eb4c:	c3                   	ret    

c010eb4d <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010eb4d:	55                   	push   %ebp
c010eb4e:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010eb50:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb53:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010eb59:	85 c0                	test   %eax,%eax
c010eb5b:	7e 15                	jle    c010eb72 <stride_proc_tick+0x25>
          proc->time_slice --;
c010eb5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb60:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010eb66:	8d 50 ff             	lea    -0x1(%eax),%edx
c010eb69:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb6c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010eb72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb75:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010eb7b:	85 c0                	test   %eax,%eax
c010eb7d:	75 0a                	jne    c010eb89 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010eb7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eb82:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010eb89:	5d                   	pop    %ebp
c010eb8a:	c3                   	ret    

c010eb8b <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010eb8b:	55                   	push   %ebp
c010eb8c:	89 e5                	mov    %esp,%ebp
c010eb8e:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010eb91:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb94:	8b 00                	mov    (%eax),%eax
c010eb96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010eb99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb9c:	89 04 24             	mov    %eax,(%esp)
c010eb9f:	e8 67 e1 ff ff       	call   c010cd0b <do_exit>
}
c010eba4:	c9                   	leave  
c010eba5:	c3                   	ret    

c010eba6 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010eba6:	55                   	push   %ebp
c010eba7:	89 e5                	mov    %esp,%ebp
c010eba9:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ebac:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ebb1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ebb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ebb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebba:	8b 40 44             	mov    0x44(%eax),%eax
c010ebbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ebc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebc3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ebd5:	e8 e7 df ff ff       	call   c010cbc1 <do_fork>
}
c010ebda:	c9                   	leave  
c010ebdb:	c3                   	ret    

c010ebdc <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ebdc:	55                   	push   %ebp
c010ebdd:	89 e5                	mov    %esp,%ebp
c010ebdf:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ebe2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe5:	8b 00                	mov    (%eax),%eax
c010ebe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ebea:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebed:	83 c0 04             	add    $0x4,%eax
c010ebf0:	8b 00                	mov    (%eax),%eax
c010ebf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ebf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebff:	89 04 24             	mov    %eax,(%esp)
c010ec02:	e8 0d ef ff ff       	call   c010db14 <do_wait>
}
c010ec07:	c9                   	leave  
c010ec08:	c3                   	ret    

c010ec09 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ec09:	55                   	push   %ebp
c010ec0a:	89 e5                	mov    %esp,%ebp
c010ec0c:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010ec0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec12:	8b 00                	mov    (%eax),%eax
c010ec14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010ec17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec1a:	83 c0 04             	add    $0x4,%eax
c010ec1d:	8b 00                	mov    (%eax),%eax
c010ec1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010ec22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec25:	83 c0 08             	add    $0x8,%eax
c010ec28:	8b 00                	mov    (%eax),%eax
c010ec2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010ec2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec30:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec3e:	89 04 24             	mov    %eax,(%esp)
c010ec41:	e8 7b ec ff ff       	call   c010d8c1 <do_execve>
}
c010ec46:	c9                   	leave  
c010ec47:	c3                   	ret    

c010ec48 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ec48:	55                   	push   %ebp
c010ec49:	89 e5                	mov    %esp,%ebp
c010ec4b:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ec4e:	e8 ab ee ff ff       	call   c010dafe <do_yield>
}
c010ec53:	c9                   	leave  
c010ec54:	c3                   	ret    

c010ec55 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ec55:	55                   	push   %ebp
c010ec56:	89 e5                	mov    %esp,%ebp
c010ec58:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ec5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec5e:	8b 00                	mov    (%eax),%eax
c010ec60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ec63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec66:	89 04 24             	mov    %eax,(%esp)
c010ec69:	e8 46 f0 ff ff       	call   c010dcb4 <do_kill>
}
c010ec6e:	c9                   	leave  
c010ec6f:	c3                   	ret    

c010ec70 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ec70:	55                   	push   %ebp
c010ec71:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ec73:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ec78:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ec7b:	5d                   	pop    %ebp
c010ec7c:	c3                   	ret    

c010ec7d <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ec7d:	55                   	push   %ebp
c010ec7e:	89 e5                	mov    %esp,%ebp
c010ec80:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ec83:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec86:	8b 00                	mov    (%eax),%eax
c010ec88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ec8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec8e:	89 04 24             	mov    %eax,(%esp)
c010ec91:	e8 2c 17 ff ff       	call   c01003c2 <cputchar>
    return 0;
c010ec96:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec9b:	c9                   	leave  
c010ec9c:	c3                   	ret    

c010ec9d <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ec9d:	55                   	push   %ebp
c010ec9e:	89 e5                	mov    %esp,%ebp
c010eca0:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010eca3:	e8 ae a5 ff ff       	call   c0109256 <print_pgdir>
    return 0;
c010eca8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecad:	c9                   	leave  
c010ecae:	c3                   	ret    

c010ecaf <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010ecaf:	55                   	push   %ebp
c010ecb0:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ecb2:	a1 00 61 15 c0       	mov    0xc0156100,%eax
}
c010ecb7:	5d                   	pop    %ebp
c010ecb8:	c3                   	ret    

c010ecb9 <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010ecb9:	55                   	push   %ebp
c010ecba:	89 e5                	mov    %esp,%ebp
c010ecbc:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ecbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecc2:	8b 00                	mov    (%eax),%eax
c010ecc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ecc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecca:	89 04 24             	mov    %eax,(%esp)
c010eccd:	e8 e9 f4 ff ff       	call   c010e1bb <lab6_set_priority>
    return 0;
c010ecd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecd7:	c9                   	leave  
c010ecd8:	c3                   	ret    

c010ecd9 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ecd9:	55                   	push   %ebp
c010ecda:	89 e5                	mov    %esp,%ebp
c010ecdc:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ecdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece2:	8b 00                	mov    (%eax),%eax
c010ece4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ece7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecea:	89 04 24             	mov    %eax,(%esp)
c010eced:	e8 f3 f4 ff ff       	call   c010e1e5 <do_sleep>
}
c010ecf2:	c9                   	leave  
c010ecf3:	c3                   	ret    

c010ecf4 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ecf4:	55                   	push   %ebp
c010ecf5:	89 e5                	mov    %esp,%ebp
c010ecf7:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ecfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecfd:	8b 00                	mov    (%eax),%eax
c010ecff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ed02:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed05:	8b 40 04             	mov    0x4(%eax),%eax
c010ed08:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ed0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed15:	89 04 24             	mov    %eax,(%esp)
c010ed18:	e8 62 b7 ff ff       	call   c010a47f <sysfile_open>
}
c010ed1d:	c9                   	leave  
c010ed1e:	c3                   	ret    

c010ed1f <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ed1f:	55                   	push   %ebp
c010ed20:	89 e5                	mov    %esp,%ebp
c010ed22:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed25:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed28:	8b 00                	mov    (%eax),%eax
c010ed2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ed2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed30:	89 04 24             	mov    %eax,(%esp)
c010ed33:	e8 92 b7 ff ff       	call   c010a4ca <sysfile_close>
}
c010ed38:	c9                   	leave  
c010ed39:	c3                   	ret    

c010ed3a <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ed3a:	55                   	push   %ebp
c010ed3b:	89 e5                	mov    %esp,%ebp
c010ed3d:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed40:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed43:	8b 00                	mov    (%eax),%eax
c010ed45:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed48:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed4b:	83 c0 04             	add    $0x4,%eax
c010ed4e:	8b 00                	mov    (%eax),%eax
c010ed50:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed53:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed56:	8b 40 08             	mov    0x8(%eax),%eax
c010ed59:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ed5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed5f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed6d:	89 04 24             	mov    %eax,(%esp)
c010ed70:	e8 68 b7 ff ff       	call   c010a4dd <sysfile_read>
}
c010ed75:	c9                   	leave  
c010ed76:	c3                   	ret    

c010ed77 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010ed77:	55                   	push   %ebp
c010ed78:	89 e5                	mov    %esp,%ebp
c010ed7a:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed80:	8b 00                	mov    (%eax),%eax
c010ed82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed85:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed88:	83 c0 04             	add    $0x4,%eax
c010ed8b:	8b 00                	mov    (%eax),%eax
c010ed8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed90:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed93:	8b 40 08             	mov    0x8(%eax),%eax
c010ed96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010ed99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eda0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eda3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eda7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edaa:	89 04 24             	mov    %eax,(%esp)
c010edad:	e8 a3 b8 ff ff       	call   c010a655 <sysfile_write>
}
c010edb2:	c9                   	leave  
c010edb3:	c3                   	ret    

c010edb4 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010edb4:	55                   	push   %ebp
c010edb5:	89 e5                	mov    %esp,%ebp
c010edb7:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010edba:	8b 45 08             	mov    0x8(%ebp),%eax
c010edbd:	8b 00                	mov    (%eax),%eax
c010edbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010edc2:	8b 45 08             	mov    0x8(%ebp),%eax
c010edc5:	83 c0 04             	add    $0x4,%eax
c010edc8:	8b 00                	mov    (%eax),%eax
c010edca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010edcd:	8b 45 08             	mov    0x8(%ebp),%eax
c010edd0:	83 c0 08             	add    $0x8,%eax
c010edd3:	8b 00                	mov    (%eax),%eax
c010edd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010edd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eddb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ede2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ede6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ede9:	89 04 24             	mov    %eax,(%esp)
c010edec:	e8 de b9 ff ff       	call   c010a7cf <sysfile_seek>
}
c010edf1:	c9                   	leave  
c010edf2:	c3                   	ret    

c010edf3 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010edf3:	55                   	push   %ebp
c010edf4:	89 e5                	mov    %esp,%ebp
c010edf6:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010edf9:	8b 45 08             	mov    0x8(%ebp),%eax
c010edfc:	8b 00                	mov    (%eax),%eax
c010edfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ee01:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee04:	83 c0 04             	add    $0x4,%eax
c010ee07:	8b 00                	mov    (%eax),%eax
c010ee09:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ee0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee0f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee16:	89 04 24             	mov    %eax,(%esp)
c010ee19:	e8 d2 b9 ff ff       	call   c010a7f0 <sysfile_fstat>
}
c010ee1e:	c9                   	leave  
c010ee1f:	c3                   	ret    

c010ee20 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ee20:	55                   	push   %ebp
c010ee21:	89 e5                	mov    %esp,%ebp
c010ee23:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee26:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee29:	8b 00                	mov    (%eax),%eax
c010ee2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ee2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee31:	89 04 24             	mov    %eax,(%esp)
c010ee34:	e8 35 ba ff ff       	call   c010a86e <sysfile_fsync>
}
c010ee39:	c9                   	leave  
c010ee3a:	c3                   	ret    

c010ee3b <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ee3b:	55                   	push   %ebp
c010ee3c:	89 e5                	mov    %esp,%ebp
c010ee3e:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ee41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee44:	8b 00                	mov    (%eax),%eax
c010ee46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ee49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee4c:	8b 40 04             	mov    0x4(%eax),%eax
c010ee4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ee52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee55:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee5c:	89 04 24             	mov    %eax,(%esp)
c010ee5f:	e8 a7 bb ff ff       	call   c010aa0b <sysfile_getcwd>
}
c010ee64:	c9                   	leave  
c010ee65:	c3                   	ret    

c010ee66 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ee66:	55                   	push   %ebp
c010ee67:	89 e5                	mov    %esp,%ebp
c010ee69:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee6f:	8b 00                	mov    (%eax),%eax
c010ee71:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ee74:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee77:	83 c0 04             	add    $0x4,%eax
c010ee7a:	8b 00                	mov    (%eax),%eax
c010ee7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ee7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee82:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee89:	89 04 24             	mov    %eax,(%esp)
c010ee8c:	e8 11 bc ff ff       	call   c010aaa2 <sysfile_getdirentry>
}
c010ee91:	c9                   	leave  
c010ee92:	c3                   	ret    

c010ee93 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ee93:	55                   	push   %ebp
c010ee94:	89 e5                	mov    %esp,%ebp
c010ee96:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ee99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee9c:	8b 00                	mov    (%eax),%eax
c010ee9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010eea1:	8b 45 08             	mov    0x8(%ebp),%eax
c010eea4:	83 c0 04             	add    $0x4,%eax
c010eea7:	8b 00                	mov    (%eax),%eax
c010eea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010eeac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eeaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eeb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb6:	89 04 24             	mov    %eax,(%esp)
c010eeb9:	e8 d8 bc ff ff       	call   c010ab96 <sysfile_dup>
}
c010eebe:	c9                   	leave  
c010eebf:	c3                   	ret    

c010eec0 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010eec0:	55                   	push   %ebp
c010eec1:	89 e5                	mov    %esp,%ebp
c010eec3:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010eec6:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010eecb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eece:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010eed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eed4:	8b 40 1c             	mov    0x1c(%eax),%eax
c010eed7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010eeda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010eede:	78 60                	js     c010ef40 <syscall+0x80>
c010eee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eee3:	3d ff 00 00 00       	cmp    $0xff,%eax
c010eee8:	77 56                	ja     c010ef40 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010eeea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eeed:	8b 04 85 a0 fa 14 c0 	mov    -0x3feb0560(,%eax,4),%eax
c010eef4:	85 c0                	test   %eax,%eax
c010eef6:	74 48                	je     c010ef40 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010eef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eefb:	8b 40 14             	mov    0x14(%eax),%eax
c010eefe:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ef01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef04:	8b 40 18             	mov    0x18(%eax),%eax
c010ef07:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ef0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef0d:	8b 40 10             	mov    0x10(%eax),%eax
c010ef10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ef13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef16:	8b 00                	mov    (%eax),%eax
c010ef18:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ef1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef1e:	8b 40 04             	mov    0x4(%eax),%eax
c010ef21:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ef24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef27:	8b 04 85 a0 fa 14 c0 	mov    -0x3feb0560(,%eax,4),%eax
c010ef2e:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ef31:	89 14 24             	mov    %edx,(%esp)
c010ef34:	ff d0                	call   *%eax
c010ef36:	89 c2                	mov    %eax,%edx
c010ef38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef3b:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ef3e:	eb 46                	jmp    c010ef86 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ef40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef43:	89 04 24             	mov    %eax,(%esp)
c010ef46:	e8 ba 35 ff ff       	call   c0102505 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ef4b:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ef50:	8d 50 48             	lea    0x48(%eax),%edx
c010ef53:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ef58:	8b 40 04             	mov    0x4(%eax),%eax
c010ef5b:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ef5f:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ef63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef66:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef6a:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010ef71:	c0 
c010ef72:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ef79:	00 
c010ef7a:	c7 04 24 2c 88 11 c0 	movl   $0xc011882c,(%esp)
c010ef81:	e8 6d 15 ff ff       	call   c01004f3 <__panic>
            num, current->pid, current->name);
}
c010ef86:	c9                   	leave  
c010ef87:	c3                   	ret    

c010ef88 <page2ppn>:
page2ppn(struct Page *page) {
c010ef88:	55                   	push   %ebp
c010ef89:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ef8b:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef8e:	a1 00 62 15 c0       	mov    0xc0156200,%eax
c010ef93:	29 c2                	sub    %eax,%edx
c010ef95:	89 d0                	mov    %edx,%eax
c010ef97:	c1 f8 02             	sar    $0x2,%eax
c010ef9a:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010efa0:	5d                   	pop    %ebp
c010efa1:	c3                   	ret    

c010efa2 <page2pa>:
page2pa(struct Page *page) {
c010efa2:	55                   	push   %ebp
c010efa3:	89 e5                	mov    %esp,%ebp
c010efa5:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010efa8:	8b 45 08             	mov    0x8(%ebp),%eax
c010efab:	89 04 24             	mov    %eax,(%esp)
c010efae:	e8 d5 ff ff ff       	call   c010ef88 <page2ppn>
c010efb3:	c1 e0 0c             	shl    $0xc,%eax
}
c010efb6:	c9                   	leave  
c010efb7:	c3                   	ret    

c010efb8 <page2kva>:
page2kva(struct Page *page) {
c010efb8:	55                   	push   %ebp
c010efb9:	89 e5                	mov    %esp,%ebp
c010efbb:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010efbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010efc1:	89 04 24             	mov    %eax,(%esp)
c010efc4:	e8 d9 ff ff ff       	call   c010efa2 <page2pa>
c010efc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010efcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efcf:	c1 e8 0c             	shr    $0xc,%eax
c010efd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010efd5:	a1 80 2f 15 c0       	mov    0xc0152f80,%eax
c010efda:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010efdd:	72 23                	jb     c010f002 <page2kva+0x4a>
c010efdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efe2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010efe6:	c7 44 24 08 44 88 11 	movl   $0xc0118844,0x8(%esp)
c010efed:	c0 
c010efee:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010eff5:	00 
c010eff6:	c7 04 24 67 88 11 c0 	movl   $0xc0118867,(%esp)
c010effd:	e8 f1 14 ff ff       	call   c01004f3 <__panic>
c010f002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f005:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010f00a:	c9                   	leave  
c010f00b:	c3                   	ret    

c010f00c <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010f00c:	55                   	push   %ebp
c010f00d:	89 e5                	mov    %esp,%ebp
c010f00f:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010f012:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f019:	e8 f6 22 ff ff       	call   c0101314 <ide_device_valid>
c010f01e:	85 c0                	test   %eax,%eax
c010f020:	75 1c                	jne    c010f03e <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010f022:	c7 44 24 08 75 88 11 	movl   $0xc0118875,0x8(%esp)
c010f029:	c0 
c010f02a:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010f031:	00 
c010f032:	c7 04 24 8f 88 11 c0 	movl   $0xc011888f,(%esp)
c010f039:	e8 b5 14 ff ff       	call   c01004f3 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010f03e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f045:	e8 09 23 ff ff       	call   c0101353 <ide_device_size>
c010f04a:	c1 e8 03             	shr    $0x3,%eax
c010f04d:	a3 bc 61 15 c0       	mov    %eax,0xc01561bc
}
c010f052:	c9                   	leave  
c010f053:	c3                   	ret    

c010f054 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010f054:	55                   	push   %ebp
c010f055:	89 e5                	mov    %esp,%ebp
c010f057:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f05a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f05d:	89 04 24             	mov    %eax,(%esp)
c010f060:	e8 53 ff ff ff       	call   c010efb8 <page2kva>
c010f065:	8b 55 08             	mov    0x8(%ebp),%edx
c010f068:	c1 ea 08             	shr    $0x8,%edx
c010f06b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f06e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f072:	74 0b                	je     c010f07f <swapfs_read+0x2b>
c010f074:	8b 15 bc 61 15 c0    	mov    0xc01561bc,%edx
c010f07a:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f07d:	72 23                	jb     c010f0a2 <swapfs_read+0x4e>
c010f07f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f082:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f086:	c7 44 24 08 a5 88 11 	movl   $0xc01188a5,0x8(%esp)
c010f08d:	c0 
c010f08e:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010f095:	00 
c010f096:	c7 04 24 8f 88 11 c0 	movl   $0xc011888f,(%esp)
c010f09d:	e8 51 14 ff ff       	call   c01004f3 <__panic>
c010f0a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f0a5:	c1 e2 03             	shl    $0x3,%edx
c010f0a8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f0af:	00 
c010f0b0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f0b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f0b8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f0bf:	e8 ce 22 ff ff       	call   c0101392 <ide_read_secs>
}
c010f0c4:	c9                   	leave  
c010f0c5:	c3                   	ret    

c010f0c6 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010f0c6:	55                   	push   %ebp
c010f0c7:	89 e5                	mov    %esp,%ebp
c010f0c9:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f0cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0cf:	89 04 24             	mov    %eax,(%esp)
c010f0d2:	e8 e1 fe ff ff       	call   c010efb8 <page2kva>
c010f0d7:	8b 55 08             	mov    0x8(%ebp),%edx
c010f0da:	c1 ea 08             	shr    $0x8,%edx
c010f0dd:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f0e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f0e4:	74 0b                	je     c010f0f1 <swapfs_write+0x2b>
c010f0e6:	8b 15 bc 61 15 c0    	mov    0xc01561bc,%edx
c010f0ec:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f0ef:	72 23                	jb     c010f114 <swapfs_write+0x4e>
c010f0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f0f8:	c7 44 24 08 a5 88 11 	movl   $0xc01188a5,0x8(%esp)
c010f0ff:	c0 
c010f100:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010f107:	00 
c010f108:	c7 04 24 8f 88 11 c0 	movl   $0xc011888f,(%esp)
c010f10f:	e8 df 13 ff ff       	call   c01004f3 <__panic>
c010f114:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f117:	c1 e2 03             	shl    $0x3,%edx
c010f11a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f121:	00 
c010f122:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f126:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f12a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f131:	e8 9e 24 ff ff       	call   c01015d4 <ide_write_secs>
}
c010f136:	c9                   	leave  
c010f137:	c3                   	ret    

c010f138 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f138:	55                   	push   %ebp
c010f139:	89 e5                	mov    %esp,%ebp
c010f13b:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f13e:	c7 04 24 c0 50 15 c0 	movl   $0xc01550c0,(%esp)
c010f145:	e8 40 af ff ff       	call   c010a08a <down>
}
c010f14a:	c9                   	leave  
c010f14b:	c3                   	ret    

c010f14c <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f14c:	55                   	push   %ebp
c010f14d:	89 e5                	mov    %esp,%ebp
c010f14f:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f152:	c7 04 24 c0 50 15 c0 	movl   $0xc01550c0,(%esp)
c010f159:	e8 11 af ff ff       	call   c010a06f <up>
}
c010f15e:	c9                   	leave  
c010f15f:	c3                   	ret    

c010f160 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f160:	55                   	push   %ebp
c010f161:	89 e5                	mov    %esp,%ebp
c010f163:	83 ec 28             	sub    $0x28,%esp
c010f166:	c7 45 f4 b8 50 15 c0 	movl   $0xc01550b8,-0xc(%ebp)
c010f16d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f170:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f173:	89 50 04             	mov    %edx,0x4(%eax)
c010f176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f179:	8b 50 04             	mov    0x4(%eax),%edx
c010f17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f17f:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f181:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f188:	00 
c010f189:	c7 04 24 c0 50 15 c0 	movl   $0xc01550c0,(%esp)
c010f190:	e8 67 ad ff ff       	call   c0109efc <sem_init>
}
c010f195:	c9                   	leave  
c010f196:	c3                   	ret    

c010f197 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f197:	55                   	push   %ebp
c010f198:	89 e5                	mov    %esp,%ebp
c010f19a:	83 ec 38             	sub    $0x38,%esp
c010f19d:	c7 45 e8 b8 50 15 c0 	movl   $0xc01550b8,-0x18(%ebp)
    return list->next == list;
c010f1a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f1a7:	8b 40 04             	mov    0x4(%eax),%eax
c010f1aa:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f1ad:	0f 94 c0             	sete   %al
c010f1b0:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f1b3:	85 c0                	test   %eax,%eax
c010f1b5:	75 57                	jne    c010f20e <vfs_cleanup+0x77>
        lock_vdev_list();
c010f1b7:	e8 7c ff ff ff       	call   c010f138 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f1bc:	c7 45 f0 b8 50 15 c0 	movl   $0xc01550b8,-0x10(%ebp)
c010f1c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f1c9:	eb 27                	jmp    c010f1f2 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f1cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f1ce:	83 e8 10             	sub    $0x10,%eax
c010f1d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f1d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1d7:	8b 40 08             	mov    0x8(%eax),%eax
c010f1da:	85 c0                	test   %eax,%eax
c010f1dc:	74 14                	je     c010f1f2 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f1de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1e1:	8b 40 08             	mov    0x8(%eax),%eax
c010f1e4:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f1e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f1ea:	8b 52 08             	mov    0x8(%edx),%edx
c010f1ed:	89 14 24             	mov    %edx,(%esp)
c010f1f0:	ff d0                	call   *%eax
c010f1f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f1f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010f1f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f1fb:	8b 40 04             	mov    0x4(%eax),%eax
            while ((le = list_next(le)) != list) {
c010f1fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f201:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f204:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f207:	75 c2                	jne    c010f1cb <vfs_cleanup+0x34>
                }
            }
        }
        unlock_vdev_list();
c010f209:	e8 3e ff ff ff       	call   c010f14c <unlock_vdev_list>
    }
}
c010f20e:	c9                   	leave  
c010f20f:	c3                   	ret    

c010f210 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f210:	55                   	push   %ebp
c010f211:	89 e5                	mov    %esp,%ebp
c010f213:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f216:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f21a:	75 24                	jne    c010f240 <vfs_get_root+0x30>
c010f21c:	c7 44 24 0c c4 88 11 	movl   $0xc01188c4,0xc(%esp)
c010f223:	c0 
c010f224:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f22b:	c0 
c010f22c:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f233:	00 
c010f234:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f23b:	e8 b3 12 ff ff       	call   c01004f3 <__panic>
    int ret = -E_NO_DEV;
c010f240:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f247:	c7 45 e0 b8 50 15 c0 	movl   $0xc01550b8,-0x20(%ebp)
    return list->next == list;
c010f24e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f251:	8b 40 04             	mov    0x4(%eax),%eax
c010f254:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f257:	0f 94 c0             	sete   %al
c010f25a:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f25d:	85 c0                	test   %eax,%eax
c010f25f:	0f 85 c3 00 00 00    	jne    c010f328 <vfs_get_root+0x118>
        lock_vdev_list();
c010f265:	e8 ce fe ff ff       	call   c010f138 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f26a:	c7 45 e8 b8 50 15 c0 	movl   $0xc01550b8,-0x18(%ebp)
c010f271:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f274:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f277:	e9 8c 00 00 00       	jmp    c010f308 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f27c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f27f:	83 e8 10             	sub    $0x10,%eax
c010f282:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f285:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f288:	8b 00                	mov    (%eax),%eax
c010f28a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f28e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f291:	89 04 24             	mov    %eax,(%esp)
c010f294:	e8 8e 59 00 00       	call   c0114c27 <strcmp>
c010f299:	85 c0                	test   %eax,%eax
c010f29b:	75 6b                	jne    c010f308 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f29d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f2a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2a7:	8b 40 08             	mov    0x8(%eax),%eax
c010f2aa:	85 c0                	test   %eax,%eax
c010f2ac:	74 19                	je     c010f2c7 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f2ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2b1:	8b 40 08             	mov    0x8(%eax),%eax
c010f2b4:	8b 40 74             	mov    0x74(%eax),%eax
c010f2b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f2ba:	8b 52 08             	mov    0x8(%edx),%edx
c010f2bd:	89 14 24             	mov    %edx,(%esp)
c010f2c0:	ff d0                	call   *%eax
c010f2c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f2c5:	eb 21                	jmp    c010f2e8 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f2c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2ca:	8b 40 0c             	mov    0xc(%eax),%eax
c010f2cd:	85 c0                	test   %eax,%eax
c010f2cf:	75 17                	jne    c010f2e8 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f2d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2d4:	8b 40 04             	mov    0x4(%eax),%eax
c010f2d7:	89 04 24             	mov    %eax,(%esp)
c010f2da:	e8 f0 10 00 00       	call   c01103cf <inode_ref_inc>
                        found = vdev->devnode;
c010f2df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2e2:	8b 40 04             	mov    0x4(%eax),%eax
c010f2e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f2e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2ec:	74 11                	je     c010f2ff <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f2ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f2f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f2f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f2fb:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f2fd:	eb 24                	jmp    c010f323 <vfs_get_root+0x113>
                        ret = -E_NA_DEV;
c010f2ff:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    break;
c010f306:	eb 1b                	jmp    c010f323 <vfs_get_root+0x113>
c010f308:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f30b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    return listelm->next;
c010f30e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f311:	8b 40 04             	mov    0x4(%eax),%eax
            while ((le = list_next(le)) != list) {
c010f314:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f317:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f31a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f31d:	0f 85 59 ff ff ff    	jne    c010f27c <vfs_get_root+0x6c>
                }
            }
        }
        unlock_vdev_list();
c010f323:	e8 24 fe ff ff       	call   c010f14c <unlock_vdev_list>
    }
    return ret;
c010f328:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f32b:	c9                   	leave  
c010f32c:	c3                   	ret    

c010f32d <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f32d:	55                   	push   %ebp
c010f32e:	89 e5                	mov    %esp,%ebp
c010f330:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f333:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f337:	75 24                	jne    c010f35d <vfs_get_devname+0x30>
c010f339:	c7 44 24 0c fe 88 11 	movl   $0xc01188fe,0xc(%esp)
c010f340:	c0 
c010f341:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f348:	c0 
c010f349:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f350:	00 
c010f351:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f358:	e8 96 11 ff ff       	call   c01004f3 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f35d:	c7 45 f0 b8 50 15 c0 	movl   $0xc01550b8,-0x10(%ebp)
c010f364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f367:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f36a:	eb 1b                	jmp    c010f387 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f36c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f36f:	83 e8 10             	sub    $0x10,%eax
c010f372:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f375:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f378:	8b 40 08             	mov    0x8(%eax),%eax
c010f37b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f37e:	75 07                	jne    c010f387 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f380:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f383:	8b 00                	mov    (%eax),%eax
c010f385:	eb 1c                	jmp    c010f3a3 <vfs_get_devname+0x76>
c010f387:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f38a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f38d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f390:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c010f393:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f399:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f39c:	75 ce                	jne    c010f36c <vfs_get_devname+0x3f>
        }
    }
    return NULL;
c010f39e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f3a3:	c9                   	leave  
c010f3a4:	c3                   	ret    

c010f3a5 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f3a5:	55                   	push   %ebp
c010f3a6:	89 e5                	mov    %esp,%ebp
c010f3a8:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f3ab:	c7 45 f0 b8 50 15 c0 	movl   $0xc01550b8,-0x10(%ebp)
c010f3b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f3b8:	eb 28                	jmp    c010f3e2 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f3ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3bd:	83 e8 10             	sub    $0x10,%eax
c010f3c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f3c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3c6:	8b 00                	mov    (%eax),%eax
c010f3c8:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f3cf:	89 04 24             	mov    %eax,(%esp)
c010f3d2:	e8 50 58 00 00       	call   c0114c27 <strcmp>
c010f3d7:	85 c0                	test   %eax,%eax
c010f3d9:	75 07                	jne    c010f3e2 <check_devname_conflict+0x3d>
            return 0;
c010f3db:	b8 00 00 00 00       	mov    $0x0,%eax
c010f3e0:	eb 1c                	jmp    c010f3fe <check_devname_conflict+0x59>
c010f3e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f3e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f3eb:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c010f3ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f3f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f3f7:	75 c1                	jne    c010f3ba <check_devname_conflict+0x15>
        }
    }
    return 1;
c010f3f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f3fe:	c9                   	leave  
c010f3ff:	c3                   	ret    

c010f400 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f400:	55                   	push   %ebp
c010f401:	89 e5                	mov    %esp,%ebp
c010f403:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f406:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f40a:	75 24                	jne    c010f430 <vfs_do_add+0x30>
c010f40c:	c7 44 24 0c c4 88 11 	movl   $0xc01188c4,0xc(%esp)
c010f413:	c0 
c010f414:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f41b:	c0 
c010f41c:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f423:	00 
c010f424:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f42b:	e8 c3 10 ff ff       	call   c01004f3 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f430:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f434:	75 06                	jne    c010f43c <vfs_do_add+0x3c>
c010f436:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f43a:	74 37                	je     c010f473 <vfs_do_add+0x73>
c010f43c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f440:	74 0d                	je     c010f44f <vfs_do_add+0x4f>
c010f442:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f445:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f448:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f44d:	74 24                	je     c010f473 <vfs_do_add+0x73>
c010f44f:	c7 44 24 0c 0c 89 11 	movl   $0xc011890c,0xc(%esp)
c010f456:	c0 
c010f457:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f45e:	c0 
c010f45f:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f466:	00 
c010f467:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f46e:	e8 80 10 ff ff       	call   c01004f3 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f473:	8b 45 08             	mov    0x8(%ebp),%eax
c010f476:	89 04 24             	mov    %eax,(%esp)
c010f479:	e8 b1 56 00 00       	call   c0114b2f <strlen>
c010f47e:	83 f8 1f             	cmp    $0x1f,%eax
c010f481:	76 0a                	jbe    c010f48d <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f483:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f488:	e9 00 01 00 00       	jmp    c010f58d <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f48d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f494:	8b 45 08             	mov    0x8(%ebp),%eax
c010f497:	89 04 24             	mov    %eax,(%esp)
c010f49a:	e8 c1 0d ff ff       	call   c0100260 <strdup>
c010f49f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f4a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f4a6:	75 08                	jne    c010f4b0 <vfs_do_add+0xb0>
        return ret;
c010f4a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4ab:	e9 dd 00 00 00       	jmp    c010f58d <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f4b0:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f4b7:	e8 46 67 ff ff       	call   c0105c02 <kmalloc>
c010f4bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f4bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f4c3:	75 05                	jne    c010f4ca <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f4c5:	e9 b5 00 00 00       	jmp    c010f57f <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f4ca:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f4d1:	e8 62 fc ff ff       	call   c010f138 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f4d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4d9:	89 04 24             	mov    %eax,(%esp)
c010f4dc:	e8 c4 fe ff ff       	call   c010f3a5 <check_devname_conflict>
c010f4e1:	85 c0                	test   %eax,%eax
c010f4e3:	75 16                	jne    c010f4fb <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f4e5:	e8 62 fc ff ff       	call   c010f14c <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f4ea:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f4eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4ee:	89 04 24             	mov    %eax,(%esp)
c010f4f1:	e8 27 67 ff ff       	call   c0105c1d <kfree>
c010f4f6:	e9 84 00 00 00       	jmp    c010f57f <vfs_do_add+0x17f>
    vdev->devname = s_devname;
c010f4fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f501:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f503:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f506:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f509:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f50c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f50f:	8b 55 14             	mov    0x14(%ebp),%edx
c010f512:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f515:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f518:	8b 55 10             	mov    0x10(%ebp),%edx
c010f51b:	89 50 08             	mov    %edx,0x8(%eax)
    list_add(&vdev_list, &(vdev->vdev_link));
c010f51e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f521:	83 c0 10             	add    $0x10,%eax
c010f524:	c7 45 e8 b8 50 15 c0 	movl   $0xc01550b8,-0x18(%ebp)
c010f52b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f52e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f531:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f534:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f537:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
c010f53a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f53d:	8b 40 04             	mov    0x4(%eax),%eax
c010f540:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f543:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f546:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f549:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f54c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    prev->next = next->prev = elm;
c010f54f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f552:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f555:	89 10                	mov    %edx,(%eax)
c010f557:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f55a:	8b 10                	mov    (%eax),%edx
c010f55c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f55f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f562:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f565:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f568:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f56b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f56e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f571:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f573:	e8 d4 fb ff ff       	call   c010f14c <unlock_vdev_list>
    return 0;
c010f578:	b8 00 00 00 00       	mov    $0x0,%eax
c010f57d:	eb 0e                	jmp    c010f58d <vfs_do_add+0x18d>
failed_cleanup_name:
    kfree(s_devname);
c010f57f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f582:	89 04 24             	mov    %eax,(%esp)
c010f585:	e8 93 66 ff ff       	call   c0105c1d <kfree>
    return ret;
c010f58a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f58d:	c9                   	leave  
c010f58e:	c3                   	ret    

c010f58f <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f58f:	55                   	push   %ebp
c010f590:	89 e5                	mov    %esp,%ebp
c010f592:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f595:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f59c:	00 
c010f59d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f5a0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f5a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f5ab:	00 
c010f5ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5af:	89 04 24             	mov    %eax,(%esp)
c010f5b2:	e8 49 fe ff ff       	call   c010f400 <vfs_do_add>
}
c010f5b7:	c9                   	leave  
c010f5b8:	c3                   	ret    

c010f5b9 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f5b9:	55                   	push   %ebp
c010f5ba:	89 e5                	mov    %esp,%ebp
c010f5bc:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f5bf:	8b 45 10             	mov    0x10(%ebp),%eax
c010f5c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f5c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f5cd:	00 
c010f5ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f5d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f5d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5d8:	89 04 24             	mov    %eax,(%esp)
c010f5db:	e8 20 fe ff ff       	call   c010f400 <vfs_do_add>
}
c010f5e0:	c9                   	leave  
c010f5e1:	c3                   	ret    

c010f5e2 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010f5e2:	55                   	push   %ebp
c010f5e3:	89 e5                	mov    %esp,%ebp
c010f5e5:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010f5e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f5ec:	75 24                	jne    c010f612 <find_mount+0x30>
c010f5ee:	c7 44 24 0c c4 88 11 	movl   $0xc01188c4,0xc(%esp)
c010f5f5:	c0 
c010f5f6:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f5fd:	c0 
c010f5fe:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010f605:	00 
c010f606:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f60d:	e8 e1 0e ff ff       	call   c01004f3 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f612:	c7 45 f0 b8 50 15 c0 	movl   $0xc01550b8,-0x10(%ebp)
c010f619:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f61c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f61f:	eb 3a                	jmp    c010f65b <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f621:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f624:	83 e8 10             	sub    $0x10,%eax
c010f627:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010f62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f62d:	8b 40 0c             	mov    0xc(%eax),%eax
c010f630:	85 c0                	test   %eax,%eax
c010f632:	74 27                	je     c010f65b <find_mount+0x79>
c010f634:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f637:	8b 00                	mov    (%eax),%eax
c010f639:	8b 55 08             	mov    0x8(%ebp),%edx
c010f63c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f640:	89 04 24             	mov    %eax,(%esp)
c010f643:	e8 df 55 00 00       	call   c0114c27 <strcmp>
c010f648:	85 c0                	test   %eax,%eax
c010f64a:	75 0f                	jne    c010f65b <find_mount+0x79>
            *vdev_store = vdev;
c010f64c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f64f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f652:	89 10                	mov    %edx,(%eax)
            return 0;
c010f654:	b8 00 00 00 00       	mov    $0x0,%eax
c010f659:	eb 1c                	jmp    c010f677 <find_mount+0x95>
c010f65b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f65e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c010f661:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f664:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c010f667:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f66a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f66d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f670:	75 af                	jne    c010f621 <find_mount+0x3f>
        }
    }
    return -E_NO_DEV;
c010f672:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010f677:	c9                   	leave  
c010f678:	c3                   	ret    

c010f679 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010f679:	55                   	push   %ebp
c010f67a:	89 e5                	mov    %esp,%ebp
c010f67c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f67f:	e8 b4 fa ff ff       	call   c010f138 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f684:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f687:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f68b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f68e:	89 04 24             	mov    %eax,(%esp)
c010f691:	e8 4c ff ff ff       	call   c010f5e2 <find_mount>
c010f696:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f699:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f69d:	74 05                	je     c010f6a4 <vfs_mount+0x2b>
        goto out;
c010f69f:	e9 f4 00 00 00       	jmp    c010f798 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010f6a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6a7:	8b 40 08             	mov    0x8(%eax),%eax
c010f6aa:	85 c0                	test   %eax,%eax
c010f6ac:	74 0c                	je     c010f6ba <vfs_mount+0x41>
        ret = -E_BUSY;
c010f6ae:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010f6b5:	e9 de 00 00 00       	jmp    c010f798 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f6ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6bd:	8b 00                	mov    (%eax),%eax
c010f6bf:	85 c0                	test   %eax,%eax
c010f6c1:	74 0a                	je     c010f6cd <vfs_mount+0x54>
c010f6c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6c6:	8b 40 0c             	mov    0xc(%eax),%eax
c010f6c9:	85 c0                	test   %eax,%eax
c010f6cb:	75 24                	jne    c010f6f1 <vfs_mount+0x78>
c010f6cd:	c7 44 24 0c 68 89 11 	movl   $0xc0118968,0xc(%esp)
c010f6d4:	c0 
c010f6d5:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f6dc:	c0 
c010f6dd:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010f6e4:	00 
c010f6e5:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f6ec:	e8 02 0e ff ff       	call   c01004f3 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010f6f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6f4:	8b 40 04             	mov    0x4(%eax),%eax
c010f6f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f6fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f6fe:	74 0d                	je     c010f70d <vfs_mount+0x94>
c010f700:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f703:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f706:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f70b:	74 24                	je     c010f731 <vfs_mount+0xb8>
c010f70d:	c7 44 24 0c 94 89 11 	movl   $0xc0118994,0xc(%esp)
c010f714:	c0 
c010f715:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f71c:	c0 
c010f71d:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010f724:	00 
c010f725:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f72c:	e8 c2 0d ff ff       	call   c01004f3 <__panic>
c010f731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f734:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010f737:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f73a:	83 c0 08             	add    $0x8,%eax
c010f73d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f741:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f744:	89 04 24             	mov    %eax,(%esp)
c010f747:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f74a:	ff d0                	call   *%eax
c010f74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f74f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f753:	75 43                	jne    c010f798 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010f755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f758:	8b 40 08             	mov    0x8(%eax),%eax
c010f75b:	85 c0                	test   %eax,%eax
c010f75d:	75 24                	jne    c010f783 <vfs_mount+0x10a>
c010f75f:	c7 44 24 0c c7 89 11 	movl   $0xc01189c7,0xc(%esp)
c010f766:	c0 
c010f767:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f76e:	c0 
c010f76f:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010f776:	00 
c010f777:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f77e:	e8 70 0d ff ff       	call   c01004f3 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010f783:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f786:	8b 00                	mov    (%eax),%eax
c010f788:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f78c:	c7 04 24 d8 89 11 c0 	movl   $0xc01189d8,(%esp)
c010f793:	e8 04 0c ff ff       	call   c010039c <cprintf>
    }

out:
    unlock_vdev_list();
c010f798:	e8 af f9 ff ff       	call   c010f14c <unlock_vdev_list>
    return ret;
c010f79d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f7a0:	c9                   	leave  
c010f7a1:	c3                   	ret    

c010f7a2 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010f7a2:	55                   	push   %ebp
c010f7a3:	89 e5                	mov    %esp,%ebp
c010f7a5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f7a8:	e8 8b f9 ff ff       	call   c010f138 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f7ad:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010f7b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7b7:	89 04 24             	mov    %eax,(%esp)
c010f7ba:	e8 23 fe ff ff       	call   c010f5e2 <find_mount>
c010f7bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f7c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f7c6:	74 05                	je     c010f7cd <vfs_unmount+0x2b>
        goto out;
c010f7c8:	e9 a8 00 00 00       	jmp    c010f875 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010f7cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7d0:	8b 40 08             	mov    0x8(%eax),%eax
c010f7d3:	85 c0                	test   %eax,%eax
c010f7d5:	75 0c                	jne    c010f7e3 <vfs_unmount+0x41>
        ret = -E_INVAL;
c010f7d7:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010f7de:	e9 92 00 00 00       	jmp    c010f875 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f7e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7e6:	8b 00                	mov    (%eax),%eax
c010f7e8:	85 c0                	test   %eax,%eax
c010f7ea:	74 0a                	je     c010f7f6 <vfs_unmount+0x54>
c010f7ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7ef:	8b 40 0c             	mov    0xc(%eax),%eax
c010f7f2:	85 c0                	test   %eax,%eax
c010f7f4:	75 24                	jne    c010f81a <vfs_unmount+0x78>
c010f7f6:	c7 44 24 0c 68 89 11 	movl   $0xc0118968,0xc(%esp)
c010f7fd:	c0 
c010f7fe:	c7 44 24 08 d4 88 11 	movl   $0xc01188d4,0x8(%esp)
c010f805:	c0 
c010f806:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010f80d:	00 
c010f80e:	c7 04 24 e9 88 11 c0 	movl   $0xc01188e9,(%esp)
c010f815:	e8 d9 0c ff ff       	call   c01004f3 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010f81a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f81d:	8b 40 08             	mov    0x8(%eax),%eax
c010f820:	8b 40 70             	mov    0x70(%eax),%eax
c010f823:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f826:	8b 52 08             	mov    0x8(%edx),%edx
c010f829:	89 14 24             	mov    %edx,(%esp)
c010f82c:	ff d0                	call   *%eax
c010f82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f831:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f835:	74 02                	je     c010f839 <vfs_unmount+0x97>
        goto out;
c010f837:	eb 3c                	jmp    c010f875 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010f839:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f83c:	8b 40 08             	mov    0x8(%eax),%eax
c010f83f:	8b 40 78             	mov    0x78(%eax),%eax
c010f842:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f845:	8b 52 08             	mov    0x8(%edx),%edx
c010f848:	89 14 24             	mov    %edx,(%esp)
c010f84b:	ff d0                	call   *%eax
c010f84d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f850:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f854:	75 1f                	jne    c010f875 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010f856:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f859:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010f860:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f863:	8b 00                	mov    (%eax),%eax
c010f865:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f869:	c7 04 24 e8 89 11 c0 	movl   $0xc01189e8,(%esp)
c010f870:	e8 27 0b ff ff       	call   c010039c <cprintf>
    }

out:
    unlock_vdev_list();
c010f875:	e8 d2 f8 ff ff       	call   c010f14c <unlock_vdev_list>
    return ret;
c010f87a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f87d:	c9                   	leave  
c010f87e:	c3                   	ret    

c010f87f <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010f87f:	55                   	push   %ebp
c010f880:	89 e5                	mov    %esp,%ebp
c010f882:	83 ec 38             	sub    $0x38,%esp
c010f885:	c7 45 e4 b8 50 15 c0 	movl   $0xc01550b8,-0x1c(%ebp)
    return list->next == list;
c010f88c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f88f:	8b 40 04             	mov    0x4(%eax),%eax
c010f892:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010f895:	0f 94 c0             	sete   %al
c010f898:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f89b:	85 c0                	test   %eax,%eax
c010f89d:	0f 85 f1 00 00 00    	jne    c010f994 <vfs_unmount_all+0x115>
        lock_vdev_list();
c010f8a3:	e8 90 f8 ff ff       	call   c010f138 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f8a8:	c7 45 f0 b8 50 15 c0 	movl   $0xc01550b8,-0x10(%ebp)
c010f8af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f8b5:	e9 ba 00 00 00       	jmp    c010f974 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f8ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8bd:	83 e8 10             	sub    $0x10,%eax
c010f8c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010f8c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8c6:	8b 40 0c             	mov    0xc(%eax),%eax
c010f8c9:	85 c0                	test   %eax,%eax
c010f8cb:	0f 84 a3 00 00 00    	je     c010f974 <vfs_unmount_all+0xf5>
c010f8d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8d4:	8b 40 08             	mov    0x8(%eax),%eax
c010f8d7:	85 c0                	test   %eax,%eax
c010f8d9:	0f 84 95 00 00 00    	je     c010f974 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010f8df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8e2:	8b 40 08             	mov    0x8(%eax),%eax
c010f8e5:	8b 40 70             	mov    0x70(%eax),%eax
c010f8e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f8eb:	8b 52 08             	mov    0x8(%edx),%edx
c010f8ee:	89 14 24             	mov    %edx,(%esp)
c010f8f1:	ff d0                	call   *%eax
c010f8f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f8f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f8fa:	74 1e                	je     c010f91a <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010f8fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8ff:	8b 00                	mov    (%eax),%eax
c010f901:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f904:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f908:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f90c:	c7 04 24 fc 89 11 c0 	movl   $0xc01189fc,(%esp)
c010f913:	e8 84 0a ff ff       	call   c010039c <cprintf>
                        continue ;
c010f918:	eb 5a                	jmp    c010f974 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010f91a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f91d:	8b 40 08             	mov    0x8(%eax),%eax
c010f920:	8b 40 78             	mov    0x78(%eax),%eax
c010f923:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f926:	8b 52 08             	mov    0x8(%edx),%edx
c010f929:	89 14 24             	mov    %edx,(%esp)
c010f92c:	ff d0                	call   *%eax
c010f92e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f931:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f935:	74 1e                	je     c010f955 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010f937:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f93a:	8b 00                	mov    (%eax),%eax
c010f93c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f93f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f943:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f947:	c7 04 24 24 8a 11 c0 	movl   $0xc0118a24,(%esp)
c010f94e:	e8 49 0a ff ff       	call   c010039c <cprintf>
                        continue ;
c010f953:	eb 1f                	jmp    c010f974 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010f955:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f958:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010f95f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f962:	8b 00                	mov    (%eax),%eax
c010f964:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f968:	c7 04 24 e8 89 11 c0 	movl   $0xc01189e8,(%esp)
c010f96f:	e8 28 0a ff ff       	call   c010039c <cprintf>
c010f974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f977:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c010f97a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f97d:	8b 40 04             	mov    0x4(%eax),%eax
            while ((le = list_next(le)) != list) {
c010f980:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f983:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f986:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f989:	0f 85 2b ff ff ff    	jne    c010f8ba <vfs_unmount_all+0x3b>
                }
            }
        }
        unlock_vdev_list();
c010f98f:	e8 b8 f7 ff ff       	call   c010f14c <unlock_vdev_list>
    }
    return 0;
c010f994:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f999:	c9                   	leave  
c010f99a:	c3                   	ret    

c010f99b <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c010f99b:	55                   	push   %ebp
c010f99c:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c010f99e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010f9a3:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010f9a9:	8b 00                	mov    (%eax),%eax
}
c010f9ab:	5d                   	pop    %ebp
c010f9ac:	c3                   	ret    

c010f9ad <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c010f9ad:	55                   	push   %ebp
c010f9ae:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c010f9b0:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010f9b5:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010f9bb:	8b 55 08             	mov    0x8(%ebp),%edx
c010f9be:	89 10                	mov    %edx,(%eax)
}
c010f9c0:	5d                   	pop    %ebp
c010f9c1:	c3                   	ret    

c010f9c2 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c010f9c2:	55                   	push   %ebp
c010f9c3:	89 e5                	mov    %esp,%ebp
c010f9c5:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c010f9c8:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010f9cd:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010f9d3:	89 04 24             	mov    %eax,(%esp)
c010f9d6:	e8 e9 c1 ff ff       	call   c010bbc4 <lock_files>
}
c010f9db:	c9                   	leave  
c010f9dc:	c3                   	ret    

c010f9dd <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c010f9dd:	55                   	push   %ebp
c010f9de:	89 e5                	mov    %esp,%ebp
c010f9e0:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c010f9e3:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010f9e8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010f9ee:	89 04 24             	mov    %eax,(%esp)
c010f9f1:	e8 e4 c1 ff ff       	call   c010bbda <unlock_files>
}
c010f9f6:	c9                   	leave  
c010f9f7:	c3                   	ret    

c010f9f8 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c010f9f8:	55                   	push   %ebp
c010f9f9:	89 e5                	mov    %esp,%ebp
c010f9fb:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c010f9fe:	e8 98 ff ff ff       	call   c010f99b <get_cwd_nolock>
c010fa03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa0a:	74 1a                	je     c010fa26 <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c010fa0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa0f:	89 04 24             	mov    %eax,(%esp)
c010fa12:	e8 b8 09 00 00       	call   c01103cf <inode_ref_inc>
        *dir_store = node;
c010fa17:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fa1d:	89 10                	mov    %edx,(%eax)
        return 0;
c010fa1f:	b8 00 00 00 00       	mov    $0x0,%eax
c010fa24:	eb 05                	jmp    c010fa2b <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c010fa26:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c010fa2b:	c9                   	leave  
c010fa2c:	c3                   	ret    

c010fa2d <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c010fa2d:	55                   	push   %ebp
c010fa2e:	89 e5                	mov    %esp,%ebp
c010fa30:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c010fa33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c010fa3a:	e8 83 ff ff ff       	call   c010f9c2 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c010fa3f:	e8 57 ff ff ff       	call   c010f99b <get_cwd_nolock>
c010fa44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa4a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010fa4d:	0f 84 c7 00 00 00    	je     c010fb1a <vfs_set_curdir+0xed>
        if (dir != NULL) {
c010fa53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fa57:	0f 84 a1 00 00 00    	je     c010fafe <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c010fa5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa60:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fa63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa67:	74 17                	je     c010fa80 <vfs_set_curdir+0x53>
c010fa69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa6c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fa6f:	85 c0                	test   %eax,%eax
c010fa71:	74 0d                	je     c010fa80 <vfs_set_curdir+0x53>
c010fa73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa76:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fa79:	8b 40 28             	mov    0x28(%eax),%eax
c010fa7c:	85 c0                	test   %eax,%eax
c010fa7e:	75 24                	jne    c010faa4 <vfs_set_curdir+0x77>
c010fa80:	c7 44 24 0c 50 8a 11 	movl   $0xc0118a50,0xc(%esp)
c010fa87:	c0 
c010fa88:	c7 44 24 08 a0 8a 11 	movl   $0xc0118aa0,0x8(%esp)
c010fa8f:	c0 
c010fa90:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c010fa97:	00 
c010fa98:	c7 04 24 b5 8a 11 c0 	movl   $0xc0118ab5,(%esp)
c010fa9f:	e8 4f 0a ff ff       	call   c01004f3 <__panic>
c010faa4:	c7 44 24 04 cb 8a 11 	movl   $0xc0118acb,0x4(%esp)
c010faab:	c0 
c010faac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010faaf:	89 04 24             	mov    %eax,(%esp)
c010fab2:	e8 20 0b 00 00       	call   c01105d7 <inode_check>
c010fab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010faba:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fabd:	8b 40 28             	mov    0x28(%eax),%eax
c010fac0:	8d 55 e8             	lea    -0x18(%ebp),%edx
c010fac3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fac7:	8b 55 08             	mov    0x8(%ebp),%edx
c010faca:	89 14 24             	mov    %edx,(%esp)
c010facd:	ff d0                	call   *%eax
c010facf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fad2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fad6:	74 02                	je     c010fada <vfs_set_curdir+0xad>
                goto out;
c010fad8:	eb 40                	jmp    c010fb1a <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c010fada:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fadd:	25 00 70 00 00       	and    $0x7000,%eax
c010fae2:	3d 00 20 00 00       	cmp    $0x2000,%eax
c010fae7:	74 0a                	je     c010faf3 <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c010fae9:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c010faf0:	90                   	nop
c010faf1:	eb 27                	jmp    c010fb1a <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c010faf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010faf6:	89 04 24             	mov    %eax,(%esp)
c010faf9:	e8 d1 08 00 00       	call   c01103cf <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c010fafe:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb01:	89 04 24             	mov    %eax,(%esp)
c010fb04:	e8 a4 fe ff ff       	call   c010f9ad <set_cwd_nolock>
        if (old_dir != NULL) {
c010fb09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fb0d:	74 0b                	je     c010fb1a <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c010fb0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb12:	89 04 24             	mov    %eax,(%esp)
c010fb15:	e8 cf 08 00 00       	call   c01103e9 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c010fb1a:	e8 be fe ff ff       	call   c010f9dd <unlock_cfs>
    return ret;
c010fb1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb22:	c9                   	leave  
c010fb23:	c3                   	ret    

c010fb24 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c010fb24:	55                   	push   %ebp
c010fb25:	89 e5                	mov    %esp,%ebp
c010fb27:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c010fb2a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fb2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb31:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb34:	89 04 24             	mov    %eax,(%esp)
c010fb37:	e8 2f 03 00 00       	call   c010fe6b <vfs_lookup>
c010fb3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb43:	75 19                	jne    c010fb5e <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c010fb45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb48:	89 04 24             	mov    %eax,(%esp)
c010fb4b:	e8 dd fe ff ff       	call   c010fa2d <vfs_set_curdir>
c010fb50:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010fb53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb56:	89 04 24             	mov    %eax,(%esp)
c010fb59:	e8 8b 08 00 00       	call   c01103e9 <inode_ref_dec>
    }
    return ret;
c010fb5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb61:	c9                   	leave  
c010fb62:	c3                   	ret    

c010fb63 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c010fb63:	55                   	push   %ebp
c010fb64:	89 e5                	mov    %esp,%ebp
c010fb66:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c010fb69:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fb6c:	89 04 24             	mov    %eax,(%esp)
c010fb6f:	e8 84 fe ff ff       	call   c010f9f8 <vfs_get_curdir>
c010fb74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb7b:	74 08                	je     c010fb85 <vfs_getcwd+0x22>
        return ret;
c010fb7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb80:	e9 3a 01 00 00       	jmp    c010fcbf <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c010fb85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb88:	8b 40 38             	mov    0x38(%eax),%eax
c010fb8b:	85 c0                	test   %eax,%eax
c010fb8d:	75 24                	jne    c010fbb3 <vfs_getcwd+0x50>
c010fb8f:	c7 44 24 0c d3 8a 11 	movl   $0xc0118ad3,0xc(%esp)
c010fb96:	c0 
c010fb97:	c7 44 24 08 a0 8a 11 	movl   $0xc0118aa0,0x8(%esp)
c010fb9e:	c0 
c010fb9f:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010fba6:	00 
c010fba7:	c7 04 24 b5 8a 11 c0 	movl   $0xc0118ab5,(%esp)
c010fbae:	e8 40 09 ff ff       	call   c01004f3 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c010fbb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbb6:	8b 40 38             	mov    0x38(%eax),%eax
c010fbb9:	89 04 24             	mov    %eax,(%esp)
c010fbbc:	e8 6c f7 ff ff       	call   c010f32d <vfs_get_devname>
c010fbc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c010fbc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbc7:	89 04 24             	mov    %eax,(%esp)
c010fbca:	e8 60 4f 00 00       	call   c0114b2f <strlen>
c010fbcf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010fbd6:	00 
c010fbd7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010fbde:	00 
c010fbdf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fbe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbe6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbea:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbed:	89 04 24             	mov    %eax,(%esp)
c010fbf0:	e8 1f be ff ff       	call   c010ba14 <iobuf_move>
c010fbf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fbfc:	74 05                	je     c010fc03 <vfs_getcwd+0xa0>
        goto out;
c010fbfe:	e9 ae 00 00 00       	jmp    c010fcb1 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c010fc03:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c010fc07:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010fc0e:	00 
c010fc0f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010fc16:	00 
c010fc17:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010fc1e:	00 
c010fc1f:	8d 45 e7             	lea    -0x19(%ebp),%eax
c010fc22:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc26:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc29:	89 04 24             	mov    %eax,(%esp)
c010fc2c:	e8 e3 bd ff ff       	call   c010ba14 <iobuf_move>
c010fc31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc38:	74 02                	je     c010fc3c <vfs_getcwd+0xd9>
        goto out;
c010fc3a:	eb 75                	jmp    c010fcb1 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c010fc3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fc42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fc46:	74 17                	je     c010fc5f <vfs_getcwd+0xfc>
c010fc48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc4b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fc4e:	85 c0                	test   %eax,%eax
c010fc50:	74 0d                	je     c010fc5f <vfs_getcwd+0xfc>
c010fc52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc55:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fc58:	8b 40 1c             	mov    0x1c(%eax),%eax
c010fc5b:	85 c0                	test   %eax,%eax
c010fc5d:	75 24                	jne    c010fc83 <vfs_getcwd+0x120>
c010fc5f:	c7 44 24 0c e8 8a 11 	movl   $0xc0118ae8,0xc(%esp)
c010fc66:	c0 
c010fc67:	c7 44 24 08 a0 8a 11 	movl   $0xc0118aa0,0x8(%esp)
c010fc6e:	c0 
c010fc6f:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c010fc76:	00 
c010fc77:	c7 04 24 b5 8a 11 c0 	movl   $0xc0118ab5,(%esp)
c010fc7e:	e8 70 08 ff ff       	call   c01004f3 <__panic>
c010fc83:	c7 44 24 04 39 8b 11 	movl   $0xc0118b39,0x4(%esp)
c010fc8a:	c0 
c010fc8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc8e:	89 04 24             	mov    %eax,(%esp)
c010fc91:	e8 41 09 00 00       	call   c01105d7 <inode_check>
c010fc96:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc99:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fc9c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010fc9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fca2:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010fca5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fca9:	89 14 24             	mov    %edx,(%esp)
c010fcac:	ff d0                	call   *%eax
c010fcae:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c010fcb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcb4:	89 04 24             	mov    %eax,(%esp)
c010fcb7:	e8 2d 07 00 00       	call   c01103e9 <inode_ref_dec>
    return ret;
c010fcbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fcbf:	c9                   	leave  
c010fcc0:	c3                   	ret    

c010fcc1 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010fcc1:	55                   	push   %ebp
c010fcc2:	89 e5                	mov    %esp,%ebp
c010fcc4:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c010fcc7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010fcce:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010fcd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010fcdc:	eb 32                	jmp    c010fd10 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010fcde:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fce1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fce4:	01 d0                	add    %edx,%eax
c010fce6:	0f b6 00             	movzbl (%eax),%eax
c010fce9:	3c 3a                	cmp    $0x3a,%al
c010fceb:	75 08                	jne    c010fcf5 <get_device+0x34>
c010fced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fcf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fcf3:	eb 2a                	jmp    c010fd1f <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010fcf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fcf8:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcfb:	01 d0                	add    %edx,%eax
c010fcfd:	0f b6 00             	movzbl (%eax),%eax
c010fd00:	3c 2f                	cmp    $0x2f,%al
c010fd02:	75 08                	jne    c010fd0c <get_device+0x4b>
c010fd04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd07:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fd0a:	eb 13                	jmp    c010fd1f <get_device+0x5e>
    for (i = 0; path[i] != '\0'; i ++) {
c010fd0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010fd10:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fd13:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd16:	01 d0                	add    %edx,%eax
c010fd18:	0f b6 00             	movzbl (%eax),%eax
c010fd1b:	84 c0                	test   %al,%al
c010fd1d:	75 bf                	jne    c010fcde <get_device+0x1d>
    }
    if (colon < 0 && slash != 0) {
c010fd1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd23:	79 1e                	jns    c010fd43 <get_device+0x82>
c010fd25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fd29:	74 18                	je     c010fd43 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c010fd2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd2e:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd31:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c010fd33:	8b 45 10             	mov    0x10(%ebp),%eax
c010fd36:	89 04 24             	mov    %eax,(%esp)
c010fd39:	e8 ba fc ff ff       	call   c010f9f8 <vfs_get_curdir>
c010fd3e:	e9 26 01 00 00       	jmp    c010fe69 <get_device+0x1a8>
    }
    if (colon > 0) {
c010fd43:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd47:	7e 42                	jle    c010fd8b <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c010fd49:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fd4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd4f:	01 d0                	add    %edx,%eax
c010fd51:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c010fd54:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010fd58:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fd5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd5e:	01 d0                	add    %edx,%eax
c010fd60:	0f b6 00             	movzbl (%eax),%eax
c010fd63:	3c 2f                	cmp    $0x2f,%al
c010fd65:	74 ed                	je     c010fd54 <get_device+0x93>
        *subpath = path + colon;
c010fd67:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fd6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd6d:	01 c2                	add    %eax,%edx
c010fd6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd72:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c010fd74:	8b 45 10             	mov    0x10(%ebp),%eax
c010fd77:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd7e:	89 04 24             	mov    %eax,(%esp)
c010fd81:	e8 8a f4 ff ff       	call   c010f210 <vfs_get_root>
c010fd86:	e9 de 00 00 00       	jmp    c010fe69 <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c010fd8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd8e:	0f b6 00             	movzbl (%eax),%eax
c010fd91:	3c 2f                	cmp    $0x2f,%al
c010fd93:	75 20                	jne    c010fdb5 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c010fd95:	8b 45 10             	mov    0x10(%ebp),%eax
c010fd98:	89 04 24             	mov    %eax,(%esp)
c010fd9b:	e8 56 0a 00 00       	call   c01107f6 <vfs_get_bootfs>
c010fda0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fda3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fda7:	0f 84 a1 00 00 00    	je     c010fe4e <get_device+0x18d>
            return ret;
c010fdad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fdb0:	e9 b4 00 00 00       	jmp    c010fe69 <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c010fdb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdb8:	0f b6 00             	movzbl (%eax),%eax
c010fdbb:	3c 3a                	cmp    $0x3a,%al
c010fdbd:	74 24                	je     c010fde3 <get_device+0x122>
c010fdbf:	c7 44 24 0c 44 8b 11 	movl   $0xc0118b44,0xc(%esp)
c010fdc6:	c0 
c010fdc7:	c7 44 24 08 51 8b 11 	movl   $0xc0118b51,0x8(%esp)
c010fdce:	c0 
c010fdcf:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010fdd6:	00 
c010fdd7:	c7 04 24 66 8b 11 c0 	movl   $0xc0118b66,(%esp)
c010fdde:	e8 10 07 ff ff       	call   c01004f3 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010fde3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010fde6:	89 04 24             	mov    %eax,(%esp)
c010fde9:	e8 0a fc ff ff       	call   c010f9f8 <vfs_get_curdir>
c010fdee:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fdf1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fdf5:	74 05                	je     c010fdfc <get_device+0x13b>
            return ret;
c010fdf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fdfa:	eb 6d                	jmp    c010fe69 <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c010fdfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fdff:	8b 40 38             	mov    0x38(%eax),%eax
c010fe02:	85 c0                	test   %eax,%eax
c010fe04:	75 24                	jne    c010fe2a <get_device+0x169>
c010fe06:	c7 44 24 0c 7e 8b 11 	movl   $0xc0118b7e,0xc(%esp)
c010fe0d:	c0 
c010fe0e:	c7 44 24 08 51 8b 11 	movl   $0xc0118b51,0x8(%esp)
c010fe15:	c0 
c010fe16:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c010fe1d:	00 
c010fe1e:	c7 04 24 66 8b 11 c0 	movl   $0xc0118b66,(%esp)
c010fe25:	e8 c9 06 ff ff       	call   c01004f3 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c010fe2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe2d:	8b 40 38             	mov    0x38(%eax),%eax
c010fe30:	8b 40 74             	mov    0x74(%eax),%eax
c010fe33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010fe36:	8b 52 38             	mov    0x38(%edx),%edx
c010fe39:	89 14 24             	mov    %edx,(%esp)
c010fe3c:	ff d0                	call   *%eax
c010fe3e:	8b 55 10             	mov    0x10(%ebp),%edx
c010fe41:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c010fe43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe46:	89 04 24             	mov    %eax,(%esp)
c010fe49:	e8 9b 05 00 00       	call   c01103e9 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c010fe4e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010fe52:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe55:	0f b6 00             	movzbl (%eax),%eax
c010fe58:	3c 2f                	cmp    $0x2f,%al
c010fe5a:	74 f2                	je     c010fe4e <get_device+0x18d>
    *subpath = path;
c010fe5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe5f:	8b 55 08             	mov    0x8(%ebp),%edx
c010fe62:	89 10                	mov    %edx,(%eax)
    return 0;
c010fe64:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe69:	c9                   	leave  
c010fe6a:	c3                   	ret    

c010fe6b <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c010fe6b:	55                   	push   %ebp
c010fe6c:	89 e5                	mov    %esp,%ebp
c010fe6e:	56                   	push   %esi
c010fe6f:	53                   	push   %ebx
c010fe70:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010fe73:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe76:	8d 55 ec             	lea    -0x14(%ebp),%edx
c010fe79:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe7d:	8d 75 08             	lea    0x8(%ebp),%esi
c010fe80:	89 74 24 04          	mov    %esi,0x4(%esp)
c010fe84:	89 04 24             	mov    %eax,(%esp)
c010fe87:	e8 35 fe ff ff       	call   c010fcc1 <get_device>
c010fe8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fe8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fe93:	74 08                	je     c010fe9d <vfs_lookup+0x32>
        return ret;
c010fe95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe98:	e9 a7 00 00 00       	jmp    c010ff44 <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c010fe9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fea0:	0f b6 00             	movzbl (%eax),%eax
c010fea3:	84 c0                	test   %al,%al
c010fea5:	0f 84 8c 00 00 00    	je     c010ff37 <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c010feab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010feb1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010feb5:	74 17                	je     c010fece <vfs_lookup+0x63>
c010feb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010feba:	8b 40 3c             	mov    0x3c(%eax),%eax
c010febd:	85 c0                	test   %eax,%eax
c010febf:	74 0d                	je     c010fece <vfs_lookup+0x63>
c010fec1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fec4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fec7:	8b 40 38             	mov    0x38(%eax),%eax
c010feca:	85 c0                	test   %eax,%eax
c010fecc:	75 24                	jne    c010fef2 <vfs_lookup+0x87>
c010fece:	c7 44 24 0c 94 8b 11 	movl   $0xc0118b94,0xc(%esp)
c010fed5:	c0 
c010fed6:	c7 44 24 08 51 8b 11 	movl   $0xc0118b51,0x8(%esp)
c010fedd:	c0 
c010fede:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c010fee5:	00 
c010fee6:	c7 04 24 66 8b 11 c0 	movl   $0xc0118b66,(%esp)
c010feed:	e8 01 06 ff ff       	call   c01004f3 <__panic>
c010fef2:	c7 44 24 04 e3 8b 11 	movl   $0xc0118be3,0x4(%esp)
c010fef9:	c0 
c010fefa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fefd:	89 04 24             	mov    %eax,(%esp)
c010ff00:	e8 d2 06 00 00       	call   c01105d7 <inode_check>
c010ff05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ff08:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff0b:	8b 40 38             	mov    0x38(%eax),%eax
c010ff0e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010ff11:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ff14:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ff17:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010ff1b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ff1f:	89 14 24             	mov    %edx,(%esp)
c010ff22:	ff d0                	call   *%eax
c010ff24:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010ff27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff2a:	89 04 24             	mov    %eax,(%esp)
c010ff2d:	e8 b7 04 00 00       	call   c01103e9 <inode_ref_dec>
        return ret;
c010ff32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff35:	eb 0d                	jmp    c010ff44 <vfs_lookup+0xd9>
    }
    *node_store = node;
c010ff37:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ff3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff3d:	89 10                	mov    %edx,(%eax)
    return 0;
c010ff3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff44:	83 c4 20             	add    $0x20,%esp
c010ff47:	5b                   	pop    %ebx
c010ff48:	5e                   	pop    %esi
c010ff49:	5d                   	pop    %ebp
c010ff4a:	c3                   	ret    

c010ff4b <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c010ff4b:	55                   	push   %ebp
c010ff4c:	89 e5                	mov    %esp,%ebp
c010ff4e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010ff51:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff54:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010ff57:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ff5b:	8d 4d 08             	lea    0x8(%ebp),%ecx
c010ff5e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ff62:	89 04 24             	mov    %eax,(%esp)
c010ff65:	e8 57 fd ff ff       	call   c010fcc1 <get_device>
c010ff6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ff6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff71:	74 05                	je     c010ff78 <vfs_lookup_parent+0x2d>
        return ret;
c010ff73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff76:	eb 15                	jmp    c010ff8d <vfs_lookup_parent+0x42>
    }
    *endp = path;
c010ff78:	8b 55 08             	mov    0x8(%ebp),%edx
c010ff7b:	8b 45 10             	mov    0x10(%ebp),%eax
c010ff7e:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c010ff80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ff83:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff86:	89 10                	mov    %edx,(%eax)
    return 0;
c010ff88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff8d:	c9                   	leave  
c010ff8e:	c3                   	ret    

c010ff8f <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010ff8f:	55                   	push   %ebp
c010ff90:	89 e5                	mov    %esp,%ebp
c010ff92:	53                   	push   %ebx
c010ff93:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010ff96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010ff9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffa0:	83 e0 03             	and    $0x3,%eax
c010ffa3:	85 c0                	test   %eax,%eax
c010ffa5:	74 18                	je     c010ffbf <vfs_open+0x30>
c010ffa7:	83 f8 02             	cmp    $0x2,%eax
c010ffaa:	77 09                	ja     c010ffb5 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ffac:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ffb3:	eb 0b                	jmp    c010ffc0 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010ffb5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ffba:	e9 ba 02 00 00       	jmp    c0110279 <vfs_open+0x2ea>
        break;
c010ffbf:	90                   	nop
    }

    if (open_flags & O_TRUNC) {
c010ffc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffc3:	83 e0 10             	and    $0x10,%eax
c010ffc6:	85 c0                	test   %eax,%eax
c010ffc8:	74 10                	je     c010ffda <vfs_open+0x4b>
        if (!can_write) {
c010ffca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ffce:	75 0a                	jne    c010ffda <vfs_open+0x4b>
            return -E_INVAL;
c010ffd0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ffd5:	e9 9f 02 00 00       	jmp    c0110279 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010ffda:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffdd:	83 e0 08             	and    $0x8,%eax
c010ffe0:	85 c0                	test   %eax,%eax
c010ffe2:	0f 95 c0             	setne  %al
c010ffe5:	0f b6 c0             	movzbl %al,%eax
c010ffe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ffeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffee:	83 e0 04             	and    $0x4,%eax
c010fff1:	85 c0                	test   %eax,%eax
c010fff3:	0f 95 c0             	setne  %al
c010fff6:	0f b6 c0             	movzbl %al,%eax
c010fff9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010fffc:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ffff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110003:	8b 45 08             	mov    0x8(%ebp),%eax
c0110006:	89 04 24             	mov    %eax,(%esp)
c0110009:	e8 5d fe ff ff       	call   c010fe6b <vfs_lookup>
c011000e:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c0110011:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110015:	0f 84 cc 00 00 00    	je     c01100e7 <vfs_open+0x158>
        if (ret == -16 && (create)) {
c011001b:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c011001f:	0f 85 ba 00 00 00    	jne    c01100df <vfs_open+0x150>
c0110025:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110029:	0f 84 b0 00 00 00    	je     c01100df <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c011002f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0110032:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110036:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0110039:	89 44 24 04          	mov    %eax,0x4(%esp)
c011003d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110040:	89 04 24             	mov    %eax,(%esp)
c0110043:	e8 03 ff ff ff       	call   c010ff4b <vfs_lookup_parent>
c0110048:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011004b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011004f:	74 08                	je     c0110059 <vfs_open+0xca>
                return ret;
c0110051:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110054:	e9 20 02 00 00       	jmp    c0110279 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c0110059:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011005c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011005f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110063:	74 17                	je     c011007c <vfs_open+0xed>
c0110065:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110068:	8b 40 3c             	mov    0x3c(%eax),%eax
c011006b:	85 c0                	test   %eax,%eax
c011006d:	74 0d                	je     c011007c <vfs_open+0xed>
c011006f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110072:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110075:	8b 40 34             	mov    0x34(%eax),%eax
c0110078:	85 c0                	test   %eax,%eax
c011007a:	75 24                	jne    c01100a0 <vfs_open+0x111>
c011007c:	c7 44 24 0c ec 8b 11 	movl   $0xc0118bec,0xc(%esp)
c0110083:	c0 
c0110084:	c7 44 24 08 3b 8c 11 	movl   $0xc0118c3b,0x8(%esp)
c011008b:	c0 
c011008c:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110093:	00 
c0110094:	c7 04 24 50 8c 11 c0 	movl   $0xc0118c50,(%esp)
c011009b:	e8 53 04 ff ff       	call   c01004f3 <__panic>
c01100a0:	c7 44 24 04 66 8c 11 	movl   $0xc0118c66,0x4(%esp)
c01100a7:	c0 
c01100a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01100ab:	89 04 24             	mov    %eax,(%esp)
c01100ae:	e8 24 05 00 00       	call   c01105d7 <inode_check>
c01100b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01100b6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01100b9:	8b 40 34             	mov    0x34(%eax),%eax
c01100bc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01100bf:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01100c2:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c01100c5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01100c9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01100cc:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01100d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01100d4:	89 14 24             	mov    %edx,(%esp)
c01100d7:	ff d0                	call   *%eax
c01100d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (ret == -16 && (create)) {
c01100dc:	90                   	nop
c01100dd:	eb 1e                	jmp    c01100fd <vfs_open+0x16e>
        } else return ret;
c01100df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100e2:	e9 92 01 00 00       	jmp    c0110279 <vfs_open+0x2ea>
    } else if (excl && create) {
c01100e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01100eb:	74 10                	je     c01100fd <vfs_open+0x16e>
c01100ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01100f1:	74 0a                	je     c01100fd <vfs_open+0x16e>
        return -E_EXISTS;
c01100f3:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c01100f8:	e9 7c 01 00 00       	jmp    c0110279 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c01100fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110100:	85 c0                	test   %eax,%eax
c0110102:	75 24                	jne    c0110128 <vfs_open+0x199>
c0110104:	c7 44 24 0c 6d 8c 11 	movl   $0xc0118c6d,0xc(%esp)
c011010b:	c0 
c011010c:	c7 44 24 08 3b 8c 11 	movl   $0xc0118c3b,0x8(%esp)
c0110113:	c0 
c0110114:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c011011b:	00 
c011011c:	c7 04 24 50 8c 11 c0 	movl   $0xc0118c50,(%esp)
c0110123:	e8 cb 03 ff ff       	call   c01004f3 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c0110128:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011012b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011012e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0110132:	74 17                	je     c011014b <vfs_open+0x1bc>
c0110134:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110137:	8b 40 3c             	mov    0x3c(%eax),%eax
c011013a:	85 c0                	test   %eax,%eax
c011013c:	74 0d                	je     c011014b <vfs_open+0x1bc>
c011013e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110141:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110144:	8b 40 04             	mov    0x4(%eax),%eax
c0110147:	85 c0                	test   %eax,%eax
c0110149:	75 24                	jne    c011016f <vfs_open+0x1e0>
c011014b:	c7 44 24 0c 7c 8c 11 	movl   $0xc0118c7c,0xc(%esp)
c0110152:	c0 
c0110153:	c7 44 24 08 3b 8c 11 	movl   $0xc0118c3b,0x8(%esp)
c011015a:	c0 
c011015b:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c0110162:	00 
c0110163:	c7 04 24 50 8c 11 c0 	movl   $0xc0118c50,(%esp)
c011016a:	e8 84 03 ff ff       	call   c01004f3 <__panic>
c011016f:	c7 44 24 04 c9 8c 11 	movl   $0xc0118cc9,0x4(%esp)
c0110176:	c0 
c0110177:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011017a:	89 04 24             	mov    %eax,(%esp)
c011017d:	e8 55 04 00 00       	call   c01105d7 <inode_check>
c0110182:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110185:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110188:	8b 40 04             	mov    0x4(%eax),%eax
c011018b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011018e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0110191:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110195:	89 14 24             	mov    %edx,(%esp)
c0110198:	ff d0                	call   *%eax
c011019a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011019d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01101a1:	74 13                	je     c01101b6 <vfs_open+0x227>
        vop_ref_dec(node);
c01101a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101a6:	89 04 24             	mov    %eax,(%esp)
c01101a9:	e8 3b 02 00 00       	call   c01103e9 <inode_ref_dec>
        return ret;
c01101ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01101b1:	e9 c3 00 00 00       	jmp    c0110279 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c01101b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101b9:	89 04 24             	mov    %eax,(%esp)
c01101bc:	e8 15 03 00 00       	call   c01104d6 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c01101c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101c4:	83 e0 10             	and    $0x10,%eax
c01101c7:	85 c0                	test   %eax,%eax
c01101c9:	75 0a                	jne    c01101d5 <vfs_open+0x246>
c01101cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01101cf:	0f 84 97 00 00 00    	je     c011026c <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01101d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01101db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01101df:	74 17                	je     c01101f8 <vfs_open+0x269>
c01101e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101e4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101e7:	85 c0                	test   %eax,%eax
c01101e9:	74 0d                	je     c01101f8 <vfs_open+0x269>
c01101eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101ee:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101f1:	8b 40 30             	mov    0x30(%eax),%eax
c01101f4:	85 c0                	test   %eax,%eax
c01101f6:	75 24                	jne    c011021c <vfs_open+0x28d>
c01101f8:	c7 44 24 0c d0 8c 11 	movl   $0xc0118cd0,0xc(%esp)
c01101ff:	c0 
c0110200:	c7 44 24 08 3b 8c 11 	movl   $0xc0118c3b,0x8(%esp)
c0110207:	c0 
c0110208:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c011020f:	00 
c0110210:	c7 04 24 50 8c 11 c0 	movl   $0xc0118c50,(%esp)
c0110217:	e8 d7 02 ff ff       	call   c01004f3 <__panic>
c011021c:	c7 44 24 04 21 8d 11 	movl   $0xc0118d21,0x4(%esp)
c0110223:	c0 
c0110224:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110227:	89 04 24             	mov    %eax,(%esp)
c011022a:	e8 a8 03 00 00       	call   c01105d7 <inode_check>
c011022f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110232:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110235:	8b 40 30             	mov    0x30(%eax),%eax
c0110238:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011023b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110242:	00 
c0110243:	89 14 24             	mov    %edx,(%esp)
c0110246:	ff d0                	call   *%eax
c0110248:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011024b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011024f:	74 1b                	je     c011026c <vfs_open+0x2dd>
            vop_open_dec(node);
c0110251:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110254:	89 04 24             	mov    %eax,(%esp)
c0110257:	e8 94 02 00 00       	call   c01104f0 <inode_open_dec>
            vop_ref_dec(node);
c011025c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011025f:	89 04 24             	mov    %eax,(%esp)
c0110262:	e8 82 01 00 00       	call   c01103e9 <inode_ref_dec>
            return ret;
c0110267:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011026a:	eb 0d                	jmp    c0110279 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c011026c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011026f:	8b 45 10             	mov    0x10(%ebp),%eax
c0110272:	89 10                	mov    %edx,(%eax)
    return 0;
c0110274:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110279:	83 c4 44             	add    $0x44,%esp
c011027c:	5b                   	pop    %ebx
c011027d:	5d                   	pop    %ebp
c011027e:	c3                   	ret    

c011027f <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c011027f:	55                   	push   %ebp
c0110280:	89 e5                	mov    %esp,%ebp
c0110282:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c0110285:	8b 45 08             	mov    0x8(%ebp),%eax
c0110288:	89 04 24             	mov    %eax,(%esp)
c011028b:	e8 60 02 00 00       	call   c01104f0 <inode_open_dec>
    vop_ref_dec(node);
c0110290:	8b 45 08             	mov    0x8(%ebp),%eax
c0110293:	89 04 24             	mov    %eax,(%esp)
c0110296:	e8 4e 01 00 00       	call   c01103e9 <inode_ref_dec>
    return 0;
c011029b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01102a0:	c9                   	leave  
c01102a1:	c3                   	ret    

c01102a2 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c01102a2:	55                   	push   %ebp
c01102a3:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102a5:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102aa:	5d                   	pop    %ebp
c01102ab:	c3                   	ret    

c01102ac <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c01102ac:	55                   	push   %ebp
c01102ad:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102af:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102b4:	5d                   	pop    %ebp
c01102b5:	c3                   	ret    

c01102b6 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c01102b6:	55                   	push   %ebp
c01102b7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102b9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102be:	5d                   	pop    %ebp
c01102bf:	c3                   	ret    

c01102c0 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c01102c0:	55                   	push   %ebp
c01102c1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102c3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102c8:	5d                   	pop    %ebp
c01102c9:	c3                   	ret    

c01102ca <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c01102ca:	55                   	push   %ebp
c01102cb:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102cd:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102d2:	5d                   	pop    %ebp
c01102d3:	c3                   	ret    

c01102d4 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c01102d4:	55                   	push   %ebp
c01102d5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102d7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102dc:	5d                   	pop    %ebp
c01102dd:	c3                   	ret    

c01102de <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01102de:	55                   	push   %ebp
c01102df:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01102e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01102e4:	8b 40 30             	mov    0x30(%eax),%eax
}
c01102e7:	5d                   	pop    %ebp
c01102e8:	c3                   	ret    

c01102e9 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c01102e9:	55                   	push   %ebp
c01102ea:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c01102ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01102ef:	8b 40 34             	mov    0x34(%eax),%eax
}
c01102f2:	5d                   	pop    %ebp
c01102f3:	c3                   	ret    

c01102f4 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c01102f4:	55                   	push   %ebp
c01102f5:	89 e5                	mov    %esp,%ebp
c01102f7:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c01102fa:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0110301:	e8 fc 58 ff ff       	call   c0105c02 <kmalloc>
c0110306:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110309:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011030d:	74 09                	je     c0110318 <__alloc_inode+0x24>
        node->in_type = type;
c011030f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110315:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c0110318:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011031b:	c9                   	leave  
c011031c:	c3                   	ret    

c011031d <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c011031d:	55                   	push   %ebp
c011031e:	89 e5                	mov    %esp,%ebp
c0110320:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c0110323:	8b 45 08             	mov    0x8(%ebp),%eax
c0110326:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c011032d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110330:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c0110337:	8b 45 08             	mov    0x8(%ebp),%eax
c011033a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011033d:	89 50 3c             	mov    %edx,0x3c(%eax)
c0110340:	8b 45 08             	mov    0x8(%ebp),%eax
c0110343:	8b 55 10             	mov    0x10(%ebp),%edx
c0110346:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c0110349:	8b 45 08             	mov    0x8(%ebp),%eax
c011034c:	89 04 24             	mov    %eax,(%esp)
c011034f:	e8 7b 00 00 00       	call   c01103cf <inode_ref_inc>
}
c0110354:	c9                   	leave  
c0110355:	c3                   	ret    

c0110356 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c0110356:	55                   	push   %ebp
c0110357:	89 e5                	mov    %esp,%ebp
c0110359:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c011035c:	8b 45 08             	mov    0x8(%ebp),%eax
c011035f:	89 04 24             	mov    %eax,(%esp)
c0110362:	e8 77 ff ff ff       	call   c01102de <inode_ref_count>
c0110367:	85 c0                	test   %eax,%eax
c0110369:	74 24                	je     c011038f <inode_kill+0x39>
c011036b:	c7 44 24 0c 2c 8d 11 	movl   $0xc0118d2c,0xc(%esp)
c0110372:	c0 
c0110373:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c011037a:	c0 
c011037b:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c0110382:	00 
c0110383:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011038a:	e8 64 01 ff ff       	call   c01004f3 <__panic>
    assert(inode_open_count(node) == 0);
c011038f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110392:	89 04 24             	mov    %eax,(%esp)
c0110395:	e8 4f ff ff ff       	call   c01102e9 <inode_open_count>
c011039a:	85 c0                	test   %eax,%eax
c011039c:	74 24                	je     c01103c2 <inode_kill+0x6c>
c011039e:	c7 44 24 0c 70 8d 11 	movl   $0xc0118d70,0xc(%esp)
c01103a5:	c0 
c01103a6:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c01103ad:	c0 
c01103ae:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c01103b5:	00 
c01103b6:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c01103bd:	e8 31 01 ff ff       	call   c01004f3 <__panic>
    kfree(node);
c01103c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01103c5:	89 04 24             	mov    %eax,(%esp)
c01103c8:	e8 50 58 ff ff       	call   c0105c1d <kfree>
}
c01103cd:	c9                   	leave  
c01103ce:	c3                   	ret    

c01103cf <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c01103cf:	55                   	push   %ebp
c01103d0:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c01103d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01103d5:	8b 40 30             	mov    0x30(%eax),%eax
c01103d8:	8d 50 01             	lea    0x1(%eax),%edx
c01103db:	8b 45 08             	mov    0x8(%ebp),%eax
c01103de:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c01103e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01103e4:	8b 40 30             	mov    0x30(%eax),%eax
}
c01103e7:	5d                   	pop    %ebp
c01103e8:	c3                   	ret    

c01103e9 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c01103e9:	55                   	push   %ebp
c01103ea:	89 e5                	mov    %esp,%ebp
c01103ec:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c01103ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01103f2:	89 04 24             	mov    %eax,(%esp)
c01103f5:	e8 e4 fe ff ff       	call   c01102de <inode_ref_count>
c01103fa:	85 c0                	test   %eax,%eax
c01103fc:	7f 24                	jg     c0110422 <inode_ref_dec+0x39>
c01103fe:	c7 44 24 0c 8c 8d 11 	movl   $0xc0118d8c,0xc(%esp)
c0110405:	c0 
c0110406:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c011040d:	c0 
c011040e:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c0110415:	00 
c0110416:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011041d:	e8 d1 00 ff ff       	call   c01004f3 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c0110422:	8b 45 08             	mov    0x8(%ebp),%eax
c0110425:	8b 40 30             	mov    0x30(%eax),%eax
c0110428:	8d 50 ff             	lea    -0x1(%eax),%edx
c011042b:	8b 45 08             	mov    0x8(%ebp),%eax
c011042e:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c0110431:	8b 45 08             	mov    0x8(%ebp),%eax
c0110434:	8b 40 30             	mov    0x30(%eax),%eax
c0110437:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c011043a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011043e:	0f 85 8d 00 00 00    	jne    c01104d1 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c0110444:	8b 45 08             	mov    0x8(%ebp),%eax
c0110447:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011044a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011044e:	74 17                	je     c0110467 <inode_ref_dec+0x7e>
c0110450:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110453:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110456:	85 c0                	test   %eax,%eax
c0110458:	74 0d                	je     c0110467 <inode_ref_dec+0x7e>
c011045a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011045d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110460:	8b 40 24             	mov    0x24(%eax),%eax
c0110463:	85 c0                	test   %eax,%eax
c0110465:	75 24                	jne    c011048b <inode_ref_dec+0xa2>
c0110467:	c7 44 24 0c a8 8d 11 	movl   $0xc0118da8,0xc(%esp)
c011046e:	c0 
c011046f:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c0110476:	c0 
c0110477:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c011047e:	00 
c011047f:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c0110486:	e8 68 00 ff ff       	call   c01004f3 <__panic>
c011048b:	c7 44 24 04 f8 8d 11 	movl   $0xc0118df8,0x4(%esp)
c0110492:	c0 
c0110493:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110496:	89 04 24             	mov    %eax,(%esp)
c0110499:	e8 39 01 00 00       	call   c01105d7 <inode_check>
c011049e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104a1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104a4:	8b 40 24             	mov    0x24(%eax),%eax
c01104a7:	8b 55 08             	mov    0x8(%ebp),%edx
c01104aa:	89 14 24             	mov    %edx,(%esp)
c01104ad:	ff d0                	call   *%eax
c01104af:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01104b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01104b6:	74 19                	je     c01104d1 <inode_ref_dec+0xe8>
c01104b8:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c01104bc:	74 13                	je     c01104d1 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c01104be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01104c5:	c7 04 24 00 8e 11 c0 	movl   $0xc0118e00,(%esp)
c01104cc:	e8 cb fe fe ff       	call   c010039c <cprintf>
        }
    }
    return ref_count;
c01104d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01104d4:	c9                   	leave  
c01104d5:	c3                   	ret    

c01104d6 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c01104d6:	55                   	push   %ebp
c01104d7:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c01104d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01104dc:	8b 40 34             	mov    0x34(%eax),%eax
c01104df:	8d 50 01             	lea    0x1(%eax),%edx
c01104e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01104e5:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c01104e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01104eb:	8b 40 34             	mov    0x34(%eax),%eax
}
c01104ee:	5d                   	pop    %ebp
c01104ef:	c3                   	ret    

c01104f0 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c01104f0:	55                   	push   %ebp
c01104f1:	89 e5                	mov    %esp,%ebp
c01104f3:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c01104f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01104f9:	89 04 24             	mov    %eax,(%esp)
c01104fc:	e8 e8 fd ff ff       	call   c01102e9 <inode_open_count>
c0110501:	85 c0                	test   %eax,%eax
c0110503:	7f 24                	jg     c0110529 <inode_open_dec+0x39>
c0110505:	c7 44 24 0c 20 8e 11 	movl   $0xc0118e20,0xc(%esp)
c011050c:	c0 
c011050d:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c0110514:	c0 
c0110515:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c011051c:	00 
c011051d:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c0110524:	e8 ca ff fe ff       	call   c01004f3 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c0110529:	8b 45 08             	mov    0x8(%ebp),%eax
c011052c:	8b 40 34             	mov    0x34(%eax),%eax
c011052f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0110532:	8b 45 08             	mov    0x8(%ebp),%eax
c0110535:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c0110538:	8b 45 08             	mov    0x8(%ebp),%eax
c011053b:	8b 40 34             	mov    0x34(%eax),%eax
c011053e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c0110541:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110545:	0f 85 87 00 00 00    	jne    c01105d2 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c011054b:	8b 45 08             	mov    0x8(%ebp),%eax
c011054e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110551:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110555:	74 17                	je     c011056e <inode_open_dec+0x7e>
c0110557:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011055a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011055d:	85 c0                	test   %eax,%eax
c011055f:	74 0d                	je     c011056e <inode_open_dec+0x7e>
c0110561:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110564:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110567:	8b 40 08             	mov    0x8(%eax),%eax
c011056a:	85 c0                	test   %eax,%eax
c011056c:	75 24                	jne    c0110592 <inode_open_dec+0xa2>
c011056e:	c7 44 24 0c 3c 8e 11 	movl   $0xc0118e3c,0xc(%esp)
c0110575:	c0 
c0110576:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c011057d:	c0 
c011057e:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0110585:	00 
c0110586:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011058d:	e8 61 ff fe ff       	call   c01004f3 <__panic>
c0110592:	c7 44 24 04 8a 8e 11 	movl   $0xc0118e8a,0x4(%esp)
c0110599:	c0 
c011059a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011059d:	89 04 24             	mov    %eax,(%esp)
c01105a0:	e8 32 00 00 00       	call   c01105d7 <inode_check>
c01105a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01105a8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105ab:	8b 40 08             	mov    0x8(%eax),%eax
c01105ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01105b1:	89 14 24             	mov    %edx,(%esp)
c01105b4:	ff d0                	call   *%eax
c01105b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01105b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01105bd:	74 13                	je     c01105d2 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c01105bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01105c6:	c7 04 24 90 8e 11 c0 	movl   $0xc0118e90,(%esp)
c01105cd:	e8 ca fd fe ff       	call   c010039c <cprintf>
        }
    }
    return open_count;
c01105d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01105d5:	c9                   	leave  
c01105d6:	c3                   	ret    

c01105d7 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c01105d7:	55                   	push   %ebp
c01105d8:	89 e5                	mov    %esp,%ebp
c01105da:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c01105dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01105e1:	74 0a                	je     c01105ed <inode_check+0x16>
c01105e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01105e6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105e9:	85 c0                	test   %eax,%eax
c01105eb:	75 24                	jne    c0110611 <inode_check+0x3a>
c01105ed:	c7 44 24 0c b0 8e 11 	movl   $0xc0118eb0,0xc(%esp)
c01105f4:	c0 
c01105f5:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c01105fc:	c0 
c01105fd:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c0110604:	00 
c0110605:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011060c:	e8 e2 fe fe ff       	call   c01004f3 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c0110611:	8b 45 08             	mov    0x8(%ebp),%eax
c0110614:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110617:	8b 00                	mov    (%eax),%eax
c0110619:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c011061e:	74 24                	je     c0110644 <inode_check+0x6d>
c0110620:	c7 44 24 0c d8 8e 11 	movl   $0xc0118ed8,0xc(%esp)
c0110627:	c0 
c0110628:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c011062f:	c0 
c0110630:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0110637:	00 
c0110638:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011063f:	e8 af fe fe ff       	call   c01004f3 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c0110644:	8b 45 08             	mov    0x8(%ebp),%eax
c0110647:	89 04 24             	mov    %eax,(%esp)
c011064a:	e8 8f fc ff ff       	call   c01102de <inode_ref_count>
c011064f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110652:	8b 45 08             	mov    0x8(%ebp),%eax
c0110655:	89 04 24             	mov    %eax,(%esp)
c0110658:	e8 8c fc ff ff       	call   c01102e9 <inode_open_count>
c011065d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c0110660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110663:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110666:	7c 06                	jl     c011066e <inode_check+0x97>
c0110668:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011066c:	79 24                	jns    c0110692 <inode_check+0xbb>
c011066e:	c7 44 24 0c 00 8f 11 	movl   $0xc0118f00,0xc(%esp)
c0110675:	c0 
c0110676:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c011067d:	c0 
c011067e:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c0110685:	00 
c0110686:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c011068d:	e8 61 fe fe ff       	call   c01004f3 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c0110692:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c0110699:	7f 09                	jg     c01106a4 <inode_check+0xcd>
c011069b:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c01106a2:	7e 24                	jle    c01106c8 <inode_check+0xf1>
c01106a4:	c7 44 24 0c 2c 8f 11 	movl   $0xc0118f2c,0xc(%esp)
c01106ab:	c0 
c01106ac:	c7 44 24 08 47 8d 11 	movl   $0xc0118d47,0x8(%esp)
c01106b3:	c0 
c01106b4:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c01106bb:	00 
c01106bc:	c7 04 24 5c 8d 11 c0 	movl   $0xc0118d5c,(%esp)
c01106c3:	e8 2b fe fe ff       	call   c01004f3 <__panic>
}
c01106c8:	c9                   	leave  
c01106c9:	c3                   	ret    

c01106ca <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c01106ca:	55                   	push   %ebp
c01106cb:	89 e5                	mov    %esp,%ebp
c01106cd:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c01106d0:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c01106d7:	e8 26 55 ff ff       	call   c0105c02 <kmalloc>
c01106dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106e3:	74 09                	je     c01106ee <__alloc_fs+0x24>
        fs->fs_type = type;
c01106e5:	8b 55 08             	mov    0x8(%ebp),%edx
c01106e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106eb:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c01106ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01106f1:	c9                   	leave  
c01106f2:	c3                   	ret    

c01106f3 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c01106f3:	55                   	push   %ebp
c01106f4:	89 e5                	mov    %esp,%ebp
c01106f6:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c01106f9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110700:	00 
c0110701:	c7 04 24 cc 50 15 c0 	movl   $0xc01550cc,(%esp)
c0110708:	e8 ef 97 ff ff       	call   c0109efc <sem_init>
    vfs_devlist_init();
c011070d:	e8 4e ea ff ff       	call   c010f160 <vfs_devlist_init>
}
c0110712:	c9                   	leave  
c0110713:	c3                   	ret    

c0110714 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c0110714:	55                   	push   %ebp
c0110715:	89 e5                	mov    %esp,%ebp
c0110717:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c011071a:	c7 04 24 cc 50 15 c0 	movl   $0xc01550cc,(%esp)
c0110721:	e8 64 99 ff ff       	call   c010a08a <down>
}
c0110726:	c9                   	leave  
c0110727:	c3                   	ret    

c0110728 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c0110728:	55                   	push   %ebp
c0110729:	89 e5                	mov    %esp,%ebp
c011072b:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c011072e:	c7 04 24 cc 50 15 c0 	movl   $0xc01550cc,(%esp)
c0110735:	e8 35 99 ff ff       	call   c010a06f <up>
}
c011073a:	c9                   	leave  
c011073b:	c3                   	ret    

c011073c <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c011073c:	55                   	push   %ebp
c011073d:	89 e5                	mov    %esp,%ebp
c011073f:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c0110742:	e8 cd ff ff ff       	call   c0110714 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c0110747:	a1 d8 50 15 c0       	mov    0xc01550d8,%eax
c011074c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011074f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110752:	a3 d8 50 15 c0       	mov    %eax,0xc01550d8
    }
    unlock_bootfs();
c0110757:	e8 cc ff ff ff       	call   c0110728 <unlock_bootfs>
    if (old != NULL) {
c011075c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110760:	74 0b                	je     c011076d <change_bootfs+0x31>
        vop_ref_dec(old);
c0110762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110765:	89 04 24             	mov    %eax,(%esp)
c0110768:	e8 7c fc ff ff       	call   c01103e9 <inode_ref_dec>
    }
}
c011076d:	c9                   	leave  
c011076e:	c3                   	ret    

c011076f <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c011076f:	55                   	push   %ebp
c0110770:	89 e5                	mov    %esp,%ebp
c0110772:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c0110775:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c011077c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110780:	74 62                	je     c01107e4 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c0110782:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110789:	00 
c011078a:	8b 45 08             	mov    0x8(%ebp),%eax
c011078d:	89 04 24             	mov    %eax,(%esp)
c0110790:	e8 31 45 00 00       	call   c0114cc6 <strchr>
c0110795:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110798:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011079c:	74 0d                	je     c01107ab <vfs_set_bootfs+0x3c>
c011079e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107a1:	83 c0 01             	add    $0x1,%eax
c01107a4:	0f b6 00             	movzbl (%eax),%eax
c01107a7:	84 c0                	test   %al,%al
c01107a9:	74 07                	je     c01107b2 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c01107ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01107b0:	eb 42                	jmp    c01107f4 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c01107b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01107b5:	89 04 24             	mov    %eax,(%esp)
c01107b8:	e8 67 f3 ff ff       	call   c010fb24 <vfs_chdir>
c01107bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01107c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01107c4:	74 05                	je     c01107cb <vfs_set_bootfs+0x5c>
            return ret;
c01107c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107c9:	eb 29                	jmp    c01107f4 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c01107cb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01107ce:	89 04 24             	mov    %eax,(%esp)
c01107d1:	e8 22 f2 ff ff       	call   c010f9f8 <vfs_get_curdir>
c01107d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01107d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01107dd:	74 05                	je     c01107e4 <vfs_set_bootfs+0x75>
            return ret;
c01107df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107e2:	eb 10                	jmp    c01107f4 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c01107e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01107e7:	89 04 24             	mov    %eax,(%esp)
c01107ea:	e8 4d ff ff ff       	call   c011073c <change_bootfs>
    return 0;
c01107ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01107f4:	c9                   	leave  
c01107f5:	c3                   	ret    

c01107f6 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c01107f6:	55                   	push   %ebp
c01107f7:	89 e5                	mov    %esp,%ebp
c01107f9:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c01107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c0110803:	a1 d8 50 15 c0       	mov    0xc01550d8,%eax
c0110808:	85 c0                	test   %eax,%eax
c011080a:	74 25                	je     c0110831 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c011080c:	e8 03 ff ff ff       	call   c0110714 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c0110811:	a1 d8 50 15 c0       	mov    0xc01550d8,%eax
c0110816:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110819:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011081d:	74 0d                	je     c011082c <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c011081f:	a1 d8 50 15 c0       	mov    0xc01550d8,%eax
c0110824:	89 04 24             	mov    %eax,(%esp)
c0110827:	e8 a3 fb ff ff       	call   c01103cf <inode_ref_inc>
            }
        }
        unlock_bootfs();
c011082c:	e8 f7 fe ff ff       	call   c0110728 <unlock_bootfs>
    }
    if (node == NULL) {
c0110831:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110835:	75 07                	jne    c011083e <vfs_get_bootfs+0x48>
        return -E_NOENT;
c0110837:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c011083c:	eb 0d                	jmp    c011084b <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c011083e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110841:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110844:	89 10                	mov    %edx,(%eax)
    return 0;
c0110846:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011084b:	c9                   	leave  
c011084c:	c3                   	ret    

c011084d <__intr_save>:
__intr_save(void) {
c011084d:	55                   	push   %ebp
c011084e:	89 e5                	mov    %esp,%ebp
c0110850:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0110853:	9c                   	pushf  
c0110854:	58                   	pop    %eax
c0110855:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0110858:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c011085b:	25 00 02 00 00       	and    $0x200,%eax
c0110860:	85 c0                	test   %eax,%eax
c0110862:	74 0c                	je     c0110870 <__intr_save+0x23>
        intr_disable();
c0110864:	e8 9f 1a ff ff       	call   c0102308 <intr_disable>
        return 1;
c0110869:	b8 01 00 00 00       	mov    $0x1,%eax
c011086e:	eb 05                	jmp    c0110875 <__intr_save+0x28>
    return 0;
c0110870:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110875:	c9                   	leave  
c0110876:	c3                   	ret    

c0110877 <__intr_restore>:
__intr_restore(bool flag) {
c0110877:	55                   	push   %ebp
c0110878:	89 e5                	mov    %esp,%ebp
c011087a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c011087d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110881:	74 05                	je     c0110888 <__intr_restore+0x11>
        intr_enable();
c0110883:	e8 7a 1a ff ff       	call   c0102302 <intr_enable>
}
c0110888:	c9                   	leave  
c0110889:	c3                   	ret    

c011088a <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c011088a:	55                   	push   %ebp
c011088b:	89 e5                	mov    %esp,%ebp
c011088d:	83 ec 28             	sub    $0x28,%esp
c0110890:	8b 45 08             	mov    0x8(%ebp),%eax
c0110893:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0110896:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c011089a:	0f 84 80 00 00 00    	je     c0110920 <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c01108a0:	e8 a8 ff ff ff       	call   c011084d <__intr_save>
c01108a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c01108a8:	a1 e4 60 15 c0       	mov    0xc01560e4,%eax
c01108ad:	99                   	cltd   
c01108ae:	c1 ea 14             	shr    $0x14,%edx
c01108b1:	01 d0                	add    %edx,%eax
c01108b3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01108b8:	29 d0                	sub    %edx,%eax
c01108ba:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c01108be:	88 90 e0 50 15 c0    	mov    %dl,-0x3feaaf20(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c01108c4:	8b 15 e4 60 15 c0    	mov    0xc01560e4,%edx
c01108ca:	a1 e0 60 15 c0       	mov    0xc01560e0,%eax
c01108cf:	29 c2                	sub    %eax,%edx
c01108d1:	89 d0                	mov    %edx,%eax
c01108d3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01108d8:	7f 0d                	jg     c01108e7 <dev_stdin_write+0x5d>
                p_wpos ++;
c01108da:	a1 e4 60 15 c0       	mov    0xc01560e4,%eax
c01108df:	83 c0 01             	add    $0x1,%eax
c01108e2:	a3 e4 60 15 c0       	mov    %eax,0xc01560e4
            }
            if (!wait_queue_empty(wait_queue)) {
c01108e7:	a1 a0 fe 14 c0       	mov    0xc014fea0,%eax
c01108ec:	89 04 24             	mov    %eax,(%esp)
c01108ef:	e8 0b 94 ff ff       	call   c0109cff <wait_queue_empty>
c01108f4:	85 c0                	test   %eax,%eax
c01108f6:	75 1d                	jne    c0110915 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c01108f8:	a1 a0 fe 14 c0       	mov    0xc014fea0,%eax
c01108fd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110904:	00 
c0110905:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c011090c:	80 
c011090d:	89 04 24             	mov    %eax,(%esp)
c0110910:	e8 a1 94 ff ff       	call   c0109db6 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c0110915:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110918:	89 04 24             	mov    %eax,(%esp)
c011091b:	e8 57 ff ff ff       	call   c0110877 <__intr_restore>
    }
}
c0110920:	c9                   	leave  
c0110921:	c3                   	ret    

c0110922 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c0110922:	55                   	push   %ebp
c0110923:	89 e5                	mov    %esp,%ebp
c0110925:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0110928:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c011092f:	e8 19 ff ff ff       	call   c011084d <__intr_save>
c0110934:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0110937:	e9 bb 00 00 00       	jmp    c01109f7 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c011093c:	8b 15 e0 60 15 c0    	mov    0xc01560e0,%edx
c0110942:	a1 e4 60 15 c0       	mov    0xc01560e4,%eax
c0110947:	39 c2                	cmp    %eax,%edx
c0110949:	7d 3d                	jge    c0110988 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c011094b:	8b 45 08             	mov    0x8(%ebp),%eax
c011094e:	8d 50 01             	lea    0x1(%eax),%edx
c0110951:	89 55 08             	mov    %edx,0x8(%ebp)
c0110954:	8b 15 e0 60 15 c0    	mov    0xc01560e0,%edx
c011095a:	89 d1                	mov    %edx,%ecx
c011095c:	c1 f9 1f             	sar    $0x1f,%ecx
c011095f:	c1 e9 14             	shr    $0x14,%ecx
c0110962:	01 ca                	add    %ecx,%edx
c0110964:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c011096a:	29 ca                	sub    %ecx,%edx
c011096c:	0f b6 92 e0 50 15 c0 	movzbl -0x3feaaf20(%edx),%edx
c0110973:	88 10                	mov    %dl,(%eax)
        for (; ret < len; ret ++, p_rpos ++) {
c0110975:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110979:	a1 e0 60 15 c0       	mov    0xc01560e0,%eax
c011097e:	83 c0 01             	add    $0x1,%eax
c0110981:	a3 e0 60 15 c0       	mov    %eax,0xc01560e0
c0110986:	eb 6f                	jmp    c01109f7 <dev_stdin_read+0xd5>
            }
            else {
                wait_t __wait, *wait = &__wait;
c0110988:	8d 45 d8             	lea    -0x28(%ebp),%eax
c011098b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c011098e:	a1 a0 fe 14 c0       	mov    0xc014fea0,%eax
c0110993:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c011099a:	80 
c011099b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011099e:	89 54 24 04          	mov    %edx,0x4(%esp)
c01109a2:	89 04 24             	mov    %eax,(%esp)
c01109a5:	e8 a1 94 ff ff       	call   c0109e4b <wait_current_set>
                local_intr_restore(intr_flag);
c01109aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109ad:	89 04 24             	mov    %eax,(%esp)
c01109b0:	e8 c2 fe ff ff       	call   c0110877 <__intr_restore>

                schedule();
c01109b5:	e8 92 da ff ff       	call   c010e44c <schedule>

                local_intr_save(intr_flag);
c01109ba:	e8 8e fe ff ff       	call   c011084d <__intr_save>
c01109bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c01109c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01109c5:	89 04 24             	mov    %eax,(%esp)
c01109c8:	e8 4f 93 ff ff       	call   c0109d1c <wait_in_queue>
c01109cd:	85 c0                	test   %eax,%eax
c01109cf:	74 14                	je     c01109e5 <dev_stdin_read+0xc3>
c01109d1:	a1 a0 fe 14 c0       	mov    0xc014fea0,%eax
c01109d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01109d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01109dd:	89 04 24             	mov    %eax,(%esp)
c01109e0:	e8 32 91 ff ff       	call   c0109b17 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01109e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01109e8:	8b 40 04             	mov    0x4(%eax),%eax
c01109eb:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c01109f0:	75 11                	jne    c0110a03 <dev_stdin_read+0xe1>
c01109f2:	e9 45 ff ff ff       	jmp    c011093c <dev_stdin_read+0x1a>
        for (; ret < len; ret ++, p_rpos ++) {
c01109f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01109fd:	0f 82 39 ff ff ff    	jb     c011093c <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c0110a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a06:	89 04 24             	mov    %eax,(%esp)
c0110a09:	e8 69 fe ff ff       	call   c0110877 <__intr_restore>
    return ret;
c0110a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110a11:	c9                   	leave  
c0110a12:	c3                   	ret    

c0110a13 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c0110a13:	55                   	push   %ebp
c0110a14:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c0110a16:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110a1a:	74 07                	je     c0110a23 <stdin_open+0x10>
        return -E_INVAL;
c0110a1c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110a21:	eb 05                	jmp    c0110a28 <stdin_open+0x15>
    }
    return 0;
c0110a23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a28:	5d                   	pop    %ebp
c0110a29:	c3                   	ret    

c0110a2a <stdin_close>:

static int
stdin_close(struct device *dev) {
c0110a2a:	55                   	push   %ebp
c0110a2b:	89 e5                	mov    %esp,%ebp
    return 0;
c0110a2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a32:	5d                   	pop    %ebp
c0110a33:	c3                   	ret    

c0110a34 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c0110a34:	55                   	push   %ebp
c0110a35:	89 e5                	mov    %esp,%ebp
c0110a37:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0110a3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110a3e:	75 36                	jne    c0110a76 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c0110a40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a43:	8b 50 0c             	mov    0xc(%eax),%edx
c0110a46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a49:	8b 00                	mov    (%eax),%eax
c0110a4b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110a4f:	89 04 24             	mov    %eax,(%esp)
c0110a52:	e8 cb fe ff ff       	call   c0110922 <dev_stdin_read>
c0110a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a5e:	7e 11                	jle    c0110a71 <stdin_io+0x3d>
            iob->io_resid -= ret;
c0110a60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a63:	8b 50 0c             	mov    0xc(%eax),%edx
c0110a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a69:	29 c2                	sub    %eax,%edx
c0110a6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a6e:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c0110a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a74:	eb 05                	jmp    c0110a7b <stdin_io+0x47>
    }
    return -E_INVAL;
c0110a76:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110a7b:	c9                   	leave  
c0110a7c:	c3                   	ret    

c0110a7d <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0110a7d:	55                   	push   %ebp
c0110a7e:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0110a80:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110a85:	5d                   	pop    %ebp
c0110a86:	c3                   	ret    

c0110a87 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0110a87:	55                   	push   %ebp
c0110a88:	89 e5                	mov    %esp,%ebp
c0110a8a:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0110a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0110a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a99:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c0110aa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0110aa3:	c7 40 08 13 0a 11 c0 	movl   $0xc0110a13,0x8(%eax)
    dev->d_close = stdin_close;
c0110aaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0110aad:	c7 40 0c 2a 0a 11 c0 	movl   $0xc0110a2a,0xc(%eax)
    dev->d_io = stdin_io;
c0110ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ab7:	c7 40 10 34 0a 11 c0 	movl   $0xc0110a34,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c0110abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ac1:	c7 40 14 7d 0a 11 c0 	movl   $0xc0110a7d,0x14(%eax)

    p_rpos = p_wpos = 0;
c0110ac8:	c7 05 e4 60 15 c0 00 	movl   $0x0,0xc01560e4
c0110acf:	00 00 00 
c0110ad2:	a1 e4 60 15 c0       	mov    0xc01560e4,%eax
c0110ad7:	a3 e0 60 15 c0       	mov    %eax,0xc01560e0
    wait_queue_init(wait_queue);
c0110adc:	a1 a0 fe 14 c0       	mov    0xc014fea0,%eax
c0110ae1:	89 04 24             	mov    %eax,(%esp)
c0110ae4:	e8 6b 8f ff ff       	call   c0109a54 <wait_queue_init>
}
c0110ae9:	c9                   	leave  
c0110aea:	c3                   	ret    

c0110aeb <dev_init_stdin>:

void
dev_init_stdin(void) {
c0110aeb:	55                   	push   %ebp
c0110aec:	89 e5                	mov    %esp,%ebp
c0110aee:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110af1:	e8 39 0b 00 00       	call   c011162f <dev_create_inode>
c0110af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110afd:	75 1c                	jne    c0110b1b <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c0110aff:	c7 44 24 08 68 8f 11 	movl   $0xc0118f68,0x8(%esp)
c0110b06:	c0 
c0110b07:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0110b0e:	00 
c0110b0f:	c7 04 24 81 8f 11 c0 	movl   $0xc0118f81,(%esp)
c0110b16:	e8 d8 f9 fe ff       	call   c01004f3 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0110b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110b21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b25:	74 0d                	je     c0110b34 <dev_init_stdin+0x49>
c0110b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b2a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110b2d:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110b32:	74 24                	je     c0110b58 <dev_init_stdin+0x6d>
c0110b34:	c7 44 24 0c 9c 8f 11 	movl   $0xc0118f9c,0xc(%esp)
c0110b3b:	c0 
c0110b3c:	c7 44 24 08 cf 8f 11 	movl   $0xc0118fcf,0x8(%esp)
c0110b43:	c0 
c0110b44:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0110b4b:	00 
c0110b4c:	c7 04 24 81 8f 11 c0 	movl   $0xc0118f81,(%esp)
c0110b53:	e8 9b f9 fe ff       	call   c01004f3 <__panic>
c0110b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b5b:	89 04 24             	mov    %eax,(%esp)
c0110b5e:	e8 24 ff ff ff       	call   c0110a87 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c0110b63:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110b6a:	00 
c0110b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110b72:	c7 04 24 e4 8f 11 c0 	movl   $0xc0118fe4,(%esp)
c0110b79:	e8 3b ea ff ff       	call   c010f5b9 <vfs_add_dev>
c0110b7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b85:	74 23                	je     c0110baa <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0110b87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110b8e:	c7 44 24 08 ea 8f 11 	movl   $0xc0118fea,0x8(%esp)
c0110b95:	c0 
c0110b96:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0110b9d:	00 
c0110b9e:	c7 04 24 81 8f 11 c0 	movl   $0xc0118f81,(%esp)
c0110ba5:	e8 49 f9 fe ff       	call   c01004f3 <__panic>
    }
}
c0110baa:	c9                   	leave  
c0110bab:	c3                   	ret    

c0110bac <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110bac:	55                   	push   %ebp
c0110bad:	89 e5                	mov    %esp,%ebp
c0110baf:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110bb2:	c7 04 24 f4 60 15 c0 	movl   $0xc01560f4,(%esp)
c0110bb9:	e8 cc 94 ff ff       	call   c010a08a <down>
}
c0110bbe:	c9                   	leave  
c0110bbf:	c3                   	ret    

c0110bc0 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110bc0:	55                   	push   %ebp
c0110bc1:	89 e5                	mov    %esp,%ebp
c0110bc3:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110bc6:	c7 04 24 f4 60 15 c0 	movl   $0xc01560f4,(%esp)
c0110bcd:	e8 9d 94 ff ff       	call   c010a06f <up>
}
c0110bd2:	c9                   	leave  
c0110bd3:	c3                   	ret    

c0110bd4 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110bd4:	55                   	push   %ebp
c0110bd5:	89 e5                	mov    %esp,%ebp
    return 0;
c0110bd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110bdc:	5d                   	pop    %ebp
c0110bdd:	c3                   	ret    

c0110bde <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110bde:	55                   	push   %ebp
c0110bdf:	89 e5                	mov    %esp,%ebp
    return 0;
c0110be1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110be6:	5d                   	pop    %ebp
c0110be7:	c3                   	ret    

c0110be8 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110be8:	55                   	push   %ebp
c0110be9:	89 e5                	mov    %esp,%ebp
c0110beb:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bf1:	c1 e0 03             	shl    $0x3,%eax
c0110bf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110bf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bfa:	c1 e0 03             	shl    $0x3,%eax
c0110bfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110c00:	a1 f0 60 15 c0       	mov    0xc01560f0,%eax
c0110c05:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c08:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110c0c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c13:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c17:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110c1e:	e8 6f 07 ff ff       	call   c0101392 <ide_read_secs>
c0110c23:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110c26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110c2a:	74 3f                	je     c0110c6b <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c2f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110c33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c36:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110c3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c3d:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c44:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110c4f:	c7 44 24 08 04 90 11 	movl   $0xc0119004,0x8(%esp)
c0110c56:	c0 
c0110c57:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110c5e:	00 
c0110c5f:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110c66:	e8 88 f8 fe ff       	call   c01004f3 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110c6b:	c9                   	leave  
c0110c6c:	c3                   	ret    

c0110c6d <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110c6d:	55                   	push   %ebp
c0110c6e:	89 e5                	mov    %esp,%ebp
c0110c70:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c76:	c1 e0 03             	shl    $0x3,%eax
c0110c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c7f:	c1 e0 03             	shl    $0x3,%eax
c0110c82:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110c85:	a1 f0 60 15 c0       	mov    0xc01560f0,%eax
c0110c8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c8d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110c91:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110c9c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110ca3:	e8 2c 09 ff ff       	call   c01015d4 <ide_write_secs>
c0110ca8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110cab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110caf:	74 3f                	je     c0110cf0 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110cb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110cb4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cbb:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cc2:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cc9:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110ccd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110cd0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110cd4:	c7 44 24 08 68 90 11 	movl   $0xc0119068,0x8(%esp)
c0110cdb:	c0 
c0110cdc:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110ce3:	00 
c0110ce4:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110ceb:	e8 03 f8 fe ff       	call   c01004f3 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110cf0:	c9                   	leave  
c0110cf1:	c3                   	ret    

c0110cf2 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110cf2:	55                   	push   %ebp
c0110cf3:	89 e5                	mov    %esp,%ebp
c0110cf5:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110cf8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cfb:	8b 40 04             	mov    0x4(%eax),%eax
c0110cfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110d01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d04:	8b 40 0c             	mov    0xc(%eax),%eax
c0110d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110d0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110d0d:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110d13:	85 c0                	test   %eax,%eax
c0110d15:	0f 48 c2             	cmovs  %edx,%eax
c0110d18:	c1 f8 0c             	sar    $0xc,%eax
c0110d1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d21:	c1 e8 0c             	shr    $0xc,%eax
c0110d24:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110d2a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d2f:	85 c0                	test   %eax,%eax
c0110d31:	75 0c                	jne    c0110d3f <disk0_io+0x4d>
c0110d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d36:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d3b:	85 c0                	test   %eax,%eax
c0110d3d:	74 0a                	je     c0110d49 <disk0_io+0x57>
        return -E_INVAL;
c0110d3f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110d44:	e9 7a 01 00 00       	jmp    c0110ec3 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110d49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110d4f:	01 c2                	add    %eax,%edx
c0110d51:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d54:	8b 00                	mov    (%eax),%eax
c0110d56:	39 c2                	cmp    %eax,%edx
c0110d58:	76 0a                	jbe    c0110d64 <disk0_io+0x72>
        return -E_INVAL;
c0110d5a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110d5f:	e9 5f 01 00 00       	jmp    c0110ec3 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110d64:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110d68:	75 0a                	jne    c0110d74 <disk0_io+0x82>
        return 0;
c0110d6a:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d6f:	e9 4f 01 00 00       	jmp    c0110ec3 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110d74:	e8 33 fe ff ff       	call   c0110bac <lock_disk0>
    while (resid != 0) {
c0110d79:	e9 31 01 00 00       	jmp    c0110eaf <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110d7e:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110d85:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110d89:	0f 84 89 00 00 00    	je     c0110e18 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110d8f:	a1 f0 60 15 c0       	mov    0xc01560f0,%eax
c0110d94:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110d97:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110d9b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110da2:	00 
c0110da3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110da6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110daa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110dae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110db1:	89 04 24             	mov    %eax,(%esp)
c0110db4:	e8 5b ac ff ff       	call   c010ba14 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110db9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dbc:	85 c0                	test   %eax,%eax
c0110dbe:	74 14                	je     c0110dd4 <disk0_io+0xe2>
c0110dc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110dc6:	77 0c                	ja     c0110dd4 <disk0_io+0xe2>
c0110dc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dcb:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110dd0:	85 c0                	test   %eax,%eax
c0110dd2:	74 24                	je     c0110df8 <disk0_io+0x106>
c0110dd4:	c7 44 24 0c b4 90 11 	movl   $0xc01190b4,0xc(%esp)
c0110ddb:	c0 
c0110ddc:	c7 44 24 08 f2 90 11 	movl   $0xc01190f2,0x8(%esp)
c0110de3:	c0 
c0110de4:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110deb:	00 
c0110dec:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110df3:	e8 fb f6 fe ff       	call   c01004f3 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110df8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110dfb:	c1 e8 0c             	shr    $0xc,%eax
c0110dfe:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110e01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e0b:	89 04 24             	mov    %eax,(%esp)
c0110e0e:	e8 5a fe ff ff       	call   c0110c6d <disk0_write_blks_nolock>
c0110e13:	e9 8b 00 00 00       	jmp    c0110ea3 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110e18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110e1e:	76 06                	jbe    c0110e26 <disk0_io+0x134>
                alen = resid;
c0110e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e23:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e29:	c1 e8 0c             	shr    $0xc,%eax
c0110e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e39:	89 04 24             	mov    %eax,(%esp)
c0110e3c:	e8 a7 fd ff ff       	call   c0110be8 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110e41:	a1 f0 60 15 c0       	mov    0xc01560f0,%eax
c0110e46:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110e49:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110e4d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110e54:	00 
c0110e55:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110e58:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e63:	89 04 24             	mov    %eax,(%esp)
c0110e66:	e8 a9 ab ff ff       	call   c010ba14 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110e6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e6e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110e71:	75 0c                	jne    c0110e7f <disk0_io+0x18d>
c0110e73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e76:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110e7b:	85 c0                	test   %eax,%eax
c0110e7d:	74 24                	je     c0110ea3 <disk0_io+0x1b1>
c0110e7f:	c7 44 24 0c 08 91 11 	movl   $0xc0119108,0xc(%esp)
c0110e86:	c0 
c0110e87:	c7 44 24 08 f2 90 11 	movl   $0xc01190f2,0x8(%esp)
c0110e8e:	c0 
c0110e8f:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110e96:	00 
c0110e97:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110e9e:	e8 50 f6 fe ff       	call   c01004f3 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110ea3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ea6:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110ea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110eac:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (resid != 0) {
c0110eaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110eb3:	0f 85 c5 fe ff ff    	jne    c0110d7e <disk0_io+0x8c>
    }
    unlock_disk0();
c0110eb9:	e8 02 fd ff ff       	call   c0110bc0 <unlock_disk0>
    return 0;
c0110ebe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110ec3:	c9                   	leave  
c0110ec4:	c3                   	ret    

c0110ec5 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110ec5:	55                   	push   %ebp
c0110ec6:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110ec8:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110ecd:	5d                   	pop    %ebp
c0110ece:	c3                   	ret    

c0110ecf <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110ecf:	55                   	push   %ebp
c0110ed0:	89 e5                	mov    %esp,%ebp
c0110ed2:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110ed5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110edc:	e8 33 04 ff ff       	call   c0101314 <ide_device_valid>
c0110ee1:	85 c0                	test   %eax,%eax
c0110ee3:	75 1c                	jne    c0110f01 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110ee5:	c7 44 24 08 38 91 11 	movl   $0xc0119138,0x8(%esp)
c0110eec:	c0 
c0110eed:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0110ef4:	00 
c0110ef5:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110efc:	e8 f2 f5 fe ff       	call   c01004f3 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0110f01:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110f08:	e8 46 04 ff ff       	call   c0101353 <ide_device_size>
c0110f0d:	c1 e8 03             	shr    $0x3,%eax
c0110f10:	89 c2                	mov    %eax,%edx
c0110f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f15:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110f17:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f1a:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0110f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f24:	c7 40 08 d4 0b 11 c0 	movl   $0xc0110bd4,0x8(%eax)
    dev->d_close = disk0_close;
c0110f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f2e:	c7 40 0c de 0b 11 c0 	movl   $0xc0110bde,0xc(%eax)
    dev->d_io = disk0_io;
c0110f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f38:	c7 40 10 f2 0c 11 c0 	movl   $0xc0110cf2,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0110f3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f42:	c7 40 14 c5 0e 11 c0 	movl   $0xc0110ec5,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110f49:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110f50:	00 
c0110f51:	c7 04 24 f4 60 15 c0 	movl   $0xc01560f4,(%esp)
c0110f58:	e8 9f 8f ff ff       	call   c0109efc <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110f5d:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0110f64:	e8 99 4c ff ff       	call   c0105c02 <kmalloc>
c0110f69:	a3 f0 60 15 c0       	mov    %eax,0xc01560f0
c0110f6e:	a1 f0 60 15 c0       	mov    0xc01560f0,%eax
c0110f73:	85 c0                	test   %eax,%eax
c0110f75:	75 1c                	jne    c0110f93 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110f77:	c7 44 24 08 57 91 11 	movl   $0xc0119157,0x8(%esp)
c0110f7e:	c0 
c0110f7f:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110f86:	00 
c0110f87:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110f8e:	e8 60 f5 fe ff       	call   c01004f3 <__panic>
    }
}
c0110f93:	c9                   	leave  
c0110f94:	c3                   	ret    

c0110f95 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110f95:	55                   	push   %ebp
c0110f96:	89 e5                	mov    %esp,%ebp
c0110f98:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110f9b:	e8 8f 06 00 00       	call   c011162f <dev_create_inode>
c0110fa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110fa3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110fa7:	75 1c                	jne    c0110fc5 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110fa9:	c7 44 24 08 73 91 11 	movl   $0xc0119173,0x8(%esp)
c0110fb0:	c0 
c0110fb1:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110fb8:	00 
c0110fb9:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110fc0:	e8 2e f5 fe ff       	call   c01004f3 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110fcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110fcf:	74 0d                	je     c0110fde <dev_init_disk0+0x49>
c0110fd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110fd4:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110fd7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110fdc:	74 24                	je     c0111002 <dev_init_disk0+0x6d>
c0110fde:	c7 44 24 0c 8c 91 11 	movl   $0xc011918c,0xc(%esp)
c0110fe5:	c0 
c0110fe6:	c7 44 24 08 f2 90 11 	movl   $0xc01190f2,0x8(%esp)
c0110fed:	c0 
c0110fee:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110ff5:	00 
c0110ff6:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c0110ffd:	e8 f1 f4 fe ff       	call   c01004f3 <__panic>
c0111002:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111005:	89 04 24             	mov    %eax,(%esp)
c0111008:	e8 c2 fe ff ff       	call   c0110ecf <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c011100d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111014:	00 
c0111015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111018:	89 44 24 04          	mov    %eax,0x4(%esp)
c011101c:	c7 04 24 bf 91 11 c0 	movl   $0xc01191bf,(%esp)
c0111023:	e8 91 e5 ff ff       	call   c010f5b9 <vfs_add_dev>
c0111028:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011102b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011102f:	74 23                	je     c0111054 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0111031:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111034:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111038:	c7 44 24 08 c5 91 11 	movl   $0xc01191c5,0x8(%esp)
c011103f:	c0 
c0111040:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0111047:	00 
c0111048:	c7 04 24 4c 90 11 c0 	movl   $0xc011904c,(%esp)
c011104f:	e8 9f f4 fe ff       	call   c01004f3 <__panic>
    }
}
c0111054:	c9                   	leave  
c0111055:	c3                   	ret    

c0111056 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0111056:	55                   	push   %ebp
c0111057:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c0111059:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011105d:	74 07                	je     c0111066 <stdout_open+0x10>
        return -E_INVAL;
c011105f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111064:	eb 05                	jmp    c011106b <stdout_open+0x15>
    }
    return 0;
c0111066:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011106b:	5d                   	pop    %ebp
c011106c:	c3                   	ret    

c011106d <stdout_close>:

static int
stdout_close(struct device *dev) {
c011106d:	55                   	push   %ebp
c011106e:	89 e5                	mov    %esp,%ebp
    return 0;
c0111070:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111075:	5d                   	pop    %ebp
c0111076:	c3                   	ret    

c0111077 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c0111077:	55                   	push   %ebp
c0111078:	89 e5                	mov    %esp,%ebp
c011107a:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c011107d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111081:	74 41                	je     c01110c4 <stdout_io+0x4d>
        char *data = iob->io_base;
c0111083:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111086:	8b 00                	mov    (%eax),%eax
c0111088:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c011108b:	eb 26                	jmp    c01110b3 <stdout_io+0x3c>
            cputchar(*data ++);
c011108d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111090:	8d 50 01             	lea    0x1(%eax),%edx
c0111093:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111096:	0f b6 00             	movzbl (%eax),%eax
c0111099:	0f be c0             	movsbl %al,%eax
c011109c:	89 04 24             	mov    %eax,(%esp)
c011109f:	e8 1e f3 fe ff       	call   c01003c2 <cputchar>
        for (; iob->io_resid != 0; iob->io_resid --) {
c01110a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110a7:	8b 40 0c             	mov    0xc(%eax),%eax
c01110aa:	8d 50 ff             	lea    -0x1(%eax),%edx
c01110ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110b0:	89 50 0c             	mov    %edx,0xc(%eax)
c01110b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110b6:	8b 40 0c             	mov    0xc(%eax),%eax
c01110b9:	85 c0                	test   %eax,%eax
c01110bb:	75 d0                	jne    c011108d <stdout_io+0x16>
        }
        return 0;
c01110bd:	b8 00 00 00 00       	mov    $0x0,%eax
c01110c2:	eb 05                	jmp    c01110c9 <stdout_io+0x52>
    }
    return -E_INVAL;
c01110c4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01110c9:	c9                   	leave  
c01110ca:	c3                   	ret    

c01110cb <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c01110cb:	55                   	push   %ebp
c01110cc:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c01110ce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01110d3:	5d                   	pop    %ebp
c01110d4:	c3                   	ret    

c01110d5 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c01110d5:	55                   	push   %ebp
c01110d6:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c01110d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01110db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c01110e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01110e4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c01110eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01110ee:	c7 40 08 56 10 11 c0 	movl   $0xc0111056,0x8(%eax)
    dev->d_close = stdout_close;
c01110f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01110f8:	c7 40 0c 6d 10 11 c0 	movl   $0xc011106d,0xc(%eax)
    dev->d_io = stdout_io;
c01110ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0111102:	c7 40 10 77 10 11 c0 	movl   $0xc0111077,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0111109:	8b 45 08             	mov    0x8(%ebp),%eax
c011110c:	c7 40 14 cb 10 11 c0 	movl   $0xc01110cb,0x14(%eax)
}
c0111113:	5d                   	pop    %ebp
c0111114:	c3                   	ret    

c0111115 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111115:	55                   	push   %ebp
c0111116:	89 e5                	mov    %esp,%ebp
c0111118:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011111b:	e8 0f 05 00 00       	call   c011162f <dev_create_inode>
c0111120:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111123:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111127:	75 1c                	jne    c0111145 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111129:	c7 44 24 08 e0 91 11 	movl   $0xc01191e0,0x8(%esp)
c0111130:	c0 
c0111131:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111138:	00 
c0111139:	c7 04 24 fa 91 11 c0 	movl   $0xc01191fa,(%esp)
c0111140:	e8 ae f3 fe ff       	call   c01004f3 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111145:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111148:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011114b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011114f:	74 0d                	je     c011115e <dev_init_stdout+0x49>
c0111151:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111154:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111157:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011115c:	74 24                	je     c0111182 <dev_init_stdout+0x6d>
c011115e:	c7 44 24 0c 14 92 11 	movl   $0xc0119214,0xc(%esp)
c0111165:	c0 
c0111166:	c7 44 24 08 47 92 11 	movl   $0xc0119247,0x8(%esp)
c011116d:	c0 
c011116e:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0111175:	00 
c0111176:	c7 04 24 fa 91 11 c0 	movl   $0xc01191fa,(%esp)
c011117d:	e8 71 f3 fe ff       	call   c01004f3 <__panic>
c0111182:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111185:	89 04 24             	mov    %eax,(%esp)
c0111188:	e8 48 ff ff ff       	call   c01110d5 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c011118d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111194:	00 
c0111195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111198:	89 44 24 04          	mov    %eax,0x4(%esp)
c011119c:	c7 04 24 5c 92 11 c0 	movl   $0xc011925c,(%esp)
c01111a3:	e8 11 e4 ff ff       	call   c010f5b9 <vfs_add_dev>
c01111a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01111ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01111af:	74 23                	je     c01111d4 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01111b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01111b8:	c7 44 24 08 63 92 11 	movl   $0xc0119263,0x8(%esp)
c01111bf:	c0 
c01111c0:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c01111c7:	00 
c01111c8:	c7 04 24 fa 91 11 c0 	movl   $0xc01191fa,(%esp)
c01111cf:	e8 1f f3 fe ff       	call   c01004f3 <__panic>
    }
}
c01111d4:	c9                   	leave  
c01111d5:	c3                   	ret    

c01111d6 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01111d6:	55                   	push   %ebp
c01111d7:	89 e5                	mov    %esp,%ebp
c01111d9:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01111dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01111df:	83 e0 3c             	and    $0x3c,%eax
c01111e2:	85 c0                	test   %eax,%eax
c01111e4:	74 07                	je     c01111ed <dev_open+0x17>
        return -E_INVAL;
c01111e6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01111eb:	eb 58                	jmp    c0111245 <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c01111ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01111f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01111f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01111f7:	74 0d                	je     c0111206 <dev_open+0x30>
c01111f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111fc:	8b 40 2c             	mov    0x2c(%eax),%eax
c01111ff:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111204:	74 24                	je     c011122a <dev_open+0x54>
c0111206:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c011120d:	c0 
c011120e:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c0111215:	c0 
c0111216:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c011121d:	00 
c011121e:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c0111225:	e8 c9 f2 fe ff       	call   c01004f3 <__panic>
c011122a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011122d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0111230:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111233:	8b 40 08             	mov    0x8(%eax),%eax
c0111236:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111239:	89 54 24 04          	mov    %edx,0x4(%esp)
c011123d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111240:	89 14 24             	mov    %edx,(%esp)
c0111243:	ff d0                	call   *%eax
}
c0111245:	c9                   	leave  
c0111246:	c3                   	ret    

c0111247 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c0111247:	55                   	push   %ebp
c0111248:	89 e5                	mov    %esp,%ebp
c011124a:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011124d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111250:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111253:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111257:	74 0d                	je     c0111266 <dev_close+0x1f>
c0111259:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011125c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011125f:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111264:	74 24                	je     c011128a <dev_close+0x43>
c0111266:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c011126d:	c0 
c011126e:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c0111275:	c0 
c0111276:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c011127d:	00 
c011127e:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c0111285:	e8 69 f2 fe ff       	call   c01004f3 <__panic>
c011128a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011128d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c0111290:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111293:	8b 40 0c             	mov    0xc(%eax),%eax
c0111296:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111299:	89 14 24             	mov    %edx,(%esp)
c011129c:	ff d0                	call   *%eax
}
c011129e:	c9                   	leave  
c011129f:	c3                   	ret    

c01112a0 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01112a0:	55                   	push   %ebp
c01112a1:	89 e5                	mov    %esp,%ebp
c01112a3:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01112a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01112a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01112ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01112b0:	74 0d                	je     c01112bf <dev_read+0x1f>
c01112b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112b5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01112b8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01112bd:	74 24                	je     c01112e3 <dev_read+0x43>
c01112bf:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c01112c6:	c0 
c01112c7:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c01112ce:	c0 
c01112cf:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c01112d6:	00 
c01112d7:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c01112de:	e8 10 f2 fe ff       	call   c01004f3 <__panic>
c01112e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01112e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01112ec:	8b 40 10             	mov    0x10(%eax),%eax
c01112ef:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01112f6:	00 
c01112f7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01112fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01112fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111301:	89 14 24             	mov    %edx,(%esp)
c0111304:	ff d0                	call   *%eax
}
c0111306:	c9                   	leave  
c0111307:	c3                   	ret    

c0111308 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c0111308:	55                   	push   %ebp
c0111309:	89 e5                	mov    %esp,%ebp
c011130b:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111311:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111314:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111318:	74 0d                	je     c0111327 <dev_write+0x1f>
c011131a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011131d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111320:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111325:	74 24                	je     c011134b <dev_write+0x43>
c0111327:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c011132e:	c0 
c011132f:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c0111336:	c0 
c0111337:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c011133e:	00 
c011133f:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c0111346:	e8 a8 f1 fe ff       	call   c01004f3 <__panic>
c011134b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011134e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0111351:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111354:	8b 40 10             	mov    0x10(%eax),%eax
c0111357:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011135e:	00 
c011135f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111362:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111366:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111369:	89 14 24             	mov    %edx,(%esp)
c011136c:	ff d0                	call   *%eax
}
c011136e:	c9                   	leave  
c011136f:	c3                   	ret    

c0111370 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0111370:	55                   	push   %ebp
c0111371:	89 e5                	mov    %esp,%ebp
c0111373:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0111376:	8b 45 08             	mov    0x8(%ebp),%eax
c0111379:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011137c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111380:	74 0d                	je     c011138f <dev_ioctl+0x1f>
c0111382:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111385:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111388:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011138d:	74 24                	je     c01113b3 <dev_ioctl+0x43>
c011138f:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c0111396:	c0 
c0111397:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c011139e:	c0 
c011139f:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c01113a6:	00 
c01113a7:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c01113ae:	e8 40 f1 fe ff       	call   c01004f3 <__panic>
c01113b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c01113b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113bc:	8b 40 14             	mov    0x14(%eax),%eax
c01113bf:	8b 55 10             	mov    0x10(%ebp),%edx
c01113c2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01113c6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01113c9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01113d0:	89 14 24             	mov    %edx,(%esp)
c01113d3:	ff d0                	call   *%eax
}
c01113d5:	c9                   	leave  
c01113d6:	c3                   	ret    

c01113d7 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01113d7:	55                   	push   %ebp
c01113d8:	89 e5                	mov    %esp,%ebp
c01113da:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01113dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01113e4:	00 
c01113e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01113ec:	00 
c01113ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113f0:	89 04 24             	mov    %eax,(%esp)
c01113f3:	e8 8d 3a 00 00       	call   c0114e85 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01113f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01113fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01113fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111402:	74 17                	je     c011141b <dev_fstat+0x44>
c0111404:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111407:	8b 40 3c             	mov    0x3c(%eax),%eax
c011140a:	85 c0                	test   %eax,%eax
c011140c:	74 0d                	je     c011141b <dev_fstat+0x44>
c011140e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111411:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111414:	8b 40 28             	mov    0x28(%eax),%eax
c0111417:	85 c0                	test   %eax,%eax
c0111419:	75 24                	jne    c011143f <dev_fstat+0x68>
c011141b:	c7 44 24 0c dc 92 11 	movl   $0xc01192dc,0xc(%esp)
c0111422:	c0 
c0111423:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c011142a:	c0 
c011142b:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0111432:	00 
c0111433:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c011143a:	e8 b4 f0 fe ff       	call   c01004f3 <__panic>
c011143f:	c7 44 24 04 2c 93 11 	movl   $0xc011932c,0x4(%esp)
c0111446:	c0 
c0111447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011144a:	89 04 24             	mov    %eax,(%esp)
c011144d:	e8 85 f1 ff ff       	call   c01105d7 <inode_check>
c0111452:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111455:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111458:	8b 40 28             	mov    0x28(%eax),%eax
c011145b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011145e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111462:	8b 55 08             	mov    0x8(%ebp),%edx
c0111465:	89 14 24             	mov    %edx,(%esp)
c0111468:	ff d0                	call   *%eax
c011146a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011146d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111471:	74 05                	je     c0111478 <dev_fstat+0xa1>
        return ret;
c0111473:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111476:	eb 72                	jmp    c01114ea <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0111478:	8b 45 08             	mov    0x8(%ebp),%eax
c011147b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011147e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111482:	74 0d                	je     c0111491 <dev_fstat+0xba>
c0111484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111487:	8b 40 2c             	mov    0x2c(%eax),%eax
c011148a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011148f:	74 24                	je     c01114b5 <dev_fstat+0xde>
c0111491:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c0111498:	c0 
c0111499:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c01114a0:	c0 
c01114a1:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01114a8:	00 
c01114a9:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c01114b0:	e8 3e f0 fe ff       	call   c01004f3 <__panic>
c01114b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c01114bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114be:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c01114c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114c8:	8b 10                	mov    (%eax),%edx
c01114ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114cd:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c01114d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114d3:	8b 50 08             	mov    0x8(%eax),%edx
c01114d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114d9:	8b 40 04             	mov    0x4(%eax),%eax
c01114dc:	0f af d0             	imul   %eax,%edx
c01114df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114e2:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01114e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01114ea:	c9                   	leave  
c01114eb:	c3                   	ret    

c01114ec <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c01114ec:	55                   	push   %ebp
c01114ed:	89 e5                	mov    %esp,%ebp
c01114ef:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01114f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01114f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01114f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01114fc:	74 0d                	je     c011150b <dev_gettype+0x1f>
c01114fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111501:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111504:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111509:	74 24                	je     c011152f <dev_gettype+0x43>
c011150b:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c0111512:	c0 
c0111513:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c011151a:	c0 
c011151b:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0111522:	00 
c0111523:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c011152a:	e8 c4 ef fe ff       	call   c01004f3 <__panic>
c011152f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111532:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0111535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111538:	8b 00                	mov    (%eax),%eax
c011153a:	85 c0                	test   %eax,%eax
c011153c:	74 07                	je     c0111545 <dev_gettype+0x59>
c011153e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0111543:	eb 05                	jmp    c011154a <dev_gettype+0x5e>
c0111545:	b8 00 40 00 00       	mov    $0x4000,%eax
c011154a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011154d:	89 02                	mov    %eax,(%edx)
    return 0;
c011154f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111554:	c9                   	leave  
c0111555:	c3                   	ret    

c0111556 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0111556:	55                   	push   %ebp
c0111557:	89 e5                	mov    %esp,%ebp
c0111559:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011155c:	8b 45 08             	mov    0x8(%ebp),%eax
c011155f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111562:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111566:	74 0d                	je     c0111575 <dev_tryseek+0x1f>
c0111568:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011156b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011156e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111573:	74 24                	je     c0111599 <dev_tryseek+0x43>
c0111575:	c7 44 24 0c 80 92 11 	movl   $0xc0119280,0xc(%esp)
c011157c:	c0 
c011157d:	c7 44 24 08 b3 92 11 	movl   $0xc01192b3,0x8(%esp)
c0111584:	c0 
c0111585:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011158c:	00 
c011158d:	c7 04 24 c8 92 11 c0 	movl   $0xc01192c8,(%esp)
c0111594:	e8 5a ef fe ff       	call   c01004f3 <__panic>
c0111599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011159c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c011159f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115a2:	8b 00                	mov    (%eax),%eax
c01115a4:	85 c0                	test   %eax,%eax
c01115a6:	74 38                	je     c01115e0 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c01115a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01115ae:	8b 4a 04             	mov    0x4(%edx),%ecx
c01115b1:	ba 00 00 00 00       	mov    $0x0,%edx
c01115b6:	f7 f1                	div    %ecx
c01115b8:	89 d0                	mov    %edx,%eax
c01115ba:	85 c0                	test   %eax,%eax
c01115bc:	75 22                	jne    c01115e0 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c01115be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01115c2:	78 1c                	js     c01115e0 <dev_tryseek+0x8a>
c01115c4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01115c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115ca:	8b 08                	mov    (%eax),%ecx
c01115cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115cf:	8b 40 04             	mov    0x4(%eax),%eax
c01115d2:	0f af c1             	imul   %ecx,%eax
c01115d5:	39 c2                	cmp    %eax,%edx
c01115d7:	73 07                	jae    c01115e0 <dev_tryseek+0x8a>
                return 0;
c01115d9:	b8 00 00 00 00       	mov    $0x0,%eax
c01115de:	eb 05                	jmp    c01115e5 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c01115e0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01115e5:	c9                   	leave  
c01115e6:	c3                   	ret    

c01115e7 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c01115e7:	55                   	push   %ebp
c01115e8:	89 e5                	mov    %esp,%ebp
c01115ea:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c01115ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115f0:	0f b6 00             	movzbl (%eax),%eax
c01115f3:	84 c0                	test   %al,%al
c01115f5:	74 07                	je     c01115fe <dev_lookup+0x17>
        return -E_NOENT;
c01115f7:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c01115fc:	eb 18                	jmp    c0111616 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c01115fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0111601:	89 04 24             	mov    %eax,(%esp)
c0111604:	e8 c6 ed ff ff       	call   c01103cf <inode_ref_inc>
    *node_store = node;
c0111609:	8b 45 10             	mov    0x10(%ebp),%eax
c011160c:	8b 55 08             	mov    0x8(%ebp),%edx
c011160f:	89 10                	mov    %edx,(%eax)
    return 0;
c0111611:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111616:	c9                   	leave  
c0111617:	c3                   	ret    

c0111618 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0111618:	55                   	push   %ebp
c0111619:	89 e5                	mov    %esp,%ebp
c011161b:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c011161e:	e8 c8 f4 ff ff       	call   c0110aeb <dev_init_stdin>
    init_device(stdout);
c0111623:	e8 ed fa ff ff       	call   c0111115 <dev_init_stdout>
    init_device(disk0);
c0111628:	e8 68 f9 ff ff       	call   c0110f95 <dev_init_disk0>
}
c011162d:	c9                   	leave  
c011162e:	c3                   	ret    

c011162f <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c011162f:	55                   	push   %ebp
c0111630:	89 e5                	mov    %esp,%ebp
c0111632:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0111635:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c011163c:	e8 b3 ec ff ff       	call   c01102f4 <__alloc_inode>
c0111641:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111644:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111648:	74 1b                	je     c0111665 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c011164a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111651:	00 
c0111652:	c7 44 24 04 40 93 11 	movl   $0xc0119340,0x4(%esp)
c0111659:	c0 
c011165a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011165d:	89 04 24             	mov    %eax,(%esp)
c0111660:	e8 b8 ec ff ff       	call   c011031d <inode_init>
    }
    return node;
c0111665:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111668:	c9                   	leave  
c0111669:	c3                   	ret    

c011166a <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c011166a:	55                   	push   %ebp
c011166b:	89 e5                	mov    %esp,%ebp
c011166d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111670:	c7 04 24 80 93 11 c0 	movl   $0xc0119380,(%esp)
c0111677:	e8 b1 30 00 00       	call   c011472d <sfs_mount>
c011167c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011167f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111683:	74 23                	je     c01116a8 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111685:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111688:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011168c:	c7 44 24 08 86 93 11 	movl   $0xc0119386,0x8(%esp)
c0111693:	c0 
c0111694:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c011169b:	00 
c011169c:	c7 04 24 a3 93 11 c0 	movl   $0xc01193a3,(%esp)
c01116a3:	e8 4b ee fe ff       	call   c01004f3 <__panic>
    }
}
c01116a8:	c9                   	leave  
c01116a9:	c3                   	ret    

c01116aa <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c01116aa:	55                   	push   %ebp
c01116ab:	89 e5                	mov    %esp,%ebp
c01116ad:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c01116b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01116b4:	75 06                	jne    c01116bc <sfs_rwblock_nolock+0x12>
c01116b6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01116ba:	75 0b                	jne    c01116c7 <sfs_rwblock_nolock+0x1d>
c01116bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01116bf:	8b 40 04             	mov    0x4(%eax),%eax
c01116c2:	3b 45 10             	cmp    0x10(%ebp),%eax
c01116c5:	77 24                	ja     c01116eb <sfs_rwblock_nolock+0x41>
c01116c7:	c7 44 24 0c b8 93 11 	movl   $0xc01193b8,0xc(%esp)
c01116ce:	c0 
c01116cf:	c7 44 24 08 ec 93 11 	movl   $0xc01193ec,0x8(%esp)
c01116d6:	c0 
c01116d7:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c01116de:	00 
c01116df:	c7 04 24 01 94 11 c0 	movl   $0xc0119401,(%esp)
c01116e6:	e8 08 ee fe ff       	call   c01004f3 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c01116eb:	8b 45 10             	mov    0x10(%ebp),%eax
c01116ee:	c1 e0 0c             	shl    $0xc,%eax
c01116f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01116f5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01116fc:	00 
c01116fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111700:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111704:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111707:	89 04 24             	mov    %eax,(%esp)
c011170a:	e8 d7 a2 ff ff       	call   c010b9e6 <iobuf_init>
c011170f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0111712:	8b 45 08             	mov    0x8(%ebp),%eax
c0111715:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111718:	8b 40 10             	mov    0x10(%eax),%eax
c011171b:	8b 55 08             	mov    0x8(%ebp),%edx
c011171e:	8b 52 2c             	mov    0x2c(%edx),%edx
c0111721:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0111724:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111728:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c011172b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011172f:	89 14 24             	mov    %edx,(%esp)
c0111732:	ff d0                	call   *%eax
}
c0111734:	c9                   	leave  
c0111735:	c3                   	ret    

c0111736 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0111736:	55                   	push   %ebp
c0111737:	89 e5                	mov    %esp,%ebp
c0111739:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c011173c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0111743:	8b 45 08             	mov    0x8(%ebp),%eax
c0111746:	89 04 24             	mov    %eax,(%esp)
c0111749:	e8 df 03 00 00       	call   c0111b2d <lock_sfs_io>
    {
        while (nblks != 0) {
c011174e:	eb 42                	jmp    c0111792 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0111750:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0111757:	00 
c0111758:	8b 45 18             	mov    0x18(%ebp),%eax
c011175b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011175f:	8b 45 10             	mov    0x10(%ebp),%eax
c0111762:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111766:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111769:	89 44 24 04          	mov    %eax,0x4(%esp)
c011176d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111770:	89 04 24             	mov    %eax,(%esp)
c0111773:	e8 32 ff ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111778:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011177b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011177f:	74 02                	je     c0111783 <sfs_rwblock+0x4d>
                break;
c0111781:	eb 15                	jmp    c0111798 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c0111783:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111787:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c011178b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        while (nblks != 0) {
c0111792:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111796:	75 b8                	jne    c0111750 <sfs_rwblock+0x1a>
        }
    }
    unlock_sfs_io(sfs);
c0111798:	8b 45 08             	mov    0x8(%ebp),%eax
c011179b:	89 04 24             	mov    %eax,(%esp)
c011179e:	e8 b6 03 00 00       	call   c0111b59 <unlock_sfs_io>
    return ret;
c01117a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01117a6:	c9                   	leave  
c01117a7:	c3                   	ret    

c01117a8 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01117a8:	55                   	push   %ebp
c01117a9:	89 e5                	mov    %esp,%ebp
c01117ab:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c01117ae:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01117b5:	00 
c01117b6:	8b 45 14             	mov    0x14(%ebp),%eax
c01117b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01117bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01117c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01117c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01117cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01117ce:	89 04 24             	mov    %eax,(%esp)
c01117d1:	e8 60 ff ff ff       	call   c0111736 <sfs_rwblock>
}
c01117d6:	c9                   	leave  
c01117d7:	c3                   	ret    

c01117d8 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01117d8:	55                   	push   %ebp
c01117d9:	89 e5                	mov    %esp,%ebp
c01117db:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c01117de:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01117e5:	00 
c01117e6:	8b 45 14             	mov    0x14(%ebp),%eax
c01117e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01117ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01117f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01117f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01117fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01117fe:	89 04 24             	mov    %eax,(%esp)
c0111801:	e8 30 ff ff ff       	call   c0111736 <sfs_rwblock>
}
c0111806:	c9                   	leave  
c0111807:	c3                   	ret    

c0111808 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0111808:	55                   	push   %ebp
c0111809:	89 e5                	mov    %esp,%ebp
c011180b:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011180e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111812:	78 18                	js     c011182c <sfs_rbuf+0x24>
c0111814:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011181b:	7f 0f                	jg     c011182c <sfs_rbuf+0x24>
c011181d:	8b 55 18             	mov    0x18(%ebp),%edx
c0111820:	8b 45 10             	mov    0x10(%ebp),%eax
c0111823:	01 d0                	add    %edx,%eax
c0111825:	3d 00 10 00 00       	cmp    $0x1000,%eax
c011182a:	76 24                	jbe    c0111850 <sfs_rbuf+0x48>
c011182c:	c7 44 24 0c 18 94 11 	movl   $0xc0119418,0xc(%esp)
c0111833:	c0 
c0111834:	c7 44 24 08 ec 93 11 	movl   $0xc01193ec,0x8(%esp)
c011183b:	c0 
c011183c:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0111843:	00 
c0111844:	c7 04 24 01 94 11 c0 	movl   $0xc0119401,(%esp)
c011184b:	e8 a3 ec fe ff       	call   c01004f3 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0111850:	8b 45 08             	mov    0x8(%ebp),%eax
c0111853:	89 04 24             	mov    %eax,(%esp)
c0111856:	e8 d2 02 00 00       	call   c0111b2d <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011185b:	8b 45 08             	mov    0x8(%ebp),%eax
c011185e:	8b 40 38             	mov    0x38(%eax),%eax
c0111861:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0111868:	00 
c0111869:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0111870:	00 
c0111871:	8b 55 14             	mov    0x14(%ebp),%edx
c0111874:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111878:	89 44 24 04          	mov    %eax,0x4(%esp)
c011187c:	8b 45 08             	mov    0x8(%ebp),%eax
c011187f:	89 04 24             	mov    %eax,(%esp)
c0111882:	e8 23 fe ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111887:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011188a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011188e:	75 21                	jne    c01118b1 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c0111890:	8b 45 08             	mov    0x8(%ebp),%eax
c0111893:	8b 50 38             	mov    0x38(%eax),%edx
c0111896:	8b 45 18             	mov    0x18(%ebp),%eax
c0111899:	01 c2                	add    %eax,%edx
c011189b:	8b 45 10             	mov    0x10(%ebp),%eax
c011189e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01118a2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01118a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118a9:	89 04 24             	mov    %eax,(%esp)
c01118ac:	e8 b6 36 00 00       	call   c0114f67 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c01118b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01118b4:	89 04 24             	mov    %eax,(%esp)
c01118b7:	e8 9d 02 00 00       	call   c0111b59 <unlock_sfs_io>
    return ret;
c01118bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01118bf:	c9                   	leave  
c01118c0:	c3                   	ret    

c01118c1 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01118c1:	55                   	push   %ebp
c01118c2:	89 e5                	mov    %esp,%ebp
c01118c4:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01118c7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01118cb:	78 18                	js     c01118e5 <sfs_wbuf+0x24>
c01118cd:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01118d4:	7f 0f                	jg     c01118e5 <sfs_wbuf+0x24>
c01118d6:	8b 55 18             	mov    0x18(%ebp),%edx
c01118d9:	8b 45 10             	mov    0x10(%ebp),%eax
c01118dc:	01 d0                	add    %edx,%eax
c01118de:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01118e3:	76 24                	jbe    c0111909 <sfs_wbuf+0x48>
c01118e5:	c7 44 24 0c 18 94 11 	movl   $0xc0119418,0xc(%esp)
c01118ec:	c0 
c01118ed:	c7 44 24 08 ec 93 11 	movl   $0xc01193ec,0x8(%esp)
c01118f4:	c0 
c01118f5:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01118fc:	00 
c01118fd:	c7 04 24 01 94 11 c0 	movl   $0xc0119401,(%esp)
c0111904:	e8 ea eb fe ff       	call   c01004f3 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0111909:	8b 45 08             	mov    0x8(%ebp),%eax
c011190c:	89 04 24             	mov    %eax,(%esp)
c011190f:	e8 19 02 00 00       	call   c0111b2d <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0111914:	8b 45 08             	mov    0x8(%ebp),%eax
c0111917:	8b 40 38             	mov    0x38(%eax),%eax
c011191a:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0111921:	00 
c0111922:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0111929:	00 
c011192a:	8b 55 14             	mov    0x14(%ebp),%edx
c011192d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111931:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111935:	8b 45 08             	mov    0x8(%ebp),%eax
c0111938:	89 04 24             	mov    %eax,(%esp)
c011193b:	e8 6a fd ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111940:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111943:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111947:	75 50                	jne    c0111999 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c0111949:	8b 45 08             	mov    0x8(%ebp),%eax
c011194c:	8b 50 38             	mov    0x38(%eax),%edx
c011194f:	8b 45 18             	mov    0x18(%ebp),%eax
c0111952:	01 c2                	add    %eax,%edx
c0111954:	8b 45 10             	mov    0x10(%ebp),%eax
c0111957:	89 44 24 08          	mov    %eax,0x8(%esp)
c011195b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011195e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111962:	89 14 24             	mov    %edx,(%esp)
c0111965:	e8 fd 35 00 00       	call   c0114f67 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c011196a:	8b 45 08             	mov    0x8(%ebp),%eax
c011196d:	8b 40 38             	mov    0x38(%eax),%eax
c0111970:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0111977:	00 
c0111978:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011197f:	00 
c0111980:	8b 55 14             	mov    0x14(%ebp),%edx
c0111983:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111987:	89 44 24 04          	mov    %eax,0x4(%esp)
c011198b:	8b 45 08             	mov    0x8(%ebp),%eax
c011198e:	89 04 24             	mov    %eax,(%esp)
c0111991:	e8 14 fd ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111996:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0111999:	8b 45 08             	mov    0x8(%ebp),%eax
c011199c:	89 04 24             	mov    %eax,(%esp)
c011199f:	e8 b5 01 00 00       	call   c0111b59 <unlock_sfs_io>
    return ret;
c01119a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01119a7:	c9                   	leave  
c01119a8:	c3                   	ret    

c01119a9 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c01119a9:	55                   	push   %ebp
c01119aa:	89 e5                	mov    %esp,%ebp
c01119ac:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01119af:	8b 45 08             	mov    0x8(%ebp),%eax
c01119b2:	89 04 24             	mov    %eax,(%esp)
c01119b5:	e8 73 01 00 00       	call   c0111b2d <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01119ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01119bd:	8b 40 38             	mov    0x38(%eax),%eax
c01119c0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01119c7:	00 
c01119c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01119cf:	00 
c01119d0:	89 04 24             	mov    %eax,(%esp)
c01119d3:	e8 ad 34 00 00       	call   c0114e85 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c01119d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01119db:	8b 45 08             	mov    0x8(%ebp),%eax
c01119de:	8b 40 38             	mov    0x38(%eax),%eax
c01119e1:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c01119e8:	00 
c01119e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01119ed:	89 04 24             	mov    %eax,(%esp)
c01119f0:	e8 72 35 00 00       	call   c0114f67 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c01119f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01119f8:	8b 40 38             	mov    0x38(%eax),%eax
c01119fb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0111a02:	00 
c0111a03:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111a0a:	00 
c0111a0b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111a12:	00 
c0111a13:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a1a:	89 04 24             	mov    %eax,(%esp)
c0111a1d:	e8 88 fc ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111a22:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0111a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a28:	89 04 24             	mov    %eax,(%esp)
c0111a2b:	e8 29 01 00 00       	call   c0111b59 <unlock_sfs_io>
    return ret;
c0111a30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111a33:	c9                   	leave  
c0111a34:	c3                   	ret    

c0111a35 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0111a35:	55                   	push   %ebp
c0111a36:	89 e5                	mov    %esp,%ebp
c0111a38:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0111a3b:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0111a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a45:	8b 50 04             	mov    0x4(%eax),%edx
c0111a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a4b:	01 d0                	add    %edx,%eax
c0111a4d:	83 e8 01             	sub    $0x1,%eax
c0111a50:	ba 00 00 00 00       	mov    $0x0,%edx
c0111a55:	f7 75 f4             	divl   -0xc(%ebp)
c0111a58:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0111a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a5e:	8b 40 30             	mov    0x30(%eax),%eax
c0111a61:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111a68:	00 
c0111a69:	89 04 24             	mov    %eax,(%esp)
c0111a6c:	e8 9b 30 00 00       	call   c0114b0c <bitmap_getdata>
c0111a71:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111a74:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111a78:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111a7f:	00 
c0111a80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a84:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a87:	89 04 24             	mov    %eax,(%esp)
c0111a8a:	e8 49 fd ff ff       	call   c01117d8 <sfs_wblock>
}
c0111a8f:	c9                   	leave  
c0111a90:	c3                   	ret    

c0111a91 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0111a91:	55                   	push   %ebp
c0111a92:	89 e5                	mov    %esp,%ebp
c0111a94:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0111a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a9a:	89 04 24             	mov    %eax,(%esp)
c0111a9d:	e8 8b 00 00 00       	call   c0111b2d <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0111aa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0111aa5:	8b 40 38             	mov    0x38(%eax),%eax
c0111aa8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111aaf:	00 
c0111ab0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111ab7:	00 
c0111ab8:	89 04 24             	mov    %eax,(%esp)
c0111abb:	e8 c5 33 00 00       	call   c0114e85 <memset>
        while (nblks != 0) {
c0111ac0:	eb 3f                	jmp    c0111b01 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0111ac2:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ac5:	8b 40 38             	mov    0x38(%eax),%eax
c0111ac8:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0111acf:	00 
c0111ad0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111ad7:	00 
c0111ad8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111adb:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111adf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ae6:	89 04 24             	mov    %eax,(%esp)
c0111ae9:	e8 bc fb ff ff       	call   c01116aa <sfs_rwblock_nolock>
c0111aee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111af1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111af5:	74 02                	je     c0111af9 <sfs_clear_block+0x68>
                break;
c0111af7:	eb 0e                	jmp    c0111b07 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0111af9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0111afd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
        while (nblks != 0) {
c0111b01:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111b05:	75 bb                	jne    c0111ac2 <sfs_clear_block+0x31>
        }
    }
    unlock_sfs_io(sfs);
c0111b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b0a:	89 04 24             	mov    %eax,(%esp)
c0111b0d:	e8 47 00 00 00       	call   c0111b59 <unlock_sfs_io>
    return ret;
c0111b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111b15:	c9                   	leave  
c0111b16:	c3                   	ret    

c0111b17 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0111b17:	55                   	push   %ebp
c0111b18:	89 e5                	mov    %esp,%ebp
c0111b1a:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0111b1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b20:	83 c0 3c             	add    $0x3c,%eax
c0111b23:	89 04 24             	mov    %eax,(%esp)
c0111b26:	e8 5f 85 ff ff       	call   c010a08a <down>
}
c0111b2b:	c9                   	leave  
c0111b2c:	c3                   	ret    

c0111b2d <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0111b2d:	55                   	push   %ebp
c0111b2e:	89 e5                	mov    %esp,%ebp
c0111b30:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0111b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b36:	83 c0 48             	add    $0x48,%eax
c0111b39:	89 04 24             	mov    %eax,(%esp)
c0111b3c:	e8 49 85 ff ff       	call   c010a08a <down>
}
c0111b41:	c9                   	leave  
c0111b42:	c3                   	ret    

c0111b43 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0111b43:	55                   	push   %ebp
c0111b44:	89 e5                	mov    %esp,%ebp
c0111b46:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0111b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b4c:	83 c0 3c             	add    $0x3c,%eax
c0111b4f:	89 04 24             	mov    %eax,(%esp)
c0111b52:	e8 18 85 ff ff       	call   c010a06f <up>
}
c0111b57:	c9                   	leave  
c0111b58:	c3                   	ret    

c0111b59 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0111b59:	55                   	push   %ebp
c0111b5a:	89 e5                	mov    %esp,%ebp
c0111b5c:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0111b5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b62:	83 c0 48             	add    $0x48,%eax
c0111b65:	89 04 24             	mov    %eax,(%esp)
c0111b68:	e8 02 85 ff ff       	call   c010a06f <up>
}
c0111b6d:	c9                   	leave  
c0111b6e:	c3                   	ret    

c0111b6f <inode_ref_count>:
inode_ref_count(struct inode *node) {
c0111b6f:	55                   	push   %ebp
c0111b70:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0111b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b75:	8b 40 30             	mov    0x30(%eax),%eax
}
c0111b78:	5d                   	pop    %ebp
c0111b79:	c3                   	ret    

c0111b7a <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c0111b7a:	55                   	push   %ebp
c0111b7b:	89 e5                	mov    %esp,%ebp
c0111b7d:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0111b80:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b83:	83 c0 10             	add    $0x10,%eax
c0111b86:	89 04 24             	mov    %eax,(%esp)
c0111b89:	e8 fc 84 ff ff       	call   c010a08a <down>
}
c0111b8e:	c9                   	leave  
c0111b8f:	c3                   	ret    

c0111b90 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0111b90:	55                   	push   %ebp
c0111b91:	89 e5                	mov    %esp,%ebp
c0111b93:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0111b96:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b99:	83 c0 10             	add    $0x10,%eax
c0111b9c:	89 04 24             	mov    %eax,(%esp)
c0111b9f:	e8 cb 84 ff ff       	call   c010a06f <up>
}
c0111ba4:	c9                   	leave  
c0111ba5:	c3                   	ret    

c0111ba6 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0111ba6:	55                   	push   %ebp
c0111ba7:	89 e5                	mov    %esp,%ebp
c0111ba9:	83 ec 28             	sub    $0x28,%esp
c0111bac:	8b 45 08             	mov    0x8(%ebp),%eax
c0111baf:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0111bb3:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111bb7:	83 f8 01             	cmp    $0x1,%eax
c0111bba:	74 0c                	je     c0111bc8 <sfs_get_ops+0x22>
c0111bbc:	83 f8 02             	cmp    $0x2,%eax
c0111bbf:	75 0e                	jne    c0111bcf <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0111bc1:	b8 60 94 11 c0       	mov    $0xc0119460,%eax
c0111bc6:	eb 2b                	jmp    c0111bf3 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0111bc8:	b8 a0 94 11 c0       	mov    $0xc01194a0,%eax
c0111bcd:	eb 24                	jmp    c0111bf3 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0111bcf:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111bd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111bd7:	c7 44 24 08 e0 94 11 	movl   $0xc01194e0,0x8(%esp)
c0111bde:	c0 
c0111bdf:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0111be6:	00 
c0111be7:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111bee:	e8 00 e9 fe ff       	call   c01004f3 <__panic>
}
c0111bf3:	c9                   	leave  
c0111bf4:	c3                   	ret    

c0111bf5 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0111bf5:	55                   	push   %ebp
c0111bf6:	89 e5                	mov    %esp,%ebp
c0111bf8:	53                   	push   %ebx
c0111bf9:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c0111bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0111bff:	8b 58 68             	mov    0x68(%eax),%ebx
c0111c02:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0111c09:	00 
c0111c0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c0d:	89 04 24             	mov    %eax,(%esp)
c0111c10:	e8 00 3b 00 00       	call   c0115715 <hash32>
c0111c15:	c1 e0 03             	shl    $0x3,%eax
c0111c18:	01 d8                	add    %ebx,%eax
}
c0111c1a:	83 c4 14             	add    $0x14,%esp
c0111c1d:	5b                   	pop    %ebx
c0111c1e:	5d                   	pop    %ebp
c0111c1f:	c3                   	ret    

c0111c20 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0111c20:	55                   	push   %ebp
c0111c21:	89 e5                	mov    %esp,%ebp
c0111c23:	53                   	push   %ebx
c0111c24:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c0111c27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c2a:	83 c0 1c             	add    $0x1c,%eax
c0111c2d:	8b 55 08             	mov    0x8(%ebp),%edx
c0111c30:	83 c2 60             	add    $0x60,%edx
c0111c33:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111c36:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111c3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c42:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c0111c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c48:	8b 40 04             	mov    0x4(%eax),%eax
c0111c4b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111c4e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0111c51:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111c54:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0111c57:	89 45 dc             	mov    %eax,-0x24(%ebp)
    prev->next = next->prev = elm;
c0111c5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c5d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111c60:	89 10                	mov    %edx,(%eax)
c0111c62:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c65:	8b 10                	mov    (%eax),%edx
c0111c67:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c6a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0111c6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c70:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111c73:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111c76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c79:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111c7c:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c0111c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c81:	8d 58 24             	lea    0x24(%eax),%ebx
c0111c84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c87:	8b 40 04             	mov    0x4(%eax),%eax
c0111c8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c91:	89 04 24             	mov    %eax,(%esp)
c0111c94:	e8 5c ff ff ff       	call   c0111bf5 <sfs_hash_list>
c0111c99:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111c9c:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0111c9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ca2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0111ca5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111ca8:	89 45 cc             	mov    %eax,-0x34(%ebp)
    __list_add(elm, listelm, listelm->next);
c0111cab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111cae:	8b 40 04             	mov    0x4(%eax),%eax
c0111cb1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111cb4:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0111cb7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0111cba:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0111cbd:	89 45 c0             	mov    %eax,-0x40(%ebp)
    prev->next = next->prev = elm;
c0111cc0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111cc3:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0111cc6:	89 10                	mov    %edx,(%eax)
c0111cc8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111ccb:	8b 10                	mov    (%eax),%edx
c0111ccd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111cd0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0111cd3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111cd6:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0111cd9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111cdc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111cdf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111ce2:	89 10                	mov    %edx,(%eax)
}
c0111ce4:	83 c4 54             	add    $0x54,%esp
c0111ce7:	5b                   	pop    %ebx
c0111ce8:	5d                   	pop    %ebp
c0111ce9:	c3                   	ret    

c0111cea <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0111cea:	55                   	push   %ebp
c0111ceb:	89 e5                	mov    %esp,%ebp
c0111ced:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0111cf0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cf3:	83 c0 1c             	add    $0x1c,%eax
c0111cf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c0111cf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0111cfc:	8b 40 04             	mov    0x4(%eax),%eax
c0111cff:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0111d02:	8b 12                	mov    (%edx),%edx
c0111d04:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0111d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c0111d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0111d0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111d10:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0111d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d16:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0111d19:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c0111d1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d1e:	83 c0 24             	add    $0x24,%eax
c0111d21:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __list_del(listelm->prev, listelm->next);
c0111d24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d27:	8b 40 04             	mov    0x4(%eax),%eax
c0111d2a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111d2d:	8b 12                	mov    (%edx),%edx
c0111d2f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0111d32:	89 45 e8             	mov    %eax,-0x18(%ebp)
    prev->next = next;
c0111d35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d38:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111d3b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0111d3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111d41:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111d44:	89 10                	mov    %edx,(%eax)
}
c0111d46:	c9                   	leave  
c0111d47:	c3                   	ret    

c0111d48 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c0111d48:	55                   	push   %ebp
c0111d49:	89 e5                	mov    %esp,%ebp
c0111d4b:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c0111d4e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111d52:	74 2a                	je     c0111d7e <sfs_block_inuse+0x36>
c0111d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d57:	8b 40 04             	mov    0x4(%eax),%eax
c0111d5a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111d5d:	76 1f                	jbe    c0111d7e <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0111d5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d62:	8b 40 30             	mov    0x30(%eax),%eax
c0111d65:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111d68:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111d6c:	89 04 24             	mov    %eax,(%esp)
c0111d6f:	e8 dc 2c 00 00       	call   c0114a50 <bitmap_test>
c0111d74:	85 c0                	test   %eax,%eax
c0111d76:	0f 94 c0             	sete   %al
c0111d79:	0f b6 c0             	movzbl %al,%eax
c0111d7c:	eb 2d                	jmp    c0111dab <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c0111d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d81:	8b 40 04             	mov    0x4(%eax),%eax
c0111d84:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111d87:	89 54 24 10          	mov    %edx,0x10(%esp)
c0111d8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111d8f:	c7 44 24 08 10 95 11 	movl   $0xc0119510,0x8(%esp)
c0111d96:	c0 
c0111d97:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0111d9e:	00 
c0111d9f:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111da6:	e8 48 e7 fe ff       	call   c01004f3 <__panic>
}
c0111dab:	c9                   	leave  
c0111dac:	c3                   	ret    

c0111dad <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c0111dad:	55                   	push   %ebp
c0111dae:	89 e5                	mov    %esp,%ebp
c0111db0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0111db3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111db6:	8b 40 30             	mov    0x30(%eax),%eax
c0111db9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111dbc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111dc0:	89 04 24             	mov    %eax,(%esp)
c0111dc3:	e8 26 2b 00 00       	call   c01148ee <bitmap_alloc>
c0111dc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111dcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111dcf:	74 08                	je     c0111dd9 <sfs_block_alloc+0x2c>
        return ret;
c0111dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111dd4:	e9 9f 00 00 00       	jmp    c0111e78 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c0111dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ddc:	8b 40 08             	mov    0x8(%eax),%eax
c0111ddf:	85 c0                	test   %eax,%eax
c0111de1:	75 24                	jne    c0111e07 <sfs_block_alloc+0x5a>
c0111de3:	c7 44 24 0c 42 95 11 	movl   $0xc0119542,0xc(%esp)
c0111dea:	c0 
c0111deb:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0111df2:	c0 
c0111df3:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111dfa:	00 
c0111dfb:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111e02:	e8 ec e6 fe ff       	call   c01004f3 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0111e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e0a:	8b 40 08             	mov    0x8(%eax),%eax
c0111e0d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111e10:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e13:	89 50 08             	mov    %edx,0x8(%eax)
c0111e16:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e19:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c0111e20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e23:	8b 00                	mov    (%eax),%eax
c0111e25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e2c:	89 04 24             	mov    %eax,(%esp)
c0111e2f:	e8 14 ff ff ff       	call   c0111d48 <sfs_block_inuse>
c0111e34:	85 c0                	test   %eax,%eax
c0111e36:	75 24                	jne    c0111e5c <sfs_block_alloc+0xaf>
c0111e38:	c7 44 24 0c 74 95 11 	movl   $0xc0119574,0xc(%esp)
c0111e3f:	c0 
c0111e40:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0111e47:	c0 
c0111e48:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0111e4f:	00 
c0111e50:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111e57:	e8 97 e6 fe ff       	call   c01004f3 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c0111e5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e5f:	8b 00                	mov    (%eax),%eax
c0111e61:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111e68:	00 
c0111e69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e70:	89 04 24             	mov    %eax,(%esp)
c0111e73:	e8 19 fc ff ff       	call   c0111a91 <sfs_clear_block>
}
c0111e78:	c9                   	leave  
c0111e79:	c3                   	ret    

c0111e7a <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c0111e7a:	55                   	push   %ebp
c0111e7b:	89 e5                	mov    %esp,%ebp
c0111e7d:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0111e80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e8a:	89 04 24             	mov    %eax,(%esp)
c0111e8d:	e8 b6 fe ff ff       	call   c0111d48 <sfs_block_inuse>
c0111e92:	85 c0                	test   %eax,%eax
c0111e94:	75 24                	jne    c0111eba <sfs_block_free+0x40>
c0111e96:	c7 44 24 0c 95 95 11 	movl   $0xc0119595,0xc(%esp)
c0111e9d:	c0 
c0111e9e:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0111ea5:	c0 
c0111ea6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0111ead:	00 
c0111eae:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111eb5:	e8 39 e6 fe ff       	call   c01004f3 <__panic>
    bitmap_free(sfs->freemap, ino);
c0111eba:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ebd:	8b 40 30             	mov    0x30(%eax),%eax
c0111ec0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111ec3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111ec7:	89 04 24             	mov    %eax,(%esp)
c0111eca:	e8 b3 2b 00 00       	call   c0114a82 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0111ecf:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ed2:	8b 40 08             	mov    0x8(%eax),%eax
c0111ed5:	8d 50 01             	lea    0x1(%eax),%edx
c0111ed8:	8b 45 08             	mov    0x8(%ebp),%eax
c0111edb:	89 50 08             	mov    %edx,0x8(%eax)
c0111ede:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ee1:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0111ee8:	c9                   	leave  
c0111ee9:	c3                   	ret    

c0111eea <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0111eea:	55                   	push   %ebp
c0111eeb:	89 e5                	mov    %esp,%ebp
c0111eed:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0111ef0:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0111ef7:	e8 f8 e3 ff ff       	call   c01102f4 <__alloc_inode>
c0111efc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111eff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f03:	0f 84 b5 00 00 00    	je     c0111fbe <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0111f09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f0c:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0111f10:	0f b7 c0             	movzwl %ax,%eax
c0111f13:	89 04 24             	mov    %eax,(%esp)
c0111f16:	e8 8b fc ff ff       	call   c0111ba6 <sfs_get_ops>
c0111f1b:	8b 55 08             	mov    0x8(%ebp),%edx
c0111f1e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111f22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f29:	89 04 24             	mov    %eax,(%esp)
c0111f2c:	e8 ec e3 ff ff       	call   c011031d <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111f37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111f3b:	74 0d                	je     c0111f4a <sfs_create_inode+0x60>
c0111f3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f40:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111f43:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111f48:	74 24                	je     c0111f6e <sfs_create_inode+0x84>
c0111f4a:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0111f51:	c0 
c0111f52:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0111f59:	c0 
c0111f5a:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111f61:	00 
c0111f62:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0111f69:	e8 85 e5 fe ff       	call   c01004f3 <__panic>
c0111f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f71:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0111f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f77:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111f7a:	89 10                	mov    %edx,(%eax)
c0111f7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f7f:	8b 55 10             	mov    0x10(%ebp),%edx
c0111f82:	89 50 04             	mov    %edx,0x4(%eax)
c0111f85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f88:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0111f8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f92:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c0111f99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f9c:	83 c0 10             	add    $0x10,%eax
c0111f9f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111fa6:	00 
c0111fa7:	89 04 24             	mov    %eax,(%esp)
c0111faa:	e8 4d 7f ff ff       	call   c0109efc <sem_init>
        *node_store = node;
c0111faf:	8b 45 14             	mov    0x14(%ebp),%eax
c0111fb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111fb5:	89 10                	mov    %edx,(%eax)
        return 0;
c0111fb7:	b8 00 00 00 00       	mov    $0x0,%eax
c0111fbc:	eb 05                	jmp    c0111fc3 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c0111fbe:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111fc3:	c9                   	leave  
c0111fc4:	c3                   	ret    

c0111fc5 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0111fc5:	55                   	push   %ebp
c0111fc6:	89 e5                	mov    %esp,%ebp
c0111fc8:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0111fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111fce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fd5:	89 04 24             	mov    %eax,(%esp)
c0111fd8:	e8 18 fc ff ff       	call   c0111bf5 <sfs_hash_list>
c0111fdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111fe0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0111fe6:	eb 3e                	jmp    c0112026 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0111fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111feb:	83 e8 24             	sub    $0x24,%eax
c0111fee:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0111ff1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ff4:	8b 40 04             	mov    0x4(%eax),%eax
c0111ff7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111ffa:	75 2a                	jne    c0112026 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c0111ffc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111fff:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0112002:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112005:	89 04 24             	mov    %eax,(%esp)
c0112008:	e8 c2 e3 ff ff       	call   c01103cf <inode_ref_inc>
c011200d:	83 f8 01             	cmp    $0x1,%eax
c0112010:	75 0f                	jne    c0112021 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c0112012:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112015:	8b 40 0c             	mov    0xc(%eax),%eax
c0112018:	8d 50 01             	lea    0x1(%eax),%edx
c011201b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011201e:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c0112021:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112024:	eb 1c                	jmp    c0112042 <lookup_sfs_nolock+0x7d>
c0112026:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112029:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c011202c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011202f:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0112032:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112038:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011203b:	75 ab                	jne    c0111fe8 <lookup_sfs_nolock+0x23>
        }
    }
    return NULL;
c011203d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112042:	c9                   	leave  
c0112043:	c3                   	ret    

c0112044 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0112044:	55                   	push   %ebp
c0112045:	89 e5                	mov    %esp,%ebp
c0112047:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c011204a:	8b 45 08             	mov    0x8(%ebp),%eax
c011204d:	89 04 24             	mov    %eax,(%esp)
c0112050:	e8 c2 fa ff ff       	call   c0111b17 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0112055:	8b 45 10             	mov    0x10(%ebp),%eax
c0112058:	89 44 24 04          	mov    %eax,0x4(%esp)
c011205c:	8b 45 08             	mov    0x8(%ebp),%eax
c011205f:	89 04 24             	mov    %eax,(%esp)
c0112062:	e8 5e ff ff ff       	call   c0111fc5 <lookup_sfs_nolock>
c0112067:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011206a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011206d:	85 c0                	test   %eax,%eax
c011206f:	74 05                	je     c0112076 <sfs_load_inode+0x32>
        goto out_unlock;
c0112071:	e9 3c 01 00 00       	jmp    c01121b2 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c0112076:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c011207d:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112084:	e8 79 3b ff ff       	call   c0105c02 <kmalloc>
c0112089:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011208c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112090:	75 05                	jne    c0112097 <sfs_load_inode+0x53>
        goto failed_unlock;
c0112092:	e9 40 01 00 00       	jmp    c01121d7 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112097:	8b 45 10             	mov    0x10(%ebp),%eax
c011209a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011209e:	8b 45 08             	mov    0x8(%ebp),%eax
c01120a1:	89 04 24             	mov    %eax,(%esp)
c01120a4:	e8 9f fc ff ff       	call   c0111d48 <sfs_block_inuse>
c01120a9:	85 c0                	test   %eax,%eax
c01120ab:	75 24                	jne    c01120d1 <sfs_load_inode+0x8d>
c01120ad:	c7 44 24 0c 95 95 11 	movl   $0xc0119595,0xc(%esp)
c01120b4:	c0 
c01120b5:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01120bc:	c0 
c01120bd:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c01120c4:	00 
c01120c5:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01120cc:	e8 22 e4 fe ff       	call   c01004f3 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c01120d1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01120d8:	00 
c01120d9:	8b 45 10             	mov    0x10(%ebp),%eax
c01120dc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01120e0:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01120e7:	00 
c01120e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01120f2:	89 04 24             	mov    %eax,(%esp)
c01120f5:	e8 0e f7 ff ff       	call   c0111808 <sfs_rbuf>
c01120fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01120fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112101:	74 05                	je     c0112108 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c0112103:	e9 c4 00 00 00       	jmp    c01121cc <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c0112108:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011210b:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011210f:	66 85 c0             	test   %ax,%ax
c0112112:	75 24                	jne    c0112138 <sfs_load_inode+0xf4>
c0112114:	c7 44 24 0c e6 95 11 	movl   $0xc01195e6,0xc(%esp)
c011211b:	c0 
c011211c:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112123:	c0 
c0112124:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c011212b:	00 
c011212c:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112133:	e8 bb e3 fe ff       	call   c01004f3 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c0112138:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011213b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011213f:	8b 45 10             	mov    0x10(%ebp),%eax
c0112142:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112146:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112149:	89 44 24 04          	mov    %eax,0x4(%esp)
c011214d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112150:	89 04 24             	mov    %eax,(%esp)
c0112153:	e8 92 fd ff ff       	call   c0111eea <sfs_create_inode>
c0112158:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011215b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011215f:	74 02                	je     c0112163 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c0112161:	eb 69                	jmp    c01121cc <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112163:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112166:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112169:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011216d:	74 0d                	je     c011217c <sfs_load_inode+0x138>
c011216f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112172:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112175:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011217a:	74 24                	je     c01121a0 <sfs_load_inode+0x15c>
c011217c:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0112183:	c0 
c0112184:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c011218b:	c0 
c011218c:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112193:	00 
c0112194:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c011219b:	e8 53 e3 fe ff       	call   c01004f3 <__panic>
c01121a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01121a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01121a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01121aa:	89 04 24             	mov    %eax,(%esp)
c01121ad:	e8 6e fa ff ff       	call   c0111c20 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c01121b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01121b5:	89 04 24             	mov    %eax,(%esp)
c01121b8:	e8 86 f9 ff ff       	call   c0111b43 <unlock_sfs_fs>
    *node_store = node;
c01121bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01121c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121c3:	89 10                	mov    %edx,(%eax)
    return 0;
c01121c5:	b8 00 00 00 00       	mov    $0x0,%eax
c01121ca:	eb 19                	jmp    c01121e5 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c01121cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121cf:	89 04 24             	mov    %eax,(%esp)
c01121d2:	e8 46 3a ff ff       	call   c0105c1d <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c01121d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01121da:	89 04 24             	mov    %eax,(%esp)
c01121dd:	e8 61 f9 ff ff       	call   c0111b43 <unlock_sfs_fs>
    return ret;
c01121e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01121e5:	c9                   	leave  
c01121e6:	c3                   	ret    

c01121e7 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c01121e7:	55                   	push   %ebp
c01121e8:	89 e5                	mov    %esp,%ebp
c01121ea:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c01121ed:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01121f4:	76 24                	jbe    c011221a <sfs_bmap_get_sub_nolock+0x33>
c01121f6:	c7 44 24 0c f7 95 11 	movl   $0xc01195f7,0xc(%esp)
c01121fd:	c0 
c01121fe:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112205:	c0 
c0112206:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c011220d:	00 
c011220e:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112215:	e8 d9 e2 fe ff       	call   c01004f3 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c011221a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0112221:	8b 45 10             	mov    0x10(%ebp),%eax
c0112224:	c1 e0 02             	shl    $0x2,%eax
c0112227:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c011222a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011222d:	8b 00                	mov    (%eax),%eax
c011222f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112232:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112235:	85 c0                	test   %eax,%eax
c0112237:	74 50                	je     c0112289 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112239:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011223c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011223f:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112243:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112247:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011224e:	00 
c011224f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112252:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112256:	8b 45 08             	mov    0x8(%ebp),%eax
c0112259:	89 04 24             	mov    %eax,(%esp)
c011225c:	e8 a7 f5 ff ff       	call   c0111808 <sfs_rbuf>
c0112261:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112264:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112268:	74 08                	je     c0112272 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c011226a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011226d:	e9 eb 00 00 00       	jmp    c011235d <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112272:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112275:	85 c0                	test   %eax,%eax
c0112277:	0f 85 9c 00 00 00    	jne    c0112319 <sfs_bmap_get_sub_nolock+0x132>
c011227d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112281:	0f 84 92 00 00 00    	je     c0112319 <sfs_bmap_get_sub_nolock+0x132>
c0112287:	eb 2e                	jmp    c01122b7 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c0112289:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011228d:	75 05                	jne    c0112294 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c011228f:	e9 85 00 00 00       	jmp    c0112319 <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112294:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112297:	89 44 24 04          	mov    %eax,0x4(%esp)
c011229b:	8b 45 08             	mov    0x8(%ebp),%eax
c011229e:	89 04 24             	mov    %eax,(%esp)
c01122a1:	e8 07 fb ff ff       	call   c0111dad <sfs_block_alloc>
c01122a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01122a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01122ad:	74 08                	je     c01122b7 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c01122af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122b2:	e9 a6 00 00 00       	jmp    c011235d <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c01122b7:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01122ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122be:	8b 45 08             	mov    0x8(%ebp),%eax
c01122c1:	89 04 24             	mov    %eax,(%esp)
c01122c4:	e8 e4 fa ff ff       	call   c0111dad <sfs_block_alloc>
c01122c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01122cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01122d0:	74 02                	je     c01122d4 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c01122d2:	eb 68                	jmp    c011233c <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01122d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01122da:	89 54 24 10          	mov    %edx,0x10(%esp)
c01122de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01122e2:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01122e9:	00 
c01122ea:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01122ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01122f4:	89 04 24             	mov    %eax,(%esp)
c01122f7:	e8 c5 f5 ff ff       	call   c01118c1 <sfs_wbuf>
c01122fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01122ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112303:	74 14                	je     c0112319 <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112305:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112308:	89 44 24 04          	mov    %eax,0x4(%esp)
c011230c:	8b 45 08             	mov    0x8(%ebp),%eax
c011230f:	89 04 24             	mov    %eax,(%esp)
c0112312:	e8 63 fb ff ff       	call   c0111e7a <sfs_block_free>
        goto failed_cleanup;
c0112317:	eb 23                	jmp    c011233c <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112319:	8b 45 0c             	mov    0xc(%ebp),%eax
c011231c:	8b 10                	mov    (%eax),%edx
c011231e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112321:	39 c2                	cmp    %eax,%edx
c0112323:	74 08                	je     c011232d <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c0112325:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112328:	8b 45 0c             	mov    0xc(%ebp),%eax
c011232b:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c011232d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112330:	8b 45 18             	mov    0x18(%ebp),%eax
c0112333:	89 10                	mov    %edx,(%eax)
    return 0;
c0112335:	b8 00 00 00 00       	mov    $0x0,%eax
c011233a:	eb 21                	jmp    c011235d <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c011233c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011233f:	8b 10                	mov    (%eax),%edx
c0112341:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112344:	39 c2                	cmp    %eax,%edx
c0112346:	74 12                	je     c011235a <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112348:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011234b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011234f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112352:	89 04 24             	mov    %eax,(%esp)
c0112355:	e8 20 fb ff ff       	call   c0111e7a <sfs_block_free>
    }
    return ret;
c011235a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011235d:	c9                   	leave  
c011235e:	c3                   	ret    

c011235f <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c011235f:	55                   	push   %ebp
c0112360:	89 e5                	mov    %esp,%ebp
c0112362:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112365:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112368:	8b 00                	mov    (%eax),%eax
c011236a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c011236d:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112371:	77 5e                	ja     c01123d1 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112376:	8b 55 10             	mov    0x10(%ebp),%edx
c0112379:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011237d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112380:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112383:	85 c0                	test   %eax,%eax
c0112385:	75 45                	jne    c01123cc <sfs_bmap_get_nolock+0x6d>
c0112387:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011238b:	74 3f                	je     c01123cc <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011238d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112390:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112394:	8b 45 08             	mov    0x8(%ebp),%eax
c0112397:	89 04 24             	mov    %eax,(%esp)
c011239a:	e8 0e fa ff ff       	call   c0111dad <sfs_block_alloc>
c011239f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01123a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01123a6:	74 08                	je     c01123b0 <sfs_bmap_get_nolock+0x51>
                return ret;
c01123a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01123ab:	e9 2f 01 00 00       	jmp    c01124df <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c01123b0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01123b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123b6:	8b 55 10             	mov    0x10(%ebp),%edx
c01123b9:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c01123bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123c0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c01123c7:	e9 c5 00 00 00       	jmp    c0112491 <sfs_bmap_get_nolock+0x132>
c01123cc:	e9 c0 00 00 00       	jmp    c0112491 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c01123d1:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c01123d5:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01123dc:	0f 87 93 00 00 00    	ja     c0112475 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c01123e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123e5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01123e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c01123eb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01123ee:	89 44 24 10          	mov    %eax,0x10(%esp)
c01123f2:	8b 45 14             	mov    0x14(%ebp),%eax
c01123f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01123f9:	8b 45 10             	mov    0x10(%ebp),%eax
c01123fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112400:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112403:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112407:	8b 45 08             	mov    0x8(%ebp),%eax
c011240a:	89 04 24             	mov    %eax,(%esp)
c011240d:	e8 d5 fd ff ff       	call   c01121e7 <sfs_bmap_get_sub_nolock>
c0112412:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112415:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112419:	74 08                	je     c0112423 <sfs_bmap_get_nolock+0xc4>
            return ret;
c011241b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011241e:	e9 bc 00 00 00       	jmp    c01124df <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112423:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112426:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112429:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011242c:	39 c2                	cmp    %eax,%edx
c011242e:	74 43                	je     c0112473 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112430:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112433:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112436:	85 c0                	test   %eax,%eax
c0112438:	74 24                	je     c011245e <sfs_bmap_get_nolock+0xff>
c011243a:	c7 44 24 0c 0e 96 11 	movl   $0xc011960e,0xc(%esp)
c0112441:	c0 
c0112442:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112449:	c0 
c011244a:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112451:	00 
c0112452:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112459:	e8 95 e0 fe ff       	call   c01004f3 <__panic>
            din->indirect = ent;
c011245e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112464:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112467:	8b 45 0c             	mov    0xc(%ebp),%eax
c011246a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112471:	eb 1e                	jmp    c0112491 <sfs_bmap_get_nolock+0x132>
c0112473:	eb 1c                	jmp    c0112491 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112475:	c7 44 24 08 24 96 11 	movl   $0xc0119624,0x8(%esp)
c011247c:	c0 
c011247d:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112484:	00 
c0112485:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c011248c:	e8 62 e0 fe ff       	call   c01004f3 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112491:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112494:	85 c0                	test   %eax,%eax
c0112496:	74 3a                	je     c01124d2 <sfs_bmap_get_nolock+0x173>
c0112498:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011249b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011249f:	8b 45 08             	mov    0x8(%ebp),%eax
c01124a2:	89 04 24             	mov    %eax,(%esp)
c01124a5:	e8 9e f8 ff ff       	call   c0111d48 <sfs_block_inuse>
c01124aa:	85 c0                	test   %eax,%eax
c01124ac:	75 24                	jne    c01124d2 <sfs_bmap_get_nolock+0x173>
c01124ae:	c7 44 24 0c 50 96 11 	movl   $0xc0119650,0xc(%esp)
c01124b5:	c0 
c01124b6:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01124bd:	c0 
c01124be:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c01124c5:	00 
c01124c6:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01124cd:	e8 21 e0 fe ff       	call   c01004f3 <__panic>
    *ino_store = ino;
c01124d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01124d5:	8b 45 18             	mov    0x18(%ebp),%eax
c01124d8:	89 10                	mov    %edx,(%eax)
    return 0;
c01124da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01124df:	c9                   	leave  
c01124e0:	c3                   	ret    

c01124e1 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c01124e1:	55                   	push   %ebp
c01124e2:	89 e5                	mov    %esp,%ebp
c01124e4:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c01124e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01124f1:	89 04 24             	mov    %eax,(%esp)
c01124f4:	e8 4f f8 ff ff       	call   c0111d48 <sfs_block_inuse>
c01124f9:	85 c0                	test   %eax,%eax
c01124fb:	74 09                	je     c0112506 <sfs_bmap_free_sub_nolock+0x25>
c01124fd:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112504:	76 24                	jbe    c011252a <sfs_bmap_free_sub_nolock+0x49>
c0112506:	c7 44 24 0c 78 96 11 	movl   $0xc0119678,0xc(%esp)
c011250d:	c0 
c011250e:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112515:	c0 
c0112516:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c011251d:	00 
c011251e:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112525:	e8 c9 df fe ff       	call   c01004f3 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c011252a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112531:	8b 45 10             	mov    0x10(%ebp),%eax
c0112534:	c1 e0 02             	shl    $0x2,%eax
c0112537:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011253a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011253d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112541:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112544:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112548:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011254f:	00 
c0112550:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112553:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112557:	8b 45 08             	mov    0x8(%ebp),%eax
c011255a:	89 04 24             	mov    %eax,(%esp)
c011255d:	e8 a6 f2 ff ff       	call   c0111808 <sfs_rbuf>
c0112562:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112565:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112569:	74 05                	je     c0112570 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c011256b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011256e:	eb 54                	jmp    c01125c4 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112570:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112573:	85 c0                	test   %eax,%eax
c0112575:	74 48                	je     c01125bf <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112577:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011257a:	89 44 24 10          	mov    %eax,0x10(%esp)
c011257e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112581:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112585:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011258c:	00 
c011258d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112590:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112594:	8b 45 08             	mov    0x8(%ebp),%eax
c0112597:	89 04 24             	mov    %eax,(%esp)
c011259a:	e8 22 f3 ff ff       	call   c01118c1 <sfs_wbuf>
c011259f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01125a6:	74 05                	je     c01125ad <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c01125a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125ab:	eb 17                	jmp    c01125c4 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c01125ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01125b7:	89 04 24             	mov    %eax,(%esp)
c01125ba:	e8 bb f8 ff ff       	call   c0111e7a <sfs_block_free>
    }
    return 0;
c01125bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01125c4:	c9                   	leave  
c01125c5:	c3                   	ret    

c01125c6 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c01125c6:	55                   	push   %ebp
c01125c7:	89 e5                	mov    %esp,%ebp
c01125c9:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c01125cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01125cf:	8b 00                	mov    (%eax),%eax
c01125d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c01125d4:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c01125d8:	77 44                	ja     c011261e <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c01125da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125dd:	8b 55 10             	mov    0x10(%ebp),%edx
c01125e0:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c01125e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01125eb:	74 2a                	je     c0112617 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c01125ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01125f7:	89 04 24             	mov    %eax,(%esp)
c01125fa:	e8 7b f8 ff ff       	call   c0111e7a <sfs_block_free>
            din->direct[index] = 0;
c01125ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112602:	8b 55 10             	mov    0x10(%ebp),%edx
c0112605:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011260c:	00 
            sin->dirty = 1;
c011260d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112610:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112617:	b8 00 00 00 00       	mov    $0x0,%eax
c011261c:	eb 4f                	jmp    c011266d <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c011261e:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112622:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112629:	77 3d                	ja     c0112668 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c011262b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011262e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112631:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112634:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112638:	74 27                	je     c0112661 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c011263a:	8b 45 10             	mov    0x10(%ebp),%eax
c011263d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112641:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112644:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112648:	8b 45 08             	mov    0x8(%ebp),%eax
c011264b:	89 04 24             	mov    %eax,(%esp)
c011264e:	e8 8e fe ff ff       	call   c01124e1 <sfs_bmap_free_sub_nolock>
c0112653:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112656:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011265a:	74 05                	je     c0112661 <sfs_bmap_free_nolock+0x9b>
                return ret;
c011265c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011265f:	eb 0c                	jmp    c011266d <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112661:	b8 00 00 00 00       	mov    $0x0,%eax
c0112666:	eb 05                	jmp    c011266d <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112668:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011266d:	c9                   	leave  
c011266e:	c3                   	ret    

c011266f <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c011266f:	55                   	push   %ebp
c0112670:	89 e5                	mov    %esp,%ebp
c0112672:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112675:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112678:	8b 00                	mov    (%eax),%eax
c011267a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c011267d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112680:	8b 40 08             	mov    0x8(%eax),%eax
c0112683:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112686:	73 24                	jae    c01126ac <sfs_bmap_load_nolock+0x3d>
c0112688:	c7 44 24 0c ac 96 11 	movl   $0xc01196ac,0xc(%esp)
c011268f:	c0 
c0112690:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112697:	c0 
c0112698:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c011269f:	00 
c01126a0:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01126a7:	e8 47 de fe ff       	call   c01004f3 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c01126ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126af:	8b 40 08             	mov    0x8(%eax),%eax
c01126b2:	3b 45 10             	cmp    0x10(%ebp),%eax
c01126b5:	0f 94 c0             	sete   %al
c01126b8:	0f b6 c0             	movzbl %al,%eax
c01126bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c01126be:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01126c1:	89 44 24 10          	mov    %eax,0x10(%esp)
c01126c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01126cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01126cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01126d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126da:	8b 45 08             	mov    0x8(%ebp),%eax
c01126dd:	89 04 24             	mov    %eax,(%esp)
c01126e0:	e8 7a fc ff ff       	call   c011235f <sfs_bmap_get_nolock>
c01126e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01126e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01126ec:	74 05                	je     c01126f3 <sfs_bmap_load_nolock+0x84>
        return ret;
c01126ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126f1:	eb 62                	jmp    c0112755 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c01126f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01126f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01126fd:	89 04 24             	mov    %eax,(%esp)
c0112700:	e8 43 f6 ff ff       	call   c0111d48 <sfs_block_inuse>
c0112705:	85 c0                	test   %eax,%eax
c0112707:	75 24                	jne    c011272d <sfs_bmap_load_nolock+0xbe>
c0112709:	c7 44 24 0c 95 95 11 	movl   $0xc0119595,0xc(%esp)
c0112710:	c0 
c0112711:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112718:	c0 
c0112719:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112720:	00 
c0112721:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112728:	e8 c6 dd fe ff       	call   c01004f3 <__panic>
    if (create) {
c011272d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112731:	74 0f                	je     c0112742 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112736:	8b 40 08             	mov    0x8(%eax),%eax
c0112739:	8d 50 01             	lea    0x1(%eax),%edx
c011273c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011273f:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112742:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112746:	74 08                	je     c0112750 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112748:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011274b:	8b 45 14             	mov    0x14(%ebp),%eax
c011274e:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112750:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112755:	c9                   	leave  
c0112756:	c3                   	ret    

c0112757 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112757:	55                   	push   %ebp
c0112758:	89 e5                	mov    %esp,%ebp
c011275a:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c011275d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112760:	8b 00                	mov    (%eax),%eax
c0112762:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112765:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112768:	8b 40 08             	mov    0x8(%eax),%eax
c011276b:	85 c0                	test   %eax,%eax
c011276d:	75 24                	jne    c0112793 <sfs_bmap_truncate_nolock+0x3c>
c011276f:	c7 44 24 0c c1 96 11 	movl   $0xc01196c1,0xc(%esp)
c0112776:	c0 
c0112777:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c011277e:	c0 
c011277f:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112786:	00 
c0112787:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c011278e:	e8 60 dd fe ff       	call   c01004f3 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112796:	8b 40 08             	mov    0x8(%eax),%eax
c0112799:	83 e8 01             	sub    $0x1,%eax
c011279c:	89 44 24 08          	mov    %eax,0x8(%esp)
c01127a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01127aa:	89 04 24             	mov    %eax,(%esp)
c01127ad:	e8 14 fe ff ff       	call   c01125c6 <sfs_bmap_free_nolock>
c01127b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01127b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01127b9:	74 05                	je     c01127c0 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c01127bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127be:	eb 1e                	jmp    c01127de <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c01127c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127c3:	8b 40 08             	mov    0x8(%eax),%eax
c01127c6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01127c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127cc:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c01127cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127d2:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c01127d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01127de:	c9                   	leave  
c01127df:	c3                   	ret    

c01127e0 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c01127e0:	55                   	push   %ebp
c01127e1:	89 e5                	mov    %esp,%ebp
c01127e3:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c01127e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127e9:	8b 00                	mov    (%eax),%eax
c01127eb:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01127ef:	66 83 f8 02          	cmp    $0x2,%ax
c01127f3:	75 15                	jne    c011280a <sfs_dirent_read_nolock+0x2a>
c01127f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01127f9:	78 0f                	js     c011280a <sfs_dirent_read_nolock+0x2a>
c01127fb:	8b 55 10             	mov    0x10(%ebp),%edx
c01127fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112801:	8b 00                	mov    (%eax),%eax
c0112803:	8b 40 08             	mov    0x8(%eax),%eax
c0112806:	39 c2                	cmp    %eax,%edx
c0112808:	72 24                	jb     c011282e <sfs_dirent_read_nolock+0x4e>
c011280a:	c7 44 24 0c d4 96 11 	movl   $0xc01196d4,0xc(%esp)
c0112811:	c0 
c0112812:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112819:	c0 
c011281a:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112821:	00 
c0112822:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112829:	e8 c5 dc fe ff       	call   c01004f3 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c011282e:	8b 45 10             	mov    0x10(%ebp),%eax
c0112831:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112834:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112838:	89 44 24 08          	mov    %eax,0x8(%esp)
c011283c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011283f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112843:	8b 45 08             	mov    0x8(%ebp),%eax
c0112846:	89 04 24             	mov    %eax,(%esp)
c0112849:	e8 21 fe ff ff       	call   c011266f <sfs_bmap_load_nolock>
c011284e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112851:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112855:	74 08                	je     c011285f <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011285a:	e9 80 00 00 00       	jmp    c01128df <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c011285f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112862:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112866:	8b 45 08             	mov    0x8(%ebp),%eax
c0112869:	89 04 24             	mov    %eax,(%esp)
c011286c:	e8 d7 f4 ff ff       	call   c0111d48 <sfs_block_inuse>
c0112871:	85 c0                	test   %eax,%eax
c0112873:	75 24                	jne    c0112899 <sfs_dirent_read_nolock+0xb9>
c0112875:	c7 44 24 0c 95 95 11 	movl   $0xc0119595,0xc(%esp)
c011287c:	c0 
c011287d:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112884:	c0 
c0112885:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c011288c:	00 
c011288d:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112894:	e8 5a dc fe ff       	call   c01004f3 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0112899:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011289c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01128a3:	00 
c01128a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01128a8:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c01128af:	00 
c01128b0:	8b 45 14             	mov    0x14(%ebp),%eax
c01128b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01128ba:	89 04 24             	mov    %eax,(%esp)
c01128bd:	e8 46 ef ff ff       	call   c0111808 <sfs_rbuf>
c01128c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01128c9:	74 05                	je     c01128d0 <sfs_dirent_read_nolock+0xf0>
        return ret;
c01128cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128ce:	eb 0f                	jmp    c01128df <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c01128d0:	8b 45 14             	mov    0x14(%ebp),%eax
c01128d3:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c01128da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01128df:	c9                   	leave  
c01128e0:	c3                   	ret    

c01128e1 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c01128e1:	55                   	push   %ebp
c01128e2:	89 e5                	mov    %esp,%ebp
c01128e4:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c01128e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01128ea:	89 04 24             	mov    %eax,(%esp)
c01128ed:	e8 3d 22 00 00       	call   c0114b2f <strlen>
c01128f2:	3d ff 00 00 00       	cmp    $0xff,%eax
c01128f7:	76 24                	jbe    c011291d <sfs_dirent_search_nolock+0x3c>
c01128f9:	c7 44 24 0c 20 97 11 	movl   $0xc0119720,0xc(%esp)
c0112900:	c0 
c0112901:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112908:	c0 
c0112909:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112910:	00 
c0112911:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112918:	e8 d6 db fe ff       	call   c01004f3 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011291d:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112924:	e8 d9 32 ff ff       	call   c0105c02 <kmalloc>
c0112929:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011292c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112930:	75 0a                	jne    c011293c <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112932:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112937:	e9 cb 00 00 00       	jmp    c0112a07 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c011293c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011293f:	8b 00                	mov    (%eax),%eax
c0112941:	8b 40 08             	mov    0x8(%eax),%eax
c0112944:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112947:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011294b:	74 08                	je     c0112955 <sfs_dirent_search_nolock+0x74>
c011294d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112950:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112953:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112955:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011295c:	e9 85 00 00 00       	jmp    c01129e6 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112961:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112964:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011296b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011296f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112972:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112976:	8b 45 08             	mov    0x8(%ebp),%eax
c0112979:	89 04 24             	mov    %eax,(%esp)
c011297c:	e8 5f fe ff ff       	call   c01127e0 <sfs_dirent_read_nolock>
c0112981:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112984:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112988:	74 02                	je     c011298c <sfs_dirent_search_nolock+0xab>
            goto out;
c011298a:	eb 6d                	jmp    c01129f9 <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c011298c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011298f:	8b 00                	mov    (%eax),%eax
c0112991:	85 c0                	test   %eax,%eax
c0112993:	75 12                	jne    c01129a7 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0112995:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112999:	74 0a                	je     c01129a5 <sfs_dirent_search_nolock+0xc4>
c011299b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011299e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01129a1:	89 10                	mov    %edx,(%eax)
            continue ;
c01129a3:	eb 3d                	jmp    c01129e2 <sfs_dirent_search_nolock+0x101>
c01129a5:	eb 3b                	jmp    c01129e2 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c01129a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129aa:	83 c0 04             	add    $0x4,%eax
c01129ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129b1:	8b 45 10             	mov    0x10(%ebp),%eax
c01129b4:	89 04 24             	mov    %eax,(%esp)
c01129b7:	e8 6b 22 00 00       	call   c0114c27 <strcmp>
c01129bc:	85 c0                	test   %eax,%eax
c01129be:	75 22                	jne    c01129e2 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c01129c0:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01129c4:	74 08                	je     c01129ce <sfs_dirent_search_nolock+0xed>
c01129c6:	8b 45 18             	mov    0x18(%ebp),%eax
c01129c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01129cc:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c01129ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01129d2:	74 0c                	je     c01129e0 <sfs_dirent_search_nolock+0xff>
c01129d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129d7:	8b 10                	mov    (%eax),%edx
c01129d9:	8b 45 14             	mov    0x14(%ebp),%eax
c01129dc:	89 10                	mov    %edx,(%eax)
            goto out;
c01129de:	eb 19                	jmp    c01129f9 <sfs_dirent_search_nolock+0x118>
c01129e0:	eb 17                	jmp    c01129f9 <sfs_dirent_search_nolock+0x118>
    for (i = 0; i < nslots; i ++) {
c01129e2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01129e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129e9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01129ec:	0f 8c 6f ff ff ff    	jl     c0112961 <sfs_dirent_search_nolock+0x80>
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c01129f2:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c01129f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129fc:	89 04 24             	mov    %eax,(%esp)
c01129ff:	e8 19 32 ff ff       	call   c0105c1d <kfree>
    return ret;
c0112a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112a07:	c9                   	leave  
c0112a08:	c3                   	ret    

c0112a09 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0112a09:	55                   	push   %ebp
c0112a0a:	89 e5                	mov    %esp,%ebp
c0112a0c:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0112a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a12:	8b 00                	mov    (%eax),%eax
c0112a14:	8b 40 08             	mov    0x8(%eax),%eax
c0112a17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0112a1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112a21:	eb 43                	jmp    c0112a66 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112a23:	8b 45 14             	mov    0x14(%ebp),%eax
c0112a26:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112a31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a3b:	89 04 24             	mov    %eax,(%esp)
c0112a3e:	e8 9d fd ff ff       	call   c01127e0 <sfs_dirent_read_nolock>
c0112a43:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112a46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112a4a:	74 05                	je     c0112a51 <sfs_dirent_findino_nolock+0x48>
            return ret;
c0112a4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a4f:	eb 22                	jmp    c0112a73 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0112a51:	8b 45 14             	mov    0x14(%ebp),%eax
c0112a54:	8b 00                	mov    (%eax),%eax
c0112a56:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112a59:	75 07                	jne    c0112a62 <sfs_dirent_findino_nolock+0x59>
            return 0;
c0112a5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0112a60:	eb 11                	jmp    c0112a73 <sfs_dirent_findino_nolock+0x6a>
    for (i = 0; i < nslots; i ++) {
c0112a62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a69:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112a6c:	7c b5                	jl     c0112a23 <sfs_dirent_findino_nolock+0x1a>
        }
    }
    return -E_NOENT;
c0112a6e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0112a73:	c9                   	leave  
c0112a74:	c3                   	ret    

c0112a75 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0112a75:	55                   	push   %ebp
c0112a76:	89 e5                	mov    %esp,%ebp
c0112a78:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0112a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a7e:	89 04 24             	mov    %eax,(%esp)
c0112a81:	e8 f4 f0 ff ff       	call   c0111b7a <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0112a86:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0112a8d:	00 
c0112a8e:	8b 45 18             	mov    0x18(%ebp),%eax
c0112a91:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112a95:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0112a98:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0112a9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112aa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0112aad:	89 04 24             	mov    %eax,(%esp)
c0112ab0:	e8 2c fe ff ff       	call   c01128e1 <sfs_dirent_search_nolock>
c0112ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0112ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112abb:	89 04 24             	mov    %eax,(%esp)
c0112abe:	e8 cd f0 ff ff       	call   c0111b90 <unlock_sin>
    if (ret == 0) {
c0112ac3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ac7:	75 1c                	jne    c0112ae5 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c0112ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112acc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ad0:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ad3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ada:	89 04 24             	mov    %eax,(%esp)
c0112add:	e8 62 f5 ff ff       	call   c0112044 <sfs_load_inode>
c0112ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0112ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112ae8:	c9                   	leave  
c0112ae9:	c3                   	ret    

c0112aea <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0112aea:	55                   	push   %ebp
c0112aeb:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0112aed:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112af0:	83 e0 03             	and    $0x3,%eax
c0112af3:	85 c0                	test   %eax,%eax
c0112af5:	74 07                	je     c0112afe <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0112af7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0112afc:	eb 17                	jmp    c0112b15 <sfs_opendir+0x2b>
        break;
c0112afe:	90                   	nop
    }
    if (open_flags & O_APPEND) {
c0112aff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b02:	83 e0 20             	and    $0x20,%eax
c0112b05:	85 c0                	test   %eax,%eax
c0112b07:	74 07                	je     c0112b10 <sfs_opendir+0x26>
        return -E_ISDIR;
c0112b09:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0112b0e:	eb 05                	jmp    c0112b15 <sfs_opendir+0x2b>
    }
    return 0;
c0112b10:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b15:	5d                   	pop    %ebp
c0112b16:	c3                   	ret    

c0112b17 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0112b17:	55                   	push   %ebp
c0112b18:	89 e5                	mov    %esp,%ebp
    return 0;
c0112b1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b1f:	5d                   	pop    %ebp
c0112b20:	c3                   	ret    

c0112b21 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c0112b21:	55                   	push   %ebp
c0112b22:	89 e5                	mov    %esp,%ebp
c0112b24:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c0112b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b31:	74 17                	je     c0112b4a <sfs_close+0x29>
c0112b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b36:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112b39:	85 c0                	test   %eax,%eax
c0112b3b:	74 0d                	je     c0112b4a <sfs_close+0x29>
c0112b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b40:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112b43:	8b 40 18             	mov    0x18(%eax),%eax
c0112b46:	85 c0                	test   %eax,%eax
c0112b48:	75 24                	jne    c0112b6e <sfs_close+0x4d>
c0112b4a:	c7 44 24 0c 44 97 11 	movl   $0xc0119744,0xc(%esp)
c0112b51:	c0 
c0112b52:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112b59:	c0 
c0112b5a:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c0112b61:	00 
c0112b62:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112b69:	e8 85 d9 fe ff       	call   c01004f3 <__panic>
c0112b6e:	c7 44 24 04 92 97 11 	movl   $0xc0119792,0x4(%esp)
c0112b75:	c0 
c0112b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b79:	89 04 24             	mov    %eax,(%esp)
c0112b7c:	e8 56 da ff ff       	call   c01105d7 <inode_check>
c0112b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b84:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112b87:	8b 40 18             	mov    0x18(%eax),%eax
c0112b8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0112b8d:	89 14 24             	mov    %edx,(%esp)
c0112b90:	ff d0                	call   *%eax
}
c0112b92:	c9                   	leave  
c0112b93:	c3                   	ret    

c0112b94 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0112b94:	55                   	push   %ebp
c0112b95:	89 e5                	mov    %esp,%ebp
c0112b97:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c0112b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b9d:	8b 00                	mov    (%eax),%eax
c0112b9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0112ba2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112ba5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112ba9:	66 83 f8 02          	cmp    $0x2,%ax
c0112bad:	75 24                	jne    c0112bd3 <sfs_io_nolock+0x3f>
c0112baf:	c7 44 24 0c 98 97 11 	movl   $0xc0119798,0xc(%esp)
c0112bb6:	c0 
c0112bb7:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112bbe:	c0 
c0112bbf:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0112bc6:	00 
c0112bc7:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112bce:	e8 20 d9 fe ff       	call   c01004f3 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0112bd3:	8b 45 18             	mov    0x18(%ebp),%eax
c0112bd6:	8b 10                	mov    (%eax),%edx
c0112bd8:	8b 45 14             	mov    0x14(%ebp),%eax
c0112bdb:	01 d0                	add    %edx,%eax
c0112bdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0112be0:	8b 45 18             	mov    0x18(%ebp),%eax
c0112be3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0112be9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112bed:	78 12                	js     c0112c01 <sfs_io_nolock+0x6d>
c0112bef:	8b 45 14             	mov    0x14(%ebp),%eax
c0112bf2:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0112bf7:	77 08                	ja     c0112c01 <sfs_io_nolock+0x6d>
c0112bf9:	8b 45 14             	mov    0x14(%ebp),%eax
c0112bfc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112bff:	7e 0a                	jle    c0112c0b <sfs_io_nolock+0x77>
        return -E_INVAL;
c0112c01:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112c06:	e9 a0 02 00 00       	jmp    c0112eab <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c0112c0b:	8b 45 14             	mov    0x14(%ebp),%eax
c0112c0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112c11:	75 0a                	jne    c0112c1d <sfs_io_nolock+0x89>
        return 0;
c0112c13:	b8 00 00 00 00       	mov    $0x0,%eax
c0112c18:	e9 8e 02 00 00       	jmp    c0112eab <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0112c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c20:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0112c25:	76 07                	jbe    c0112c2e <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c0112c27:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0112c2e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112c32:	75 2a                	jne    c0112c5e <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c0112c34:	8b 55 14             	mov    0x14(%ebp),%edx
c0112c37:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c3a:	8b 00                	mov    (%eax),%eax
c0112c3c:	39 c2                	cmp    %eax,%edx
c0112c3e:	72 0a                	jb     c0112c4a <sfs_io_nolock+0xb6>
            return 0;
c0112c40:	b8 00 00 00 00       	mov    $0x0,%eax
c0112c45:	e9 61 02 00 00       	jmp    c0112eab <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c0112c4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c50:	8b 00                	mov    (%eax),%eax
c0112c52:	39 c2                	cmp    %eax,%edx
c0112c54:	76 08                	jbe    c0112c5e <sfs_io_nolock+0xca>
            endpos = din->size;
c0112c56:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c59:	8b 00                	mov    (%eax),%eax
c0112c5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c0112c5e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112c62:	74 10                	je     c0112c74 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0112c64:	c7 45 f0 c1 18 11 c0 	movl   $0xc01118c1,-0x10(%ebp)
c0112c6b:	c7 45 ec d8 17 11 c0 	movl   $0xc01117d8,-0x14(%ebp)
c0112c72:	eb 0e                	jmp    c0112c82 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0112c74:	c7 45 f0 08 18 11 c0 	movl   $0xc0111808,-0x10(%ebp)
c0112c7b:	c7 45 ec a8 17 11 c0 	movl   $0xc01117a8,-0x14(%ebp)
    }

    int ret = 0;
c0112c82:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0112c89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0112c90:	8b 45 14             	mov    0x14(%ebp),%eax
c0112c93:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0112c99:	85 c0                	test   %eax,%eax
c0112c9b:	0f 48 c2             	cmovs  %edx,%eax
c0112c9e:	c1 f8 0c             	sar    $0xc,%eax
c0112ca1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0112ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ca7:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0112cad:	85 c0                	test   %eax,%eax
c0112caf:	0f 48 c2             	cmovs  %edx,%eax
c0112cb2:	c1 f8 0c             	sar    $0xc,%eax
c0112cb5:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0112cb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c0112cbb:	8b 45 14             	mov    0x14(%ebp),%eax
c0112cbe:	99                   	cltd   
c0112cbf:	c1 ea 14             	shr    $0x14,%edx
c0112cc2:	01 d0                	add    %edx,%eax
c0112cc4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0112cc9:	29 d0                	sub    %edx,%eax
c0112ccb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0112cce:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0112cd2:	0f 84 9f 00 00 00    	je     c0112d77 <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0112cd8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112cdc:	74 0a                	je     c0112ce8 <sfs_io_nolock+0x154>
c0112cde:	b8 00 10 00 00       	mov    $0x1000,%eax
c0112ce3:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0112ce6:	eb 0a                	jmp    c0112cf2 <sfs_io_nolock+0x15e>
c0112ce8:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112cee:	29 c2                	sub    %eax,%edx
c0112cf0:	89 d0                	mov    %edx,%eax
c0112cf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0112cf5:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0112cf8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112cfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112cff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d0d:	89 04 24             	mov    %eax,(%esp)
c0112d10:	e8 5a f9 ff ff       	call   c011266f <sfs_bmap_load_nolock>
c0112d15:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112d18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112d1c:	74 05                	je     c0112d23 <sfs_io_nolock+0x18f>
            goto out;
c0112d1e:	e9 51 01 00 00       	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c0112d23:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112d26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0112d29:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112d2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d31:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112d34:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d38:	8b 45 10             	mov    0x10(%ebp),%eax
c0112d3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d42:	89 04 24             	mov    %eax,(%esp)
c0112d45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d48:	ff d0                	call   *%eax
c0112d4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112d4d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112d51:	74 05                	je     c0112d58 <sfs_io_nolock+0x1c4>
            goto out;
c0112d53:	e9 1c 01 00 00       	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c0112d58:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112d5b:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c0112d5e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112d62:	75 05                	jne    c0112d69 <sfs_io_nolock+0x1d5>
            goto out;
c0112d64:	e9 0b 01 00 00       	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c0112d69:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112d6c:	01 45 10             	add    %eax,0x10(%ebp)
c0112d6f:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0112d73:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c0112d77:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c0112d7e:	eb 71                	jmp    c0112df1 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0112d80:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0112d83:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d98:	89 04 24             	mov    %eax,(%esp)
c0112d9b:	e8 cf f8 ff ff       	call   c011266f <sfs_bmap_load_nolock>
c0112da0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112da3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112da7:	74 05                	je     c0112dae <sfs_io_nolock+0x21a>
            goto out;
c0112da9:	e9 c6 00 00 00       	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0112dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112db1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0112db8:	00 
c0112db9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112dbd:	8b 45 10             	mov    0x10(%ebp),%eax
c0112dc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112dc7:	89 04 24             	mov    %eax,(%esp)
c0112dca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112dcd:	ff d0                	call   *%eax
c0112dcf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112dd2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112dd6:	74 05                	je     c0112ddd <sfs_io_nolock+0x249>
            goto out;
c0112dd8:	e9 97 00 00 00       	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c0112ddd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112de0:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0112de3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112de6:	01 45 10             	add    %eax,0x10(%ebp)
c0112de9:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0112ded:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    while (nblks != 0) {
c0112df1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112df5:	75 89                	jne    c0112d80 <sfs_io_nolock+0x1ec>
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c0112df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dfa:	99                   	cltd   
c0112dfb:	c1 ea 14             	shr    $0x14,%edx
c0112dfe:	01 d0                	add    %edx,%eax
c0112e00:	25 ff 0f 00 00       	and    $0xfff,%eax
c0112e05:	29 d0                	sub    %edx,%eax
c0112e07:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112e0a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0112e0e:	74 64                	je     c0112e74 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0112e10:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0112e13:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e17:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e25:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e28:	89 04 24             	mov    %eax,(%esp)
c0112e2b:	e8 3f f8 ff ff       	call   c011266f <sfs_bmap_load_nolock>
c0112e30:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112e33:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112e37:	74 02                	je     c0112e3b <sfs_io_nolock+0x2a7>
            goto out;
c0112e39:	eb 39                	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c0112e3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112e3e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112e45:	00 
c0112e46:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112e4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e51:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e5b:	89 04 24             	mov    %eax,(%esp)
c0112e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e61:	ff d0                	call   *%eax
c0112e63:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112e66:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112e6a:	74 02                	je     c0112e6e <sfs_io_nolock+0x2da>
            goto out;
c0112e6c:	eb 06                	jmp    c0112e74 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c0112e6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112e71:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c0112e74:	8b 45 18             	mov    0x18(%ebp),%eax
c0112e77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112e7a:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c0112e7c:	8b 55 14             	mov    0x14(%ebp),%edx
c0112e7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112e82:	01 c2                	add    %eax,%edx
c0112e84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e87:	8b 00                	mov    (%eax),%eax
c0112e89:	8b 00                	mov    (%eax),%eax
c0112e8b:	39 c2                	cmp    %eax,%edx
c0112e8d:	76 19                	jbe    c0112ea8 <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c0112e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e92:	8b 00                	mov    (%eax),%eax
c0112e94:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0112e97:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112e9a:	01 ca                	add    %ecx,%edx
c0112e9c:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c0112e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ea1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0112ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0112eab:	c9                   	leave  
c0112eac:	c3                   	ret    

c0112ead <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0112ead:	55                   	push   %ebp
c0112eae:	89 e5                	mov    %esp,%ebp
c0112eb0:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112eb6:	8b 40 38             	mov    0x38(%eax),%eax
c0112eb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ebc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ec0:	74 0a                	je     c0112ecc <sfs_io+0x1f>
c0112ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ec5:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112ec8:	85 c0                	test   %eax,%eax
c0112eca:	74 24                	je     c0112ef0 <sfs_io+0x43>
c0112ecc:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c0112ed3:	c0 
c0112ed4:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112edb:	c0 
c0112edc:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0112ee3:	00 
c0112ee4:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112eeb:	e8 03 d6 fe ff       	call   c01004f3 <__panic>
c0112ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ef3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ef9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112efc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f00:	74 0d                	je     c0112f0f <sfs_io+0x62>
c0112f02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f05:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112f08:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112f0d:	74 24                	je     c0112f33 <sfs_io+0x86>
c0112f0f:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0112f16:	c0 
c0112f17:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0112f1e:	c0 
c0112f1f:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0112f26:	00 
c0112f27:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0112f2e:	e8 c0 d5 fe ff       	call   c01004f3 <__panic>
c0112f33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f36:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c0112f39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f3c:	89 04 24             	mov    %eax,(%esp)
c0112f3f:	e8 36 ec ff ff       	call   c0111b7a <lock_sin>
    {
        size_t alen = iob->io_resid;
c0112f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f47:	8b 40 0c             	mov    0xc(%eax),%eax
c0112f4a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c0112f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f50:	8b 50 04             	mov    0x4(%eax),%edx
c0112f53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f56:	8b 00                	mov    (%eax),%eax
c0112f58:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0112f5b:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0112f5f:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0112f62:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0112f66:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112f6a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f78:	89 04 24             	mov    %eax,(%esp)
c0112f7b:	e8 14 fc ff ff       	call   c0112b94 <sfs_io_nolock>
c0112f80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0112f83:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112f86:	85 c0                	test   %eax,%eax
c0112f88:	74 12                	je     c0112f9c <sfs_io+0xef>
            iobuf_skip(iob, alen);
c0112f8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112f8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f94:	89 04 24             	mov    %eax,(%esp)
c0112f97:	e8 8d 8b ff ff       	call   c010bb29 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c0112f9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f9f:	89 04 24             	mov    %eax,(%esp)
c0112fa2:	e8 e9 eb ff ff       	call   c0111b90 <unlock_sin>
    return ret;
c0112fa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0112faa:	c9                   	leave  
c0112fab:	c3                   	ret    

c0112fac <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c0112fac:	55                   	push   %ebp
c0112fad:	89 e5                	mov    %esp,%ebp
c0112faf:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0112fb2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0112fb9:	00 
c0112fba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112fc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fc4:	89 04 24             	mov    %eax,(%esp)
c0112fc7:	e8 e1 fe ff ff       	call   c0112ead <sfs_io>
}
c0112fcc:	c9                   	leave  
c0112fcd:	c3                   	ret    

c0112fce <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c0112fce:	55                   	push   %ebp
c0112fcf:	89 e5                	mov    %esp,%ebp
c0112fd1:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0112fd4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0112fdb:	00 
c0112fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112fe3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fe6:	89 04 24             	mov    %eax,(%esp)
c0112fe9:	e8 bf fe ff ff       	call   c0112ead <sfs_io>
}
c0112fee:	c9                   	leave  
c0112fef:	c3                   	ret    

c0112ff0 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0112ff0:	55                   	push   %ebp
c0112ff1:	89 e5                	mov    %esp,%ebp
c0112ff3:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0112ff6:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0112ffd:	00 
c0112ffe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113005:	00 
c0113006:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113009:	89 04 24             	mov    %eax,(%esp)
c011300c:	e8 74 1e 00 00       	call   c0114e85 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0113011:	8b 45 08             	mov    0x8(%ebp),%eax
c0113014:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113017:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011301b:	74 17                	je     c0113034 <sfs_fstat+0x44>
c011301d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113020:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113023:	85 c0                	test   %eax,%eax
c0113025:	74 0d                	je     c0113034 <sfs_fstat+0x44>
c0113027:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011302a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011302d:	8b 40 28             	mov    0x28(%eax),%eax
c0113030:	85 c0                	test   %eax,%eax
c0113032:	75 24                	jne    c0113058 <sfs_fstat+0x68>
c0113034:	c7 44 24 0c e0 97 11 	movl   $0xc01197e0,0xc(%esp)
c011303b:	c0 
c011303c:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113043:	c0 
c0113044:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c011304b:	00 
c011304c:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113053:	e8 9b d4 fe ff       	call   c01004f3 <__panic>
c0113058:	c7 44 24 04 30 98 11 	movl   $0xc0119830,0x4(%esp)
c011305f:	c0 
c0113060:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113063:	89 04 24             	mov    %eax,(%esp)
c0113066:	e8 6c d5 ff ff       	call   c01105d7 <inode_check>
c011306b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011306e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113071:	8b 40 28             	mov    0x28(%eax),%eax
c0113074:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113077:	89 54 24 04          	mov    %edx,0x4(%esp)
c011307b:	8b 55 08             	mov    0x8(%ebp),%edx
c011307e:	89 14 24             	mov    %edx,(%esp)
c0113081:	ff d0                	call   *%eax
c0113083:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113086:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011308a:	74 05                	je     c0113091 <sfs_fstat+0xa1>
        return ret;
c011308c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011308f:	eb 71                	jmp    c0113102 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113091:	8b 45 08             	mov    0x8(%ebp),%eax
c0113094:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113097:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011309b:	74 0d                	je     c01130aa <sfs_fstat+0xba>
c011309d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01130a0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01130a3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01130a8:	74 24                	je     c01130ce <sfs_fstat+0xde>
c01130aa:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c01130b1:	c0 
c01130b2:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01130b9:	c0 
c01130ba:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c01130c1:	00 
c01130c2:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01130c9:	e8 25 d4 fe ff       	call   c01004f3 <__panic>
c01130ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01130d1:	8b 00                	mov    (%eax),%eax
c01130d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c01130d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01130d9:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01130dd:	0f b7 d0             	movzwl %ax,%edx
c01130e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130e3:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c01130e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01130e9:	8b 50 08             	mov    0x8(%eax),%edx
c01130ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130ef:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c01130f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01130f5:	8b 10                	mov    (%eax),%edx
c01130f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130fa:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01130fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113102:	c9                   	leave  
c0113103:	c3                   	ret    

c0113104 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0113104:	55                   	push   %ebp
c0113105:	89 e5                	mov    %esp,%ebp
c0113107:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011310a:	8b 45 08             	mov    0x8(%ebp),%eax
c011310d:	8b 40 38             	mov    0x38(%eax),%eax
c0113110:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113113:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113117:	74 0a                	je     c0113123 <sfs_fsync+0x1f>
c0113119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011311c:	8b 40 6c             	mov    0x6c(%eax),%eax
c011311f:	85 c0                	test   %eax,%eax
c0113121:	74 24                	je     c0113147 <sfs_fsync+0x43>
c0113123:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c011312a:	c0 
c011312b:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113132:	c0 
c0113133:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c011313a:	00 
c011313b:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113142:	e8 ac d3 fe ff       	call   c01004f3 <__panic>
c0113147:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011314a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011314d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113150:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113153:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113157:	74 0d                	je     c0113166 <sfs_fsync+0x62>
c0113159:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011315c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011315f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113164:	74 24                	je     c011318a <sfs_fsync+0x86>
c0113166:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c011316d:	c0 
c011316e:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113175:	c0 
c0113176:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c011317d:	00 
c011317e:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113185:	e8 69 d3 fe ff       	call   c01004f3 <__panic>
c011318a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011318d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113190:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011319a:	8b 40 08             	mov    0x8(%eax),%eax
c011319d:	85 c0                	test   %eax,%eax
c011319f:	74 6b                	je     c011320c <sfs_fsync+0x108>
        lock_sin(sin);
c01131a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131a4:	89 04 24             	mov    %eax,(%esp)
c01131a7:	e8 ce e9 ff ff       	call   c0111b7a <lock_sin>
        {
            if (sin->dirty) {
c01131ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131af:	8b 40 08             	mov    0x8(%eax),%eax
c01131b2:	85 c0                	test   %eax,%eax
c01131b4:	74 4b                	je     c0113201 <sfs_fsync+0xfd>
                sin->dirty = 0;
c01131b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131b9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c01131c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131c3:	8b 50 04             	mov    0x4(%eax),%edx
c01131c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131c9:	8b 00                	mov    (%eax),%eax
c01131cb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01131d2:	00 
c01131d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01131d7:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01131de:	00 
c01131df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01131e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131e6:	89 04 24             	mov    %eax,(%esp)
c01131e9:	e8 d3 e6 ff ff       	call   c01118c1 <sfs_wbuf>
c01131ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01131f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01131f5:	74 0a                	je     c0113201 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c01131f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01131fa:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0113201:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113204:	89 04 24             	mov    %eax,(%esp)
c0113207:	e8 84 e9 ff ff       	call   c0111b90 <unlock_sin>
    }
    return ret;
c011320c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011320f:	c9                   	leave  
c0113210:	c3                   	ret    

c0113211 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0113211:	55                   	push   %ebp
c0113212:	89 e5                	mov    %esp,%ebp
c0113214:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113217:	8b 45 0c             	mov    0xc(%ebp),%eax
c011321a:	8b 40 0c             	mov    0xc(%eax),%eax
c011321d:	83 f8 02             	cmp    $0x2,%eax
c0113220:	76 15                	jbe    c0113237 <sfs_namefile+0x26>
c0113222:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113229:	e8 d4 29 ff ff       	call   c0105c02 <kmalloc>
c011322e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113231:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113235:	75 0a                	jne    c0113241 <sfs_namefile+0x30>
        return -E_NO_MEM;
c0113237:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011323c:	e9 bd 02 00 00       	jmp    c01134fe <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113241:	8b 45 08             	mov    0x8(%ebp),%eax
c0113244:	8b 40 38             	mov    0x38(%eax),%eax
c0113247:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011324a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011324e:	74 0a                	je     c011325a <sfs_namefile+0x49>
c0113250:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113253:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113256:	85 c0                	test   %eax,%eax
c0113258:	74 24                	je     c011327e <sfs_namefile+0x6d>
c011325a:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c0113261:	c0 
c0113262:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113269:	c0 
c011326a:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c0113271:	00 
c0113272:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113279:	e8 75 d2 fe ff       	call   c01004f3 <__panic>
c011327e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113281:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113284:	8b 45 08             	mov    0x8(%ebp),%eax
c0113287:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011328a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011328e:	74 0d                	je     c011329d <sfs_namefile+0x8c>
c0113290:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113293:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113296:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011329b:	74 24                	je     c01132c1 <sfs_namefile+0xb0>
c011329d:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c01132a4:	c0 
c01132a5:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01132ac:	c0 
c01132ad:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c01132b4:	00 
c01132b5:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01132bc:	e8 32 d2 fe ff       	call   c01004f3 <__panic>
c01132c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01132c4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c01132c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132ca:	8b 10                	mov    (%eax),%edx
c01132cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132cf:	8b 40 0c             	mov    0xc(%eax),%eax
c01132d2:	01 d0                	add    %edx,%eax
c01132d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c01132d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132da:	8b 40 0c             	mov    0xc(%eax),%eax
c01132dd:	83 e8 02             	sub    $0x2,%eax
c01132e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c01132e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01132e6:	89 04 24             	mov    %eax,(%esp)
c01132e9:	e8 e1 d0 ff ff       	call   c01103cf <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c01132ee:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01132f5:	00 
c01132f6:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01132f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132fd:	c7 44 24 08 38 98 11 	movl   $0xc0119838,0x8(%esp)
c0113304:	c0 
c0113305:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113308:	89 44 24 04          	mov    %eax,0x4(%esp)
c011330c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011330f:	89 04 24             	mov    %eax,(%esp)
c0113312:	e8 5e f7 ff ff       	call   c0112a75 <sfs_lookup_once>
c0113317:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011331a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011331e:	74 05                	je     c0113325 <sfs_namefile+0x114>
            goto failed;
c0113320:	e9 c0 01 00 00       	jmp    c01134e5 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c0113325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113328:	8b 40 04             	mov    0x4(%eax),%eax
c011332b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c011332e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113331:	89 04 24             	mov    %eax,(%esp)
c0113334:	e8 b0 d0 ff ff       	call   c01103e9 <inode_ref_dec>
        if (node == parent) {
c0113339:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011333c:	39 45 08             	cmp    %eax,0x8(%ebp)
c011333f:	75 76                	jne    c01133b7 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113341:	8b 45 08             	mov    0x8(%ebp),%eax
c0113344:	89 04 24             	mov    %eax,(%esp)
c0113347:	e8 9d d0 ff ff       	call   c01103e9 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c011334c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011334f:	8b 40 0c             	mov    0xc(%eax),%eax
c0113352:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0113355:	83 e8 02             	sub    $0x2,%eax
c0113358:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c011335b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011335e:	8b 00                	mov    (%eax),%eax
c0113360:	8d 50 01             	lea    0x1(%eax),%edx
c0113363:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113366:	89 44 24 08          	mov    %eax,0x8(%esp)
c011336a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011336d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113371:	89 14 24             	mov    %edx,(%esp)
c0113374:	e8 4b 1b 00 00       	call   c0114ec4 <memmove>
c0113379:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c011337c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011337f:	83 e8 01             	sub    $0x1,%eax
c0113382:	c6 00 2f             	movb   $0x2f,(%eax)
c0113385:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113388:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011338b:	01 d0                	add    %edx,%eax
c011338d:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113390:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113393:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113397:	8b 45 0c             	mov    0xc(%ebp),%eax
c011339a:	89 04 24             	mov    %eax,(%esp)
c011339d:	e8 87 87 ff ff       	call   c010bb29 <iobuf_skip>
    kfree(entry);
c01133a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01133a5:	89 04 24             	mov    %eax,(%esp)
c01133a8:	e8 70 28 ff ff       	call   c0105c1d <kfree>
    return 0;
c01133ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01133b2:	e9 47 01 00 00       	jmp    c01134fe <sfs_namefile+0x2ed>
        node = parent, sin = vop_info(node, sfs_inode);
c01133b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01133ba:	89 45 08             	mov    %eax,0x8(%ebp)
c01133bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01133c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01133c3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01133c7:	74 0d                	je     c01133d6 <sfs_namefile+0x1c5>
c01133c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01133cc:	8b 40 2c             	mov    0x2c(%eax),%eax
c01133cf:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01133d4:	74 24                	je     c01133fa <sfs_namefile+0x1e9>
c01133d6:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c01133dd:	c0 
c01133de:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01133e5:	c0 
c01133e6:	c7 44 24 04 ee 02 00 	movl   $0x2ee,0x4(%esp)
c01133ed:	00 
c01133ee:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01133f5:	e8 f9 d0 fe ff       	call   c01004f3 <__panic>
c01133fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01133fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113403:	8b 40 04             	mov    0x4(%eax),%eax
c0113406:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113409:	74 0f                	je     c011341a <sfs_namefile+0x209>
c011340b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011340e:	8b 00                	mov    (%eax),%eax
c0113410:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113414:	66 83 f8 02          	cmp    $0x2,%ax
c0113418:	74 24                	je     c011343e <sfs_namefile+0x22d>
c011341a:	c7 44 24 0c 3c 98 11 	movl   $0xc011983c,0xc(%esp)
c0113421:	c0 
c0113422:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113429:	c0 
c011342a:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
c0113431:	00 
c0113432:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113439:	e8 b5 d0 fe ff       	call   c01004f3 <__panic>
        lock_sin(sin);
c011343e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113441:	89 04 24             	mov    %eax,(%esp)
c0113444:	e8 31 e7 ff ff       	call   c0111b7a <lock_sin>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011344c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113450:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113453:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113457:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011345a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011345e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113461:	89 04 24             	mov    %eax,(%esp)
c0113464:	e8 a0 f5 ff ff       	call   c0112a09 <sfs_dirent_findino_nolock>
c0113469:	89 45 f0             	mov    %eax,-0x10(%ebp)
        unlock_sin(sin);
c011346c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011346f:	89 04 24             	mov    %eax,(%esp)
c0113472:	e8 19 e7 ff ff       	call   c0111b90 <unlock_sin>
        if (ret != 0) {
c0113477:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011347b:	74 03                	je     c0113480 <sfs_namefile+0x26f>
            goto failed;
c011347d:	90                   	nop
c011347e:	eb 65                	jmp    c01134e5 <sfs_namefile+0x2d4>
        if ((alen = strlen(entry->name) + 1) > resid) {
c0113480:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113483:	83 c0 04             	add    $0x4,%eax
c0113486:	89 04 24             	mov    %eax,(%esp)
c0113489:	e8 a1 16 00 00       	call   c0114b2f <strlen>
c011348e:	83 c0 01             	add    $0x1,%eax
c0113491:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113494:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113497:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011349a:	76 09                	jbe    c01134a5 <sfs_namefile+0x294>

failed_nomem:
    ret = -E_NO_MEM;
c011349c:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c01134a3:	eb 40                	jmp    c01134e5 <sfs_namefile+0x2d4>
        resid -= alen, ptr -= alen;
c01134a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134a8:	29 45 e8             	sub    %eax,-0x18(%ebp)
c01134ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134ae:	f7 d8                	neg    %eax
c01134b0:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c01134b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01134b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01134bc:	83 c0 04             	add    $0x4,%eax
c01134bf:	89 54 24 08          	mov    %edx,0x8(%esp)
c01134c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01134ca:	89 04 24             	mov    %eax,(%esp)
c01134cd:	e8 95 1a 00 00       	call   c0114f67 <memcpy>
        ptr[alen - 1] = '/';
c01134d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01134d5:	8d 50 ff             	lea    -0x1(%eax),%edx
c01134d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01134db:	01 d0                	add    %edx,%eax
c01134dd:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c01134e0:	e9 09 fe ff ff       	jmp    c01132ee <sfs_namefile+0xdd>
failed:
    vop_ref_dec(node);
c01134e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01134e8:	89 04 24             	mov    %eax,(%esp)
c01134eb:	e8 f9 ce ff ff       	call   c01103e9 <inode_ref_dec>
    kfree(entry);
c01134f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01134f3:	89 04 24             	mov    %eax,(%esp)
c01134f6:	e8 22 27 ff ff       	call   c0105c1d <kfree>
    return ret;
c01134fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01134fe:	c9                   	leave  
c01134ff:	c3                   	ret    

c0113500 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113500:	55                   	push   %ebp
c0113501:	89 e5                	mov    %esp,%ebp
c0113503:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113506:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113509:	8b 00                	mov    (%eax),%eax
c011350b:	8b 40 08             	mov    0x8(%eax),%eax
c011350e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113511:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113518:	eb 4c                	jmp    c0113566 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011351a:	8b 45 14             	mov    0x14(%ebp),%eax
c011351d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113521:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113524:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113528:	8b 45 0c             	mov    0xc(%ebp),%eax
c011352b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011352f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113532:	89 04 24             	mov    %eax,(%esp)
c0113535:	e8 a6 f2 ff ff       	call   c01127e0 <sfs_dirent_read_nolock>
c011353a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011353d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113541:	74 05                	je     c0113548 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113543:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113546:	eb 2b                	jmp    c0113573 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113548:	8b 45 14             	mov    0x14(%ebp),%eax
c011354b:	8b 00                	mov    (%eax),%eax
c011354d:	85 c0                	test   %eax,%eax
c011354f:	74 11                	je     c0113562 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113551:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113555:	75 07                	jne    c011355e <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113557:	b8 00 00 00 00       	mov    $0x0,%eax
c011355c:	eb 15                	jmp    c0113573 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c011355e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113562:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113566:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113569:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011356c:	7c ac                	jl     c011351a <sfs_getdirentry_sub_nolock+0x1a>
        }
    }
    return -E_NOENT;
c011356e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113573:	c9                   	leave  
c0113574:	c3                   	ret    

c0113575 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113575:	55                   	push   %ebp
c0113576:	89 e5                	mov    %esp,%ebp
c0113578:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011357b:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113582:	e8 7b 26 ff ff       	call   c0105c02 <kmalloc>
c0113587:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011358a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011358e:	75 0a                	jne    c011359a <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113590:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113595:	e9 6b 01 00 00       	jmp    c0113705 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011359a:	8b 45 08             	mov    0x8(%ebp),%eax
c011359d:	8b 40 38             	mov    0x38(%eax),%eax
c01135a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01135a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01135a7:	74 0a                	je     c01135b3 <sfs_getdirentry+0x3e>
c01135a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135ac:	8b 40 6c             	mov    0x6c(%eax),%eax
c01135af:	85 c0                	test   %eax,%eax
c01135b1:	74 24                	je     c01135d7 <sfs_getdirentry+0x62>
c01135b3:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c01135ba:	c0 
c01135bb:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01135c2:	c0 
c01135c3:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c01135ca:	00 
c01135cb:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01135d2:	e8 1c cf fe ff       	call   c01004f3 <__panic>
c01135d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135da:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01135dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01135e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01135e3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01135e7:	74 0d                	je     c01135f6 <sfs_getdirentry+0x81>
c01135e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01135ec:	8b 40 2c             	mov    0x2c(%eax),%eax
c01135ef:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01135f4:	74 24                	je     c011361a <sfs_getdirentry+0xa5>
c01135f6:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c01135fd:	c0 
c01135fe:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113605:	c0 
c0113606:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
c011360d:	00 
c011360e:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113615:	e8 d9 ce fe ff       	call   c01004f3 <__panic>
c011361a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011361d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113620:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113623:	8b 40 04             	mov    0x4(%eax),%eax
c0113626:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113629:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011362d:	78 0a                	js     c0113639 <sfs_getdirentry+0xc4>
c011362f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113632:	0f b6 c0             	movzbl %al,%eax
c0113635:	85 c0                	test   %eax,%eax
c0113637:	74 15                	je     c011364e <sfs_getdirentry+0xd9>
        kfree(entry);
c0113639:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011363c:	89 04 24             	mov    %eax,(%esp)
c011363f:	e8 d9 25 ff ff       	call   c0105c1d <kfree>
        return -E_INVAL;
c0113644:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113649:	e9 b7 00 00 00       	jmp    c0113705 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c011364e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113651:	c1 e8 08             	shr    $0x8,%eax
c0113654:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113657:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011365a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011365d:	8b 00                	mov    (%eax),%eax
c011365f:	8b 40 08             	mov    0x8(%eax),%eax
c0113662:	39 c2                	cmp    %eax,%edx
c0113664:	76 15                	jbe    c011367b <sfs_getdirentry+0x106>
        kfree(entry);
c0113666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113669:	89 04 24             	mov    %eax,(%esp)
c011366c:	e8 ac 25 ff ff       	call   c0105c1d <kfree>
        return -E_NOENT;
c0113671:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113676:	e9 8a 00 00 00       	jmp    c0113705 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c011367b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011367e:	89 04 24             	mov    %eax,(%esp)
c0113681:	e8 f4 e4 ff ff       	call   c0111b7a <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113686:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113689:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011368d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113690:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113694:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113697:	89 44 24 04          	mov    %eax,0x4(%esp)
c011369b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011369e:	89 04 24             	mov    %eax,(%esp)
c01136a1:	e8 5a fe ff ff       	call   c0113500 <sfs_getdirentry_sub_nolock>
c01136a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01136a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01136ad:	74 0d                	je     c01136bc <sfs_getdirentry+0x147>
        unlock_sin(sin);
c01136af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01136b2:	89 04 24             	mov    %eax,(%esp)
c01136b5:	e8 d6 e4 ff ff       	call   c0111b90 <unlock_sin>
        goto out;
c01136ba:	eb 3b                	jmp    c01136f7 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c01136bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01136bf:	89 04 24             	mov    %eax,(%esp)
c01136c2:	e8 c9 e4 ff ff       	call   c0111b90 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c01136c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136ca:	83 c0 04             	add    $0x4,%eax
c01136cd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01136d4:	00 
c01136d5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01136dc:	00 
c01136dd:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01136e4:	00 
c01136e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136ec:	89 04 24             	mov    %eax,(%esp)
c01136ef:	e8 20 83 ff ff       	call   c010ba14 <iobuf_move>
c01136f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c01136f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136fa:	89 04 24             	mov    %eax,(%esp)
c01136fd:	e8 1b 25 ff ff       	call   c0105c1d <kfree>
    return ret;
c0113702:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113705:	c9                   	leave  
c0113706:	c3                   	ret    

c0113707 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113707:	55                   	push   %ebp
c0113708:	89 e5                	mov    %esp,%ebp
c011370a:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011370d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113710:	8b 40 38             	mov    0x38(%eax),%eax
c0113713:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113716:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011371a:	74 0a                	je     c0113726 <sfs_reclaim+0x1f>
c011371c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011371f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113722:	85 c0                	test   %eax,%eax
c0113724:	74 24                	je     c011374a <sfs_reclaim+0x43>
c0113726:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c011372d:	c0 
c011372e:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113735:	c0 
c0113736:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c011373d:	00 
c011373e:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113745:	e8 a9 cd fe ff       	call   c01004f3 <__panic>
c011374a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011374d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113750:	8b 45 08             	mov    0x8(%ebp),%eax
c0113753:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113756:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011375a:	74 0d                	je     c0113769 <sfs_reclaim+0x62>
c011375c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011375f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113762:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113767:	74 24                	je     c011378d <sfs_reclaim+0x86>
c0113769:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0113770:	c0 
c0113771:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113778:	c0 
c0113779:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c0113780:	00 
c0113781:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113788:	e8 66 cd fe ff       	call   c01004f3 <__panic>
c011378d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113790:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113793:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c011379a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011379d:	89 04 24             	mov    %eax,(%esp)
c01137a0:	e8 72 e3 ff ff       	call   c0111b17 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c01137a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137a8:	8b 40 0c             	mov    0xc(%eax),%eax
c01137ab:	85 c0                	test   %eax,%eax
c01137ad:	7f 24                	jg     c01137d3 <sfs_reclaim+0xcc>
c01137af:	c7 44 24 0c 6e 98 11 	movl   $0xc011986e,0xc(%esp)
c01137b6:	c0 
c01137b7:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01137be:	c0 
c01137bf:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c01137c6:	00 
c01137c7:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01137ce:	e8 20 cd fe ff       	call   c01004f3 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c01137d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137d6:	8b 40 0c             	mov    0xc(%eax),%eax
c01137d9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01137dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137df:	89 50 0c             	mov    %edx,0xc(%eax)
c01137e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01137e8:	85 c0                	test   %eax,%eax
c01137ea:	0f 85 a1 01 00 00    	jne    c0113991 <sfs_reclaim+0x28a>
c01137f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01137f3:	89 04 24             	mov    %eax,(%esp)
c01137f6:	e8 74 e3 ff ff       	call   c0111b6f <inode_ref_count>
c01137fb:	85 c0                	test   %eax,%eax
c01137fd:	0f 85 8e 01 00 00    	jne    c0113991 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113803:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113806:	8b 00                	mov    (%eax),%eax
c0113808:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011380c:	66 85 c0             	test   %ax,%ax
c011380f:	0f 85 81 00 00 00    	jne    c0113896 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113815:	8b 45 08             	mov    0x8(%ebp),%eax
c0113818:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011381b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011381f:	74 17                	je     c0113838 <sfs_reclaim+0x131>
c0113821:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113824:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113827:	85 c0                	test   %eax,%eax
c0113829:	74 0d                	je     c0113838 <sfs_reclaim+0x131>
c011382b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011382e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113831:	8b 40 30             	mov    0x30(%eax),%eax
c0113834:	85 c0                	test   %eax,%eax
c0113836:	75 24                	jne    c011385c <sfs_reclaim+0x155>
c0113838:	c7 44 24 0c 88 98 11 	movl   $0xc0119888,0xc(%esp)
c011383f:	c0 
c0113840:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113847:	c0 
c0113848:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c011384f:	00 
c0113850:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113857:	e8 97 cc fe ff       	call   c01004f3 <__panic>
c011385c:	c7 44 24 04 d9 98 11 	movl   $0xc01198d9,0x4(%esp)
c0113863:	c0 
c0113864:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113867:	89 04 24             	mov    %eax,(%esp)
c011386a:	e8 68 cd ff ff       	call   c01105d7 <inode_check>
c011386f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113872:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113875:	8b 40 30             	mov    0x30(%eax),%eax
c0113878:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011387f:	00 
c0113880:	8b 55 08             	mov    0x8(%ebp),%edx
c0113883:	89 14 24             	mov    %edx,(%esp)
c0113886:	ff d0                	call   *%eax
c0113888:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011388b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011388f:	74 05                	je     c0113896 <sfs_reclaim+0x18f>
            goto failed_unlock;
c0113891:	e9 fb 00 00 00       	jmp    c0113991 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113896:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113899:	8b 40 08             	mov    0x8(%eax),%eax
c011389c:	85 c0                	test   %eax,%eax
c011389e:	74 76                	je     c0113916 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c01138a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01138a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01138a6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01138aa:	74 17                	je     c01138c3 <sfs_reclaim+0x1bc>
c01138ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01138af:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138b2:	85 c0                	test   %eax,%eax
c01138b4:	74 0d                	je     c01138c3 <sfs_reclaim+0x1bc>
c01138b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01138b9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138bc:	8b 40 18             	mov    0x18(%eax),%eax
c01138bf:	85 c0                	test   %eax,%eax
c01138c1:	75 24                	jne    c01138e7 <sfs_reclaim+0x1e0>
c01138c3:	c7 44 24 0c 44 97 11 	movl   $0xc0119744,0xc(%esp)
c01138ca:	c0 
c01138cb:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01138d2:	c0 
c01138d3:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c01138da:	00 
c01138db:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01138e2:	e8 0c cc fe ff       	call   c01004f3 <__panic>
c01138e7:	c7 44 24 04 92 97 11 	movl   $0xc0119792,0x4(%esp)
c01138ee:	c0 
c01138ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01138f2:	89 04 24             	mov    %eax,(%esp)
c01138f5:	e8 dd cc ff ff       	call   c01105d7 <inode_check>
c01138fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01138fd:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113900:	8b 40 18             	mov    0x18(%eax),%eax
c0113903:	8b 55 08             	mov    0x8(%ebp),%edx
c0113906:	89 14 24             	mov    %edx,(%esp)
c0113909:	ff d0                	call   *%eax
c011390b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011390e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113912:	74 02                	je     c0113916 <sfs_reclaim+0x20f>
            goto failed_unlock;
c0113914:	eb 7b                	jmp    c0113991 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0113916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113919:	89 04 24             	mov    %eax,(%esp)
c011391c:	e8 c9 e3 ff ff       	call   c0111cea <sfs_remove_links>
    unlock_sfs_fs(sfs);
c0113921:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113924:	89 04 24             	mov    %eax,(%esp)
c0113927:	e8 17 e2 ff ff       	call   c0111b43 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c011392c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011392f:	8b 00                	mov    (%eax),%eax
c0113931:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113935:	66 85 c0             	test   %ax,%ax
c0113938:	75 38                	jne    c0113972 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c011393a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011393d:	8b 40 04             	mov    0x4(%eax),%eax
c0113940:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113944:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113947:	89 04 24             	mov    %eax,(%esp)
c011394a:	e8 2b e5 ff ff       	call   c0111e7a <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c011394f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113952:	8b 00                	mov    (%eax),%eax
c0113954:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113957:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011395a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011395e:	74 12                	je     c0113972 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0113960:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113963:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011396a:	89 04 24             	mov    %eax,(%esp)
c011396d:	e8 08 e5 ff ff       	call   c0111e7a <sfs_block_free>
        }
    }
    kfree(sin->din);
c0113972:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113975:	8b 00                	mov    (%eax),%eax
c0113977:	89 04 24             	mov    %eax,(%esp)
c011397a:	e8 9e 22 ff ff       	call   c0105c1d <kfree>
    vop_kill(node);
c011397f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113982:	89 04 24             	mov    %eax,(%esp)
c0113985:	e8 cc c9 ff ff       	call   c0110356 <inode_kill>
    return 0;
c011398a:	b8 00 00 00 00       	mov    $0x0,%eax
c011398f:	eb 0e                	jmp    c011399f <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0113991:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113994:	89 04 24             	mov    %eax,(%esp)
c0113997:	e8 a7 e1 ff ff       	call   c0111b43 <unlock_sfs_fs>
    return ret;
c011399c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011399f:	c9                   	leave  
c01139a0:	c3                   	ret    

c01139a1 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c01139a1:	55                   	push   %ebp
c01139a2:	89 e5                	mov    %esp,%ebp
c01139a4:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c01139a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01139aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01139ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01139b1:	74 0d                	je     c01139c0 <sfs_gettype+0x1f>
c01139b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139b6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01139b9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01139be:	74 24                	je     c01139e4 <sfs_gettype+0x43>
c01139c0:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c01139c7:	c0 
c01139c8:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c01139cf:	c0 
c01139d0:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c01139d7:	00 
c01139d8:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c01139df:	e8 0f cb fe ff       	call   c01004f3 <__panic>
c01139e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139e7:	8b 00                	mov    (%eax),%eax
c01139e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c01139ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139ef:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01139f3:	0f b7 c0             	movzwl %ax,%eax
c01139f6:	83 f8 02             	cmp    $0x2,%eax
c01139f9:	74 0c                	je     c0113a07 <sfs_gettype+0x66>
c01139fb:	83 f8 03             	cmp    $0x3,%eax
c01139fe:	74 27                	je     c0113a27 <sfs_gettype+0x86>
c0113a00:	83 f8 01             	cmp    $0x1,%eax
c0113a03:	74 12                	je     c0113a17 <sfs_gettype+0x76>
c0113a05:	eb 30                	jmp    c0113a37 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0113a07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a0a:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0113a10:	b8 00 00 00 00       	mov    $0x0,%eax
c0113a15:	eb 4a                	jmp    c0113a61 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0113a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a1a:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0113a20:	b8 00 00 00 00       	mov    $0x0,%eax
c0113a25:	eb 3a                	jmp    c0113a61 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0113a27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a2a:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0113a30:	b8 00 00 00 00       	mov    $0x0,%eax
c0113a35:	eb 2a                	jmp    c0113a61 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c0113a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113a3a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113a3e:	0f b7 c0             	movzwl %ax,%eax
c0113a41:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113a45:	c7 44 24 08 e0 94 11 	movl   $0xc01194e0,0x8(%esp)
c0113a4c:	c0 
c0113a4d:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c0113a54:	00 
c0113a55:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113a5c:	e8 92 ca fe ff       	call   c01004f3 <__panic>
}
c0113a61:	c9                   	leave  
c0113a62:	c3                   	ret    

c0113a63 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0113a63:	55                   	push   %ebp
c0113a64:	89 e5                	mov    %esp,%ebp
c0113a66:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0113a69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113a6d:	78 0a                	js     c0113a79 <sfs_tryseek+0x16>
c0113a6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a72:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113a77:	76 0a                	jbe    c0113a83 <sfs_tryseek+0x20>
        return -E_INVAL;
c0113a79:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113a7e:	e9 ca 00 00 00       	jmp    c0113b4d <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113a8d:	74 0d                	je     c0113a9c <sfs_tryseek+0x39>
c0113a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a92:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113a95:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113a9a:	74 24                	je     c0113ac0 <sfs_tryseek+0x5d>
c0113a9c:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0113aa3:	c0 
c0113aa4:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113aab:	c0 
c0113aac:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
c0113ab3:	00 
c0113ab4:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113abb:	e8 33 ca fe ff       	call   c01004f3 <__panic>
c0113ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0113ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113acc:	8b 00                	mov    (%eax),%eax
c0113ace:	8b 00                	mov    (%eax),%eax
c0113ad0:	39 c2                	cmp    %eax,%edx
c0113ad2:	76 74                	jbe    c0113b48 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0113ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ad7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113ada:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113ade:	74 17                	je     c0113af7 <sfs_tryseek+0x94>
c0113ae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ae3:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ae6:	85 c0                	test   %eax,%eax
c0113ae8:	74 0d                	je     c0113af7 <sfs_tryseek+0x94>
c0113aea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113aed:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113af0:	8b 40 30             	mov    0x30(%eax),%eax
c0113af3:	85 c0                	test   %eax,%eax
c0113af5:	75 24                	jne    c0113b1b <sfs_tryseek+0xb8>
c0113af7:	c7 44 24 0c 88 98 11 	movl   $0xc0119888,0xc(%esp)
c0113afe:	c0 
c0113aff:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113b06:	c0 
c0113b07:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c0113b0e:	00 
c0113b0f:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113b16:	e8 d8 c9 fe ff       	call   c01004f3 <__panic>
c0113b1b:	c7 44 24 04 d9 98 11 	movl   $0xc01198d9,0x4(%esp)
c0113b22:	c0 
c0113b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b26:	89 04 24             	mov    %eax,(%esp)
c0113b29:	e8 a9 ca ff ff       	call   c01105d7 <inode_check>
c0113b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b31:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113b34:	8b 40 30             	mov    0x30(%eax),%eax
c0113b37:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113b3a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113b3e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113b41:	89 14 24             	mov    %edx,(%esp)
c0113b44:	ff d0                	call   *%eax
c0113b46:	eb 05                	jmp    c0113b4d <sfs_tryseek+0xea>
    }
    return 0;
c0113b48:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113b4d:	c9                   	leave  
c0113b4e:	c3                   	ret    

c0113b4f <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0113b4f:	55                   	push   %ebp
c0113b50:	89 e5                	mov    %esp,%ebp
c0113b52:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0113b55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113b59:	78 0a                	js     c0113b65 <sfs_truncfile+0x16>
c0113b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b5e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0113b63:	76 0a                	jbe    c0113b6f <sfs_truncfile+0x20>
        return -E_INVAL;
c0113b65:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113b6a:	e9 d4 01 00 00       	jmp    c0113d43 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b72:	8b 40 38             	mov    0x38(%eax),%eax
c0113b75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113b78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113b7c:	74 0a                	je     c0113b88 <sfs_truncfile+0x39>
c0113b7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b81:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113b84:	85 c0                	test   %eax,%eax
c0113b86:	74 24                	je     c0113bac <sfs_truncfile+0x5d>
c0113b88:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c0113b8f:	c0 
c0113b90:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113b97:	c0 
c0113b98:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
c0113b9f:	00 
c0113ba0:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113ba7:	e8 47 c9 fe ff       	call   c01004f3 <__panic>
c0113bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113baf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113bb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113bbc:	74 0d                	je     c0113bcb <sfs_truncfile+0x7c>
c0113bbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113bc1:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113bc4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113bc9:	74 24                	je     c0113bef <sfs_truncfile+0xa0>
c0113bcb:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0113bd2:	c0 
c0113bd3:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113bda:	c0 
c0113bdb:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c0113be2:	00 
c0113be3:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113bea:	e8 04 c9 fe ff       	call   c01004f3 <__panic>
c0113bef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113bf2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0113bf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113bf8:	8b 00                	mov    (%eax),%eax
c0113bfa:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0113bfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0113c04:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0113c0b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113c0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113c11:	01 d0                	add    %edx,%eax
c0113c13:	83 e8 01             	sub    $0x1,%eax
c0113c16:	ba 00 00 00 00       	mov    $0x0,%edx
c0113c1b:	f7 75 d8             	divl   -0x28(%ebp)
c0113c1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0113c21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c24:	8b 10                	mov    (%eax),%edx
c0113c26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c29:	39 c2                	cmp    %eax,%edx
c0113c2b:	75 39                	jne    c0113c66 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c0113c2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c30:	8b 40 08             	mov    0x8(%eax),%eax
c0113c33:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113c36:	74 24                	je     c0113c5c <sfs_truncfile+0x10d>
c0113c38:	c7 44 24 0c e2 98 11 	movl   $0xc01198e2,0xc(%esp)
c0113c3f:	c0 
c0113c40:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113c47:	c0 
c0113c48:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c0113c4f:	00 
c0113c50:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113c57:	e8 97 c8 fe ff       	call   c01004f3 <__panic>
        return 0;
c0113c5c:	b8 00 00 00 00       	mov    $0x0,%eax
c0113c61:	e9 dd 00 00 00       	jmp    c0113d43 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c0113c66:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c69:	89 04 24             	mov    %eax,(%esp)
c0113c6c:	e8 09 df ff ff       	call   c0111b7a <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c0113c71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c74:	8b 40 08             	mov    0x8(%eax),%eax
c0113c77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0113c7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c7d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113c80:	73 3f                	jae    c0113cc1 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0113c82:	eb 33                	jmp    c0113cb7 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0113c84:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0113c8b:	00 
c0113c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c8f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113c9d:	89 04 24             	mov    %eax,(%esp)
c0113ca0:	e8 ca e9 ff ff       	call   c011266f <sfs_bmap_load_nolock>
c0113ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ca8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113cac:	74 05                	je     c0113cb3 <sfs_truncfile+0x164>
                goto out_unlock;
c0113cae:	e9 82 00 00 00       	jmp    c0113d35 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0113cb3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
        while (nblks != tblks) {
c0113cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113cba:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113cbd:	75 c5                	jne    c0113c84 <sfs_truncfile+0x135>
c0113cbf:	eb 33                	jmp    c0113cf4 <sfs_truncfile+0x1a5>
        }
    }
    else if (tblks < nblks) {
c0113cc1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113cc4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113cc7:	73 2b                	jae    c0113cf4 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c0113cc9:	eb 21                	jmp    c0113cec <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0113ccb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113cce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113cd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113cd5:	89 04 24             	mov    %eax,(%esp)
c0113cd8:	e8 7a ea ff ff       	call   c0112757 <sfs_bmap_truncate_nolock>
c0113cdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ce0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113ce4:	74 02                	je     c0113ce8 <sfs_truncfile+0x199>
                goto out_unlock;
c0113ce6:	eb 4d                	jmp    c0113d35 <sfs_truncfile+0x1e6>
            }
            nblks --;
c0113ce8:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
        while (tblks != nblks) {
c0113cec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113cef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113cf2:	75 d7                	jne    c0113ccb <sfs_truncfile+0x17c>
        }
    }
    assert(din->blocks == tblks);
c0113cf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113cf7:	8b 40 08             	mov    0x8(%eax),%eax
c0113cfa:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113cfd:	74 24                	je     c0113d23 <sfs_truncfile+0x1d4>
c0113cff:	c7 44 24 0c f7 98 11 	movl   $0xc01198f7,0xc(%esp)
c0113d06:	c0 
c0113d07:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113d0e:	c0 
c0113d0f:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
c0113d16:	00 
c0113d17:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113d1e:	e8 d0 c7 fe ff       	call   c01004f3 <__panic>
    din->size = len;
c0113d23:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113d26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113d29:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0113d2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d2e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c0113d35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d38:	89 04 24             	mov    %eax,(%esp)
c0113d3b:	e8 50 de ff ff       	call   c0111b90 <unlock_sin>
    return ret;
c0113d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113d43:	c9                   	leave  
c0113d44:	c3                   	ret    

c0113d45 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0113d45:	55                   	push   %ebp
c0113d46:	89 e5                	mov    %esp,%ebp
c0113d48:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d4e:	8b 40 38             	mov    0x38(%eax),%eax
c0113d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d58:	74 0a                	je     c0113d64 <sfs_lookup+0x1f>
c0113d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d5d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113d60:	85 c0                	test   %eax,%eax
c0113d62:	74 24                	je     c0113d88 <sfs_lookup+0x43>
c0113d64:	c7 44 24 0c b4 97 11 	movl   $0xc01197b4,0xc(%esp)
c0113d6b:	c0 
c0113d6c:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113d73:	c0 
c0113d74:	c7 44 24 04 d0 03 00 	movl   $0x3d0,0x4(%esp)
c0113d7b:	00 
c0113d7c:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113d83:	e8 6b c7 fe ff       	call   c01004f3 <__panic>
c0113d88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0113d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d91:	0f b6 00             	movzbl (%eax),%eax
c0113d94:	84 c0                	test   %al,%al
c0113d96:	74 0a                	je     c0113da2 <sfs_lookup+0x5d>
c0113d98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d9b:	0f b6 00             	movzbl (%eax),%eax
c0113d9e:	3c 2f                	cmp    $0x2f,%al
c0113da0:	75 24                	jne    c0113dc6 <sfs_lookup+0x81>
c0113da2:	c7 44 24 0c 0c 99 11 	movl   $0xc011990c,0xc(%esp)
c0113da9:	c0 
c0113daa:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113db1:	c0 
c0113db2:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
c0113db9:	00 
c0113dba:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113dc1:	e8 2d c7 fe ff       	call   c01004f3 <__panic>
    vop_ref_inc(node);
c0113dc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dc9:	89 04 24             	mov    %eax,(%esp)
c0113dcc:	e8 fe c5 ff ff       	call   c01103cf <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113dd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113dd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113ddb:	74 0d                	je     c0113dea <sfs_lookup+0xa5>
c0113ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113de0:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113de3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113de8:	74 24                	je     c0113e0e <sfs_lookup+0xc9>
c0113dea:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0113df1:	c0 
c0113df2:	c7 44 24 08 5f 95 11 	movl   $0xc011955f,0x8(%esp)
c0113df9:	c0 
c0113dfa:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c0113e01:	00 
c0113e02:	c7 04 24 f7 94 11 c0 	movl   $0xc01194f7,(%esp)
c0113e09:	e8 e5 c6 fe ff       	call   c01004f3 <__panic>
c0113e0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e11:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0113e14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113e17:	8b 00                	mov    (%eax),%eax
c0113e19:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113e1d:	66 83 f8 02          	cmp    $0x2,%ax
c0113e21:	74 12                	je     c0113e35 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c0113e23:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e26:	89 04 24             	mov    %eax,(%esp)
c0113e29:	e8 bb c5 ff ff       	call   c01103e9 <inode_ref_dec>
        return -E_NOTDIR;
c0113e2e:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0113e33:	eb 4e                	jmp    c0113e83 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0113e35:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113e3c:	00 
c0113e3d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0113e40:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113e44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113e47:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113e4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e55:	89 04 24             	mov    %eax,(%esp)
c0113e58:	e8 18 ec ff ff       	call   c0112a75 <sfs_lookup_once>
c0113e5d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0113e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e63:	89 04 24             	mov    %eax,(%esp)
c0113e66:	e8 7e c5 ff ff       	call   c01103e9 <inode_ref_dec>
    if (ret != 0) {
c0113e6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113e6f:	74 05                	je     c0113e76 <sfs_lookup+0x131>
        return ret;
c0113e71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e74:	eb 0d                	jmp    c0113e83 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0113e76:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0113e79:	8b 45 10             	mov    0x10(%ebp),%eax
c0113e7c:	89 10                	mov    %edx,(%eax)
    return 0;
c0113e7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113e83:	c9                   	leave  
c0113e84:	c3                   	ret    

c0113e85 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0113e85:	55                   	push   %ebp
c0113e86:	89 e5                	mov    %esp,%ebp
c0113e88:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0113e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113e91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113e95:	74 0a                	je     c0113ea1 <sfs_sync+0x1c>
c0113e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e9a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113e9d:	85 c0                	test   %eax,%eax
c0113e9f:	74 24                	je     c0113ec5 <sfs_sync+0x40>
c0113ea1:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0113ea8:	c0 
c0113ea9:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c0113eb0:	c0 
c0113eb1:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0113eb8:	00 
c0113eb9:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0113ec0:	e8 2e c6 fe ff       	call   c01004f3 <__panic>
c0113ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ec8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0113ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ece:	89 04 24             	mov    %eax,(%esp)
c0113ed1:	e8 41 dc ff ff       	call   c0111b17 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0113ed6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ed9:	83 c0 60             	add    $0x60,%eax
c0113edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113edf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ee2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0113ee5:	eb 74                	jmp    c0113f5b <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0113ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113eea:	83 e8 1c             	sub    $0x1c,%eax
c0113eed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0113ef0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ef3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113ef6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113efa:	74 17                	je     c0113f13 <sfs_sync+0x8e>
c0113efc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113eff:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f02:	85 c0                	test   %eax,%eax
c0113f04:	74 0d                	je     c0113f13 <sfs_sync+0x8e>
c0113f06:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f09:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f0c:	8b 40 18             	mov    0x18(%eax),%eax
c0113f0f:	85 c0                	test   %eax,%eax
c0113f11:	75 24                	jne    c0113f37 <sfs_sync+0xb2>
c0113f13:	c7 44 24 0c 80 99 11 	movl   $0xc0119980,0xc(%esp)
c0113f1a:	c0 
c0113f1b:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c0113f22:	c0 
c0113f23:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0113f2a:	00 
c0113f2b:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0113f32:	e8 bc c5 fe ff       	call   c01004f3 <__panic>
c0113f37:	c7 44 24 04 ce 99 11 	movl   $0xc01199ce,0x4(%esp)
c0113f3e:	c0 
c0113f3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f42:	89 04 24             	mov    %eax,(%esp)
c0113f45:	e8 8d c6 ff ff       	call   c01105d7 <inode_check>
c0113f4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f4d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f50:	8b 40 18             	mov    0x18(%eax),%eax
c0113f53:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113f56:	89 14 24             	mov    %edx,(%esp)
c0113f59:	ff d0                	call   *%eax
c0113f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113f61:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113f64:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c0113f67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f6d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113f70:	0f 85 71 ff ff ff    	jne    c0113ee7 <sfs_sync+0x62>
        }
    }
    unlock_sfs_fs(sfs);
c0113f76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f79:	89 04 24             	mov    %eax,(%esp)
c0113f7c:	e8 c2 db ff ff       	call   c0111b43 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0113f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f84:	8b 40 34             	mov    0x34(%eax),%eax
c0113f87:	85 c0                	test   %eax,%eax
c0113f89:	74 50                	je     c0113fdb <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0113f8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f8e:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0113f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f98:	89 04 24             	mov    %eax,(%esp)
c0113f9b:	e8 09 da ff ff       	call   c01119a9 <sfs_sync_super>
c0113fa0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113fa3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113fa7:	74 0f                	je     c0113fb8 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0113fa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fac:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0113fb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113fb6:	eb 28                	jmp    c0113fe0 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0113fb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fbb:	89 04 24             	mov    %eax,(%esp)
c0113fbe:	e8 72 da ff ff       	call   c0111a35 <sfs_sync_freemap>
c0113fc3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113fc6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113fca:	74 0f                	je     c0113fdb <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0113fcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fcf:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0113fd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113fd9:	eb 05                	jmp    c0113fe0 <sfs_sync+0x15b>
        }
    }
    return 0;
c0113fdb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113fe0:	c9                   	leave  
c0113fe1:	c3                   	ret    

c0113fe2 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0113fe2:	55                   	push   %ebp
c0113fe3:	89 e5                	mov    %esp,%ebp
c0113fe5:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0113fe8:	8b 45 08             	mov    0x8(%ebp),%eax
c0113feb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113fee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113ff2:	74 0a                	je     c0113ffe <sfs_get_root+0x1c>
c0113ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ff7:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113ffa:	85 c0                	test   %eax,%eax
c0113ffc:	74 24                	je     c0114022 <sfs_get_root+0x40>
c0113ffe:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0114005:	c0 
c0114006:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c011400d:	c0 
c011400e:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0114015:	00 
c0114016:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c011401d:	e8 d1 c4 fe ff       	call   c01004f3 <__panic>
c0114022:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114025:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011402c:	00 
c011402d:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0114030:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114034:	89 04 24             	mov    %eax,(%esp)
c0114037:	e8 08 e0 ff ff       	call   c0112044 <sfs_load_inode>
c011403c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011403f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114043:	74 23                	je     c0114068 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0114045:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114048:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011404c:	c7 44 24 08 d4 99 11 	movl   $0xc01199d4,0x8(%esp)
c0114053:	c0 
c0114054:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c011405b:	00 
c011405c:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0114063:	e8 8b c4 fe ff       	call   c01004f3 <__panic>
    }
    return node;
c0114068:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c011406b:	c9                   	leave  
c011406c:	c3                   	ret    

c011406d <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c011406d:	55                   	push   %ebp
c011406e:	89 e5                	mov    %esp,%ebp
c0114070:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0114073:	8b 45 08             	mov    0x8(%ebp),%eax
c0114076:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114079:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011407d:	74 0a                	je     c0114089 <sfs_unmount+0x1c>
c011407f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114082:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114085:	85 c0                	test   %eax,%eax
c0114087:	74 24                	je     c01140ad <sfs_unmount+0x40>
c0114089:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0114090:	c0 
c0114091:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c0114098:	c0 
c0114099:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c01140a0:	00 
c01140a1:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c01140a8:	e8 46 c4 fe ff       	call   c01004f3 <__panic>
c01140ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01140b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c01140b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01140b6:	83 c0 60             	add    $0x60,%eax
c01140b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return list->next == list;
c01140bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140bf:	8b 40 04             	mov    0x4(%eax),%eax
c01140c2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01140c5:	0f 94 c0             	sete   %al
c01140c8:	0f b6 c0             	movzbl %al,%eax
c01140cb:	85 c0                	test   %eax,%eax
c01140cd:	75 07                	jne    c01140d6 <sfs_unmount+0x69>
        return -E_BUSY;
c01140cf:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c01140d4:	eb 68                	jmp    c011413e <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c01140d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01140d9:	8b 40 34             	mov    0x34(%eax),%eax
c01140dc:	85 c0                	test   %eax,%eax
c01140de:	74 24                	je     c0114104 <sfs_unmount+0x97>
c01140e0:	c7 44 24 0c ed 99 11 	movl   $0xc01199ed,0xc(%esp)
c01140e7:	c0 
c01140e8:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c01140ef:	c0 
c01140f0:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01140f7:	00 
c01140f8:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c01140ff:	e8 ef c3 fe ff       	call   c01004f3 <__panic>
    bitmap_destroy(sfs->freemap);
c0114104:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114107:	8b 40 30             	mov    0x30(%eax),%eax
c011410a:	89 04 24             	mov    %eax,(%esp)
c011410d:	e8 d9 09 00 00       	call   c0114aeb <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0114112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114115:	8b 40 38             	mov    0x38(%eax),%eax
c0114118:	89 04 24             	mov    %eax,(%esp)
c011411b:	e8 fd 1a ff ff       	call   c0105c1d <kfree>
    kfree(sfs->hash_list);
c0114120:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114123:	8b 40 68             	mov    0x68(%eax),%eax
c0114126:	89 04 24             	mov    %eax,(%esp)
c0114129:	e8 ef 1a ff ff       	call   c0105c1d <kfree>
    kfree(sfs);
c011412e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114131:	89 04 24             	mov    %eax,(%esp)
c0114134:	e8 e4 1a ff ff       	call   c0105c1d <kfree>
    return 0;
c0114139:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011413e:	c9                   	leave  
c011413f:	c3                   	ret    

c0114140 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0114140:	55                   	push   %ebp
c0114141:	89 e5                	mov    %esp,%ebp
c0114143:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0114146:	8b 45 08             	mov    0x8(%ebp),%eax
c0114149:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011414c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114150:	74 0a                	je     c011415c <sfs_cleanup+0x1c>
c0114152:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114155:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114158:	85 c0                	test   %eax,%eax
c011415a:	74 24                	je     c0114180 <sfs_cleanup+0x40>
c011415c:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0114163:	c0 
c0114164:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c011416b:	c0 
c011416c:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0114173:	00 
c0114174:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c011417b:	e8 73 c3 fe ff       	call   c01004f3 <__panic>
c0114180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114183:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0114186:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114189:	8b 40 04             	mov    0x4(%eax),%eax
c011418c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011418f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114192:	8b 40 08             	mov    0x8(%eax),%eax
c0114195:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0114198:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011419b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011419e:	89 d1                	mov    %edx,%ecx
c01141a0:	29 c1                	sub    %eax,%ecx
c01141a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01141a5:	8d 50 0c             	lea    0xc(%eax),%edx
c01141a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141ab:	89 44 24 10          	mov    %eax,0x10(%esp)
c01141af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01141b2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01141b6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01141ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01141be:	c7 04 24 00 9a 11 c0 	movl   $0xc0119a00,(%esp)
c01141c5:	e8 d2 c1 fe ff       	call   c010039c <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c01141ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01141d1:	eb 1d                	jmp    c01141f0 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c01141d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01141d6:	8b 40 70             	mov    0x70(%eax),%eax
c01141d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01141dc:	89 14 24             	mov    %edx,(%esp)
c01141df:	ff d0                	call   *%eax
c01141e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01141e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01141e8:	75 02                	jne    c01141ec <sfs_cleanup+0xac>
            break;
c01141ea:	eb 0a                	jmp    c01141f6 <sfs_cleanup+0xb6>
    for (i = 0; i < 32; i ++) {
c01141ec:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01141f0:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01141f4:	7e dd                	jle    c01141d3 <sfs_cleanup+0x93>
        }
    }
    if (ret != 0) {
c01141f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01141fa:	74 2d                	je     c0114229 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c01141fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01141ff:	8d 50 0c             	lea    0xc(%eax),%edx
c0114202:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114205:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114209:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011420d:	c7 44 24 08 1f 9a 11 	movl   $0xc0119a1f,0x8(%esp)
c0114214:	c0 
c0114215:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011421c:	00 
c011421d:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0114224:	e8 47 c3 fe ff       	call   c0100570 <__warn>
    }
}
c0114229:	c9                   	leave  
c011422a:	c3                   	ret    

c011422b <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c011422b:	55                   	push   %ebp
c011422c:	89 e5                	mov    %esp,%ebp
c011422e:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114231:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114234:	c1 e0 0c             	shl    $0xc,%eax
c0114237:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011423b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114242:	00 
c0114243:	8b 45 10             	mov    0x10(%ebp),%eax
c0114246:	89 44 24 04          	mov    %eax,0x4(%esp)
c011424a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011424d:	89 04 24             	mov    %eax,(%esp)
c0114250:	e8 91 77 ff ff       	call   c010b9e6 <iobuf_init>
c0114255:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0114258:	8b 45 08             	mov    0x8(%ebp),%eax
c011425b:	8b 40 10             	mov    0x10(%eax),%eax
c011425e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114265:	00 
c0114266:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114269:	89 54 24 04          	mov    %edx,0x4(%esp)
c011426d:	8b 55 08             	mov    0x8(%ebp),%edx
c0114270:	89 14 24             	mov    %edx,(%esp)
c0114273:	ff d0                	call   *%eax
}
c0114275:	c9                   	leave  
c0114276:	c3                   	ret    

c0114277 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0114277:	55                   	push   %ebp
c0114278:	89 e5                	mov    %esp,%ebp
c011427a:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c011427d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114280:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114284:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114287:	89 04 24             	mov    %eax,(%esp)
c011428a:	e8 7d 08 00 00       	call   c0114b0c <bitmap_getdata>
c011428f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0114292:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114296:	74 0f                	je     c01142a7 <sfs_init_freemap+0x30>
c0114298:	8b 45 14             	mov    0x14(%ebp),%eax
c011429b:	c1 e0 0c             	shl    $0xc,%eax
c011429e:	89 c2                	mov    %eax,%edx
c01142a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01142a3:	39 c2                	cmp    %eax,%edx
c01142a5:	74 24                	je     c01142cb <sfs_init_freemap+0x54>
c01142a7:	c7 44 24 0c 3c 9a 11 	movl   $0xc0119a3c,0xc(%esp)
c01142ae:	c0 
c01142af:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c01142b6:	c0 
c01142b7:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c01142be:	00 
c01142bf:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c01142c6:	e8 28 c2 fe ff       	call   c01004f3 <__panic>
    while (nblks != 0) {
c01142cb:	eb 36                	jmp    c0114303 <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c01142cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01142d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01142d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01142db:	8b 45 08             	mov    0x8(%ebp),%eax
c01142de:	89 04 24             	mov    %eax,(%esp)
c01142e1:	e8 45 ff ff ff       	call   c011422b <sfs_init_read>
c01142e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01142e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01142ed:	74 05                	je     c01142f4 <sfs_init_freemap+0x7d>
            return ret;
c01142ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01142f2:	eb 1a                	jmp    c011430e <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c01142f4:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01142f8:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01142fc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    while (nblks != 0) {
c0114303:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0114307:	75 c4                	jne    c01142cd <sfs_init_freemap+0x56>
    }
    return 0;
c0114309:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011430e:	c9                   	leave  
c011430f:	c3                   	ret    

c0114310 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0114310:	55                   	push   %ebp
c0114311:	89 e5                	mov    %esp,%ebp
c0114313:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0114316:	8b 45 08             	mov    0x8(%ebp),%eax
c0114319:	8b 40 04             	mov    0x4(%eax),%eax
c011431c:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114321:	74 0a                	je     c011432d <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0114323:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0114328:	e9 fe 03 00 00       	jmp    c011472b <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c011432d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0114334:	e8 91 c3 ff ff       	call   c01106ca <__alloc_fs>
c0114339:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011433c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114340:	75 0a                	jne    c011434c <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0114342:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0114347:	e9 df 03 00 00       	jmp    c011472b <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011434c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011434f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114352:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114356:	74 0a                	je     c0114362 <sfs_do_mount+0x52>
c0114358:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011435b:	8b 40 6c             	mov    0x6c(%eax),%eax
c011435e:	85 c0                	test   %eax,%eax
c0114360:	74 24                	je     c0114386 <sfs_do_mount+0x76>
c0114362:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0114369:	c0 
c011436a:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c0114371:	c0 
c0114372:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0114379:	00 
c011437a:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0114381:	e8 6d c1 fe ff       	call   c01004f3 <__panic>
c0114386:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114389:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c011438c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011438f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114392:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0114395:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c011439c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01143a3:	e8 5a 18 ff ff       	call   c0105c02 <kmalloc>
c01143a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01143ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01143ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01143b1:	89 50 38             	mov    %edx,0x38(%eax)
c01143b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01143b7:	8b 40 38             	mov    0x38(%eax),%eax
c01143ba:	85 c0                	test   %eax,%eax
c01143bc:	75 05                	jne    c01143c3 <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c01143be:	e9 5a 03 00 00       	jmp    c011471d <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c01143c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01143c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01143ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01143d1:	00 
c01143d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01143d5:	89 04 24             	mov    %eax,(%esp)
c01143d8:	e8 4e fe ff ff       	call   c011422b <sfs_init_read>
c01143dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01143e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01143e4:	74 05                	je     c01143eb <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c01143e6:	e9 27 03 00 00       	jmp    c0114712 <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c01143eb:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c01143f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01143f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c01143f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01143fb:	8b 00                	mov    (%eax),%eax
c01143fd:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0114402:	74 22                	je     c0114426 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0114404:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114407:	8b 00                	mov    (%eax),%eax
c0114409:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0114410:	2f 
c0114411:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114415:	c7 04 24 68 9a 11 c0 	movl   $0xc0119a68,(%esp)
c011441c:	e8 7b bf fe ff       	call   c010039c <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0114421:	e9 ec 02 00 00       	jmp    c0114712 <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0114426:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114429:	8b 50 04             	mov    0x4(%eax),%edx
c011442c:	8b 45 08             	mov    0x8(%ebp),%eax
c011442f:	8b 00                	mov    (%eax),%eax
c0114431:	39 c2                	cmp    %eax,%edx
c0114433:	76 24                	jbe    c0114459 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0114435:	8b 45 08             	mov    0x8(%ebp),%eax
c0114438:	8b 10                	mov    (%eax),%edx
c011443a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011443d:	8b 40 04             	mov    0x4(%eax),%eax
c0114440:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114444:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114448:	c7 04 24 a0 9a 11 c0 	movl   $0xc0119aa0,(%esp)
c011444f:	e8 48 bf fe ff       	call   c010039c <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0114454:	e9 b9 02 00 00       	jmp    c0114712 <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0114459:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011445c:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0114460:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114463:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0114466:	8b 0a                	mov    (%edx),%ecx
c0114468:	89 08                	mov    %ecx,(%eax)
c011446a:	8b 4a 04             	mov    0x4(%edx),%ecx
c011446d:	89 48 04             	mov    %ecx,0x4(%eax)
c0114470:	8b 4a 08             	mov    0x8(%edx),%ecx
c0114473:	89 48 08             	mov    %ecx,0x8(%eax)
c0114476:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0114479:	89 48 0c             	mov    %ecx,0xc(%eax)
c011447c:	8b 4a 10             	mov    0x10(%edx),%ecx
c011447f:	89 48 10             	mov    %ecx,0x10(%eax)
c0114482:	8b 4a 14             	mov    0x14(%edx),%ecx
c0114485:	89 48 14             	mov    %ecx,0x14(%eax)
c0114488:	8b 4a 18             	mov    0x18(%edx),%ecx
c011448b:	89 48 18             	mov    %ecx,0x18(%eax)
c011448e:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0114491:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0114494:	8b 4a 20             	mov    0x20(%edx),%ecx
c0114497:	89 48 20             	mov    %ecx,0x20(%eax)
c011449a:	8b 4a 24             	mov    0x24(%edx),%ecx
c011449d:	89 48 24             	mov    %ecx,0x24(%eax)
c01144a0:	8b 52 28             	mov    0x28(%edx),%edx
c01144a3:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c01144a6:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c01144ad:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c01144b4:	e8 49 17 ff ff       	call   c0105c02 <kmalloc>
c01144b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01144bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144bf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01144c2:	89 50 68             	mov    %edx,0x68(%eax)
c01144c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144c8:	8b 40 68             	mov    0x68(%eax),%eax
c01144cb:	85 c0                	test   %eax,%eax
c01144cd:	75 05                	jne    c01144d4 <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c01144cf:	e9 3e 02 00 00       	jmp    c0114712 <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01144d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01144db:	eb 2a                	jmp    c0114507 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c01144dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144e0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01144e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01144ea:	01 d0                	add    %edx,%eax
c01144ec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    elm->prev = elm->next = elm;
c01144ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01144f2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01144f5:	89 50 04             	mov    %edx,0x4(%eax)
c01144f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01144fb:	8b 50 04             	mov    0x4(%eax),%edx
c01144fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0114501:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0114503:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0114507:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c011450e:	76 cd                	jbe    c01144dd <sfs_do_mount+0x1cd>
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0114510:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0114517:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011451a:	8b 50 04             	mov    0x4(%eax),%edx
c011451d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114520:	01 d0                	add    %edx,%eax
c0114522:	83 e8 01             	sub    $0x1,%eax
c0114525:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0114528:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011452b:	ba 00 00 00 00       	mov    $0x0,%edx
c0114530:	f7 75 d0             	divl   -0x30(%ebp)
c0114533:	89 d0                	mov    %edx,%eax
c0114535:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0114538:	29 c2                	sub    %eax,%edx
c011453a:	89 d0                	mov    %edx,%eax
c011453c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c011453f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0114542:	89 04 24             	mov    %eax,(%esp)
c0114545:	e8 fe 01 00 00       	call   c0114748 <bitmap_create>
c011454a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c011454d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114550:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0114553:	89 50 30             	mov    %edx,0x30(%eax)
c0114556:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114559:	8b 40 30             	mov    0x30(%eax),%eax
c011455c:	85 c0                	test   %eax,%eax
c011455e:	75 05                	jne    c0114565 <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0114560:	e9 a2 01 00 00       	jmp    c0114707 <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0114565:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c011456c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011456f:	8b 50 04             	mov    0x4(%eax),%edx
c0114572:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0114575:	01 d0                	add    %edx,%eax
c0114577:	83 e8 01             	sub    $0x1,%eax
c011457a:	ba 00 00 00 00       	mov    $0x0,%edx
c011457f:	f7 75 c0             	divl   -0x40(%ebp)
c0114582:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0114585:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114588:	89 44 24 10          	mov    %eax,0x10(%esp)
c011458c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c011458f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114593:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c011459a:	00 
c011459b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011459e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01145a5:	89 04 24             	mov    %eax,(%esp)
c01145a8:	e8 ca fc ff ff       	call   c0114277 <sfs_init_freemap>
c01145ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01145b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01145b4:	74 11                	je     c01145c7 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c01145b6:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c01145b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01145ba:	89 04 24             	mov    %eax,(%esp)
c01145bd:	e8 29 05 00 00       	call   c0114aeb <bitmap_destroy>
c01145c2:	e9 40 01 00 00       	jmp    c0114707 <sfs_do_mount+0x3f7>
    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c01145c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01145ca:	8b 40 04             	mov    0x4(%eax),%eax
c01145cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01145d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c01145d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01145de:	eb 1e                	jmp    c01145fe <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c01145e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01145e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01145ea:	89 04 24             	mov    %eax,(%esp)
c01145ed:	e8 5e 04 00 00       	call   c0114a50 <bitmap_test>
c01145f2:	85 c0                	test   %eax,%eax
c01145f4:	74 04                	je     c01145fa <sfs_do_mount+0x2ea>
            unused_blocks ++;
c01145f6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c01145fa:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01145fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114601:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0114604:	72 da                	jb     c01145e0 <sfs_do_mount+0x2d0>
    assert(unused_blocks == sfs->super.unused_blocks);
c0114606:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114609:	8b 40 08             	mov    0x8(%eax),%eax
c011460c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c011460f:	74 24                	je     c0114635 <sfs_do_mount+0x325>
c0114611:	c7 44 24 0c d0 9a 11 	movl   $0xc0119ad0,0xc(%esp)
c0114618:	c0 
c0114619:	c7 44 24 08 55 99 11 	movl   $0xc0119955,0x8(%esp)
c0114620:	c0 
c0114621:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0114628:	00 
c0114629:	c7 04 24 6a 99 11 c0 	movl   $0xc011996a,(%esp)
c0114630:	e8 be be fe ff       	call   c01004f3 <__panic>
    sfs->super_dirty = 0;
c0114635:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114638:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c011463f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114642:	83 c0 3c             	add    $0x3c,%eax
c0114645:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011464c:	00 
c011464d:	89 04 24             	mov    %eax,(%esp)
c0114650:	e8 a7 58 ff ff       	call   c0109efc <sem_init>
    sem_init(&(sfs->io_sem), 1);
c0114655:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114658:	83 c0 48             	add    $0x48,%eax
c011465b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0114662:	00 
c0114663:	89 04 24             	mov    %eax,(%esp)
c0114666:	e8 91 58 ff ff       	call   c0109efc <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c011466b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011466e:	83 c0 54             	add    $0x54,%eax
c0114671:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0114678:	00 
c0114679:	89 04 24             	mov    %eax,(%esp)
c011467c:	e8 7b 58 ff ff       	call   c0109efc <sem_init>
    list_init(&(sfs->inode_list));
c0114681:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114684:	83 c0 60             	add    $0x60,%eax
c0114687:	89 45 b0             	mov    %eax,-0x50(%ebp)
c011468a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011468d:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0114690:	89 50 04             	mov    %edx,0x4(%eax)
c0114693:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0114696:	8b 50 04             	mov    0x4(%eax),%edx
c0114699:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011469c:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c011469e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01146a1:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01146a4:	89 d1                	mov    %edx,%ecx
c01146a6:	29 c1                	sub    %eax,%ecx
c01146a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01146ab:	8d 50 0c             	lea    0xc(%eax),%edx
c01146ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01146b1:	89 44 24 10          	mov    %eax,0x10(%esp)
c01146b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01146b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01146bc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01146c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01146c4:	c7 04 24 fa 9a 11 c0 	movl   $0xc0119afa,(%esp)
c01146cb:	e8 cc bc fe ff       	call   c010039c <cprintf>
    fs->fs_sync = sfs_sync;
c01146d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146d3:	c7 40 70 85 3e 11 c0 	movl   $0xc0113e85,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01146da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146dd:	c7 40 74 e2 3f 11 c0 	movl   $0xc0113fe2,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01146e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146e7:	c7 40 78 6d 40 11 c0 	movl   $0xc011406d,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01146ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146f1:	c7 40 7c 40 41 11 c0 	movl   $0xc0114140,0x7c(%eax)
    *fs_store = fs;
c01146f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01146fb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01146fe:	89 10                	mov    %edx,(%eax)
    return 0;
c0114700:	b8 00 00 00 00       	mov    $0x0,%eax
c0114705:	eb 24                	jmp    c011472b <sfs_do_mount+0x41b>
failed_cleanup_hash_list:
    kfree(hash_list);
c0114707:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011470a:	89 04 24             	mov    %eax,(%esp)
c011470d:	e8 0b 15 ff ff       	call   c0105c1d <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0114712:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114715:	89 04 24             	mov    %eax,(%esp)
c0114718:	e8 00 15 ff ff       	call   c0105c1d <kfree>
failed_cleanup_fs:
    kfree(fs);
c011471d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114720:	89 04 24             	mov    %eax,(%esp)
c0114723:	e8 f5 14 ff ff       	call   c0105c1d <kfree>
    return ret;
c0114728:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011472b:	c9                   	leave  
c011472c:	c3                   	ret    

c011472d <sfs_mount>:

int
sfs_mount(const char *devname) {
c011472d:	55                   	push   %ebp
c011472e:	89 e5                	mov    %esp,%ebp
c0114730:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c0114733:	c7 44 24 04 10 43 11 	movl   $0xc0114310,0x4(%esp)
c011473a:	c0 
c011473b:	8b 45 08             	mov    0x8(%ebp),%eax
c011473e:	89 04 24             	mov    %eax,(%esp)
c0114741:	e8 33 af ff ff       	call   c010f679 <vfs_mount>
}
c0114746:	c9                   	leave  
c0114747:	c3                   	ret    

c0114748 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0114748:	55                   	push   %ebp
c0114749:	89 e5                	mov    %esp,%ebp
c011474b:	56                   	push   %esi
c011474c:	53                   	push   %ebx
c011474d:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0114750:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114754:	74 0b                	je     c0114761 <bitmap_create+0x19>
c0114756:	8b 45 08             	mov    0x8(%ebp),%eax
c0114759:	83 c0 20             	add    $0x20,%eax
c011475c:	3b 45 08             	cmp    0x8(%ebp),%eax
c011475f:	77 24                	ja     c0114785 <bitmap_create+0x3d>
c0114761:	c7 44 24 0c 18 9b 11 	movl   $0xc0119b18,0xc(%esp)
c0114768:	c0 
c0114769:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c0114770:	c0 
c0114771:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0114778:	00 
c0114779:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c0114780:	e8 6e bd fe ff       	call   c01004f3 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0114785:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011478c:	e8 71 14 ff ff       	call   c0105c02 <kmalloc>
c0114791:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114794:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114798:	75 0a                	jne    c01147a4 <bitmap_create+0x5c>
        return NULL;
c011479a:	b8 00 00 00 00       	mov    $0x0,%eax
c011479f:	e9 43 01 00 00       	jmp    c01148e7 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c01147a4:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c01147ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01147ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01147b1:	01 d0                	add    %edx,%eax
c01147b3:	83 e8 01             	sub    $0x1,%eax
c01147b6:	ba 00 00 00 00       	mov    $0x0,%edx
c01147bb:	f7 75 ec             	divl   -0x14(%ebp)
c01147be:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c01147c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01147c4:	c1 e0 02             	shl    $0x2,%eax
c01147c7:	89 04 24             	mov    %eax,(%esp)
c01147ca:	e8 33 14 ff ff       	call   c0105c02 <kmalloc>
c01147cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01147d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01147d6:	75 15                	jne    c01147ed <bitmap_create+0xa5>
        kfree(bitmap);
c01147d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01147db:	89 04 24             	mov    %eax,(%esp)
c01147de:	e8 3a 14 ff ff       	call   c0105c1d <kfree>
        return NULL;
c01147e3:	b8 00 00 00 00       	mov    $0x0,%eax
c01147e8:	e9 fa 00 00 00       	jmp    c01148e7 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01147ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01147f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01147f3:	89 10                	mov    %edx,(%eax)
c01147f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01147f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01147fb:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01147fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114801:	c1 e0 02             	shl    $0x2,%eax
c0114804:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114808:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c011480f:	ff 
c0114810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114813:	89 04 24             	mov    %eax,(%esp)
c0114816:	e8 6a 06 00 00       	call   c0114e85 <memset>
c011481b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011481e:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c0114821:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114824:	c1 e0 05             	shl    $0x5,%eax
c0114827:	3b 45 08             	cmp    0x8(%ebp),%eax
c011482a:	0f 84 b4 00 00 00    	je     c01148e4 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c0114830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114833:	83 e8 01             	sub    $0x1,%eax
c0114836:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114839:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011483c:	c1 e0 05             	shl    $0x5,%eax
c011483f:	89 c2                	mov    %eax,%edx
c0114841:	8b 45 08             	mov    0x8(%ebp),%eax
c0114844:	29 d0                	sub    %edx,%eax
c0114846:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0114849:	8b 45 08             	mov    0x8(%ebp),%eax
c011484c:	c1 e8 05             	shr    $0x5,%eax
c011484f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0114852:	74 24                	je     c0114878 <bitmap_create+0x130>
c0114854:	c7 44 24 0c 6a 9b 11 	movl   $0xc0119b6a,0xc(%esp)
c011485b:	c0 
c011485c:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c0114863:	c0 
c0114864:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c011486b:	00 
c011486c:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c0114873:	e8 7b bc fe ff       	call   c01004f3 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0114878:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011487c:	74 06                	je     c0114884 <bitmap_create+0x13c>
c011487e:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0114882:	76 24                	jbe    c01148a8 <bitmap_create+0x160>
c0114884:	c7 44 24 0c 84 9b 11 	movl   $0xc0119b84,0xc(%esp)
c011488b:	c0 
c011488c:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c0114893:	c0 
c0114894:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011489b:	00 
c011489c:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c01148a3:	e8 4b bc fe ff       	call   c01004f3 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c01148a8:	eb 34                	jmp    c01148de <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c01148aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01148ad:	8b 40 08             	mov    0x8(%eax),%eax
c01148b0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01148b3:	c1 e2 02             	shl    $0x2,%edx
c01148b6:	01 c2                	add    %eax,%edx
c01148b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01148bb:	8b 40 08             	mov    0x8(%eax),%eax
c01148be:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01148c1:	c1 e1 02             	shl    $0x2,%ecx
c01148c4:	01 c8                	add    %ecx,%eax
c01148c6:	8b 18                	mov    (%eax),%ebx
c01148c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01148cb:	be 01 00 00 00       	mov    $0x1,%esi
c01148d0:	89 c1                	mov    %eax,%ecx
c01148d2:	d3 e6                	shl    %cl,%esi
c01148d4:	89 f0                	mov    %esi,%eax
c01148d6:	31 d8                	xor    %ebx,%eax
c01148d8:	89 02                	mov    %eax,(%edx)
        for (; overbits < WORD_BITS; overbits ++) {
c01148da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01148de:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01148e2:	76 c6                	jbe    c01148aa <bitmap_create+0x162>
        }
    }
    return bitmap;
c01148e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01148e7:	83 c4 30             	add    $0x30,%esp
c01148ea:	5b                   	pop    %ebx
c01148eb:	5e                   	pop    %esi
c01148ec:	5d                   	pop    %ebp
c01148ed:	c3                   	ret    

c01148ee <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01148ee:	55                   	push   %ebp
c01148ef:	89 e5                	mov    %esp,%ebp
c01148f1:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01148f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01148f7:	8b 40 08             	mov    0x8(%eax),%eax
c01148fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01148fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114900:	8b 40 04             	mov    0x4(%eax),%eax
c0114903:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0114906:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011490d:	e9 bb 00 00 00       	jmp    c01149cd <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c0114912:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114915:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011491c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011491f:	01 d0                	add    %edx,%eax
c0114921:	8b 00                	mov    (%eax),%eax
c0114923:	85 c0                	test   %eax,%eax
c0114925:	0f 84 9e 00 00 00    	je     c01149c9 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011492b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0114932:	eb 6b                	jmp    c011499f <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0114934:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114937:	ba 01 00 00 00       	mov    $0x1,%edx
c011493c:	89 c1                	mov    %eax,%ecx
c011493e:	d3 e2                	shl    %cl,%edx
c0114940:	89 d0                	mov    %edx,%eax
c0114942:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0114945:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114948:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011494f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114952:	01 d0                	add    %edx,%eax
c0114954:	8b 00                	mov    (%eax),%eax
c0114956:	23 45 e4             	and    -0x1c(%ebp),%eax
c0114959:	85 c0                	test   %eax,%eax
c011495b:	74 3e                	je     c011499b <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011495d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114960:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0114967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011496a:	01 c2                	add    %eax,%edx
c011496c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011496f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0114976:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114979:	01 c8                	add    %ecx,%eax
c011497b:	8b 00                	mov    (%eax),%eax
c011497d:	33 45 e4             	xor    -0x1c(%ebp),%eax
c0114980:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0114982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114985:	c1 e0 05             	shl    $0x5,%eax
c0114988:	89 c2                	mov    %eax,%edx
c011498a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011498d:	01 c2                	add    %eax,%edx
c011498f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114992:	89 10                	mov    %edx,(%eax)
                    return 0;
c0114994:	b8 00 00 00 00       	mov    $0x0,%eax
c0114999:	eb 43                	jmp    c01149de <bitmap_alloc+0xf0>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011499b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011499f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01149a3:	76 8f                	jbe    c0114934 <bitmap_alloc+0x46>
                }
            }
            assert(0);
c01149a5:	c7 44 24 0c a9 9b 11 	movl   $0xc0119ba9,0xc(%esp)
c01149ac:	c0 
c01149ad:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c01149b4:	c0 
c01149b5:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01149bc:	00 
c01149bd:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c01149c4:	e8 2a bb fe ff       	call   c01004f3 <__panic>
    for (ix = 0; ix < nwords; ix ++) {
c01149c9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01149cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01149d0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01149d3:	0f 82 39 ff ff ff    	jb     c0114912 <bitmap_alloc+0x24>
        }
    }
    return -E_NO_MEM;
c01149d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01149de:	c9                   	leave  
c01149df:	c3                   	ret    

c01149e0 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01149e0:	55                   	push   %ebp
c01149e1:	89 e5                	mov    %esp,%ebp
c01149e3:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01149e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149e9:	8b 00                	mov    (%eax),%eax
c01149eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01149ee:	77 24                	ja     c0114a14 <bitmap_translate+0x34>
c01149f0:	c7 44 24 0c ab 9b 11 	movl   $0xc0119bab,0xc(%esp)
c01149f7:	c0 
c01149f8:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c01149ff:	c0 
c0114a00:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0114a07:	00 
c0114a08:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c0114a0f:	e8 df ba fe ff       	call   c01004f3 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0114a14:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a17:	c1 e8 05             	shr    $0x5,%eax
c0114a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114a1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a20:	83 e0 1f             	and    $0x1f,%eax
c0114a23:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0114a26:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a29:	8b 40 08             	mov    0x8(%eax),%eax
c0114a2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114a2f:	c1 e2 02             	shl    $0x2,%edx
c0114a32:	01 c2                	add    %eax,%edx
c0114a34:	8b 45 10             	mov    0x10(%ebp),%eax
c0114a37:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0114a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a3c:	ba 01 00 00 00       	mov    $0x1,%edx
c0114a41:	89 c1                	mov    %eax,%ecx
c0114a43:	d3 e2                	shl    %cl,%edx
c0114a45:	89 d0                	mov    %edx,%eax
c0114a47:	89 c2                	mov    %eax,%edx
c0114a49:	8b 45 14             	mov    0x14(%ebp),%eax
c0114a4c:	89 10                	mov    %edx,(%eax)
}
c0114a4e:	c9                   	leave  
c0114a4f:	c3                   	ret    

c0114a50 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0114a50:	55                   	push   %ebp
c0114a51:	89 e5                	mov    %esp,%ebp
c0114a53:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0114a56:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114a59:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114a5d:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0114a60:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a6e:	89 04 24             	mov    %eax,(%esp)
c0114a71:	e8 6a ff ff ff       	call   c01149e0 <bitmap_translate>
    return (*word & mask);
c0114a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114a79:	8b 10                	mov    (%eax),%edx
c0114a7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a7e:	21 d0                	and    %edx,%eax
}
c0114a80:	c9                   	leave  
c0114a81:	c3                   	ret    

c0114a82 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0114a82:	55                   	push   %ebp
c0114a83:	89 e5                	mov    %esp,%ebp
c0114a85:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0114a88:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114a8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114a8f:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0114a92:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aa0:	89 04 24             	mov    %eax,(%esp)
c0114aa3:	e8 38 ff ff ff       	call   c01149e0 <bitmap_translate>
    assert(!(*word & mask));
c0114aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114aab:	8b 10                	mov    (%eax),%edx
c0114aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ab0:	21 d0                	and    %edx,%eax
c0114ab2:	85 c0                	test   %eax,%eax
c0114ab4:	74 24                	je     c0114ada <bitmap_free+0x58>
c0114ab6:	c7 44 24 0c c1 9b 11 	movl   $0xc0119bc1,0xc(%esp)
c0114abd:	c0 
c0114abe:	c7 44 24 08 40 9b 11 	movl   $0xc0119b40,0x8(%esp)
c0114ac5:	c0 
c0114ac6:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0114acd:	00 
c0114ace:	c7 04 24 55 9b 11 c0 	movl   $0xc0119b55,(%esp)
c0114ad5:	e8 19 ba fe ff       	call   c01004f3 <__panic>
    *word |= mask;
c0114ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114add:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114ae0:	8b 0a                	mov    (%edx),%ecx
c0114ae2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114ae5:	09 ca                	or     %ecx,%edx
c0114ae7:	89 10                	mov    %edx,(%eax)
}
c0114ae9:	c9                   	leave  
c0114aea:	c3                   	ret    

c0114aeb <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0114aeb:	55                   	push   %ebp
c0114aec:	89 e5                	mov    %esp,%ebp
c0114aee:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0114af1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114af4:	8b 40 08             	mov    0x8(%eax),%eax
c0114af7:	89 04 24             	mov    %eax,(%esp)
c0114afa:	e8 1e 11 ff ff       	call   c0105c1d <kfree>
    kfree(bitmap);
c0114aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b02:	89 04 24             	mov    %eax,(%esp)
c0114b05:	e8 13 11 ff ff       	call   c0105c1d <kfree>
}
c0114b0a:	c9                   	leave  
c0114b0b:	c3                   	ret    

c0114b0c <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0114b0c:	55                   	push   %ebp
c0114b0d:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0114b0f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114b13:	74 12                	je     c0114b27 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0114b15:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b18:	8b 40 04             	mov    0x4(%eax),%eax
c0114b1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0114b22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114b25:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0114b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b2a:	8b 40 08             	mov    0x8(%eax),%eax
}
c0114b2d:	5d                   	pop    %ebp
c0114b2e:	c3                   	ret    

c0114b2f <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0114b2f:	55                   	push   %ebp
c0114b30:	89 e5                	mov    %esp,%ebp
c0114b32:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0114b35:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0114b3c:	eb 04                	jmp    c0114b42 <strlen+0x13>
        cnt ++;
c0114b3e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s ++ != '\0') {
c0114b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b45:	8d 50 01             	lea    0x1(%eax),%edx
c0114b48:	89 55 08             	mov    %edx,0x8(%ebp)
c0114b4b:	0f b6 00             	movzbl (%eax),%eax
c0114b4e:	84 c0                	test   %al,%al
c0114b50:	75 ec                	jne    c0114b3e <strlen+0xf>
    }
    return cnt;
c0114b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0114b55:	c9                   	leave  
c0114b56:	c3                   	ret    

c0114b57 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0114b57:	55                   	push   %ebp
c0114b58:	89 e5                	mov    %esp,%ebp
c0114b5a:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0114b5d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0114b64:	eb 04                	jmp    c0114b6a <strnlen+0x13>
        cnt ++;
c0114b66:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0114b6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114b6d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0114b70:	73 10                	jae    c0114b82 <strnlen+0x2b>
c0114b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b75:	8d 50 01             	lea    0x1(%eax),%edx
c0114b78:	89 55 08             	mov    %edx,0x8(%ebp)
c0114b7b:	0f b6 00             	movzbl (%eax),%eax
c0114b7e:	84 c0                	test   %al,%al
c0114b80:	75 e4                	jne    c0114b66 <strnlen+0xf>
    }
    return cnt;
c0114b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0114b85:	c9                   	leave  
c0114b86:	c3                   	ret    

c0114b87 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0114b87:	55                   	push   %ebp
c0114b88:	89 e5                	mov    %esp,%ebp
c0114b8a:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0114b8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b90:	89 04 24             	mov    %eax,(%esp)
c0114b93:	e8 97 ff ff ff       	call   c0114b2f <strlen>
c0114b98:	8b 55 08             	mov    0x8(%ebp),%edx
c0114b9b:	01 c2                	add    %eax,%edx
c0114b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ba0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ba4:	89 14 24             	mov    %edx,(%esp)
c0114ba7:	e8 02 00 00 00       	call   c0114bae <strcpy>
}
c0114bac:	c9                   	leave  
c0114bad:	c3                   	ret    

c0114bae <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0114bae:	55                   	push   %ebp
c0114baf:	89 e5                	mov    %esp,%ebp
c0114bb1:	57                   	push   %edi
c0114bb2:	56                   	push   %esi
c0114bb3:	83 ec 20             	sub    $0x20,%esp
c0114bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0114bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114bc8:	89 d1                	mov    %edx,%ecx
c0114bca:	89 c2                	mov    %eax,%edx
c0114bcc:	89 ce                	mov    %ecx,%esi
c0114bce:	89 d7                	mov    %edx,%edi
c0114bd0:	ac                   	lods   %ds:(%esi),%al
c0114bd1:	aa                   	stos   %al,%es:(%edi)
c0114bd2:	84 c0                	test   %al,%al
c0114bd4:	75 fa                	jne    c0114bd0 <strcpy+0x22>
c0114bd6:	89 fa                	mov    %edi,%edx
c0114bd8:	89 f1                	mov    %esi,%ecx
c0114bda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0114bdd:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0114be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0114be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0114be6:	83 c4 20             	add    $0x20,%esp
c0114be9:	5e                   	pop    %esi
c0114bea:	5f                   	pop    %edi
c0114beb:	5d                   	pop    %ebp
c0114bec:	c3                   	ret    

c0114bed <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0114bed:	55                   	push   %ebp
c0114bee:	89 e5                	mov    %esp,%ebp
c0114bf0:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0114bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0114bf9:	eb 21                	jmp    c0114c1c <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c0114bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114bfe:	0f b6 10             	movzbl (%eax),%edx
c0114c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114c04:	88 10                	mov    %dl,(%eax)
c0114c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114c09:	0f b6 00             	movzbl (%eax),%eax
c0114c0c:	84 c0                	test   %al,%al
c0114c0e:	74 04                	je     c0114c14 <strncpy+0x27>
            src ++;
c0114c10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0114c14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0114c18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (len > 0) {
c0114c1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114c20:	75 d9                	jne    c0114bfb <strncpy+0xe>
    }
    return dst;
c0114c22:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114c25:	c9                   	leave  
c0114c26:	c3                   	ret    

c0114c27 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0114c27:	55                   	push   %ebp
c0114c28:	89 e5                	mov    %esp,%ebp
c0114c2a:	57                   	push   %edi
c0114c2b:	56                   	push   %esi
c0114c2c:	83 ec 20             	sub    $0x20,%esp
c0114c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile (
c0114c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c41:	89 d1                	mov    %edx,%ecx
c0114c43:	89 c2                	mov    %eax,%edx
c0114c45:	89 ce                	mov    %ecx,%esi
c0114c47:	89 d7                	mov    %edx,%edi
c0114c49:	ac                   	lods   %ds:(%esi),%al
c0114c4a:	ae                   	scas   %es:(%edi),%al
c0114c4b:	75 08                	jne    c0114c55 <strcmp+0x2e>
c0114c4d:	84 c0                	test   %al,%al
c0114c4f:	75 f8                	jne    c0114c49 <strcmp+0x22>
c0114c51:	31 c0                	xor    %eax,%eax
c0114c53:	eb 04                	jmp    c0114c59 <strcmp+0x32>
c0114c55:	19 c0                	sbb    %eax,%eax
c0114c57:	0c 01                	or     $0x1,%al
c0114c59:	89 fa                	mov    %edi,%edx
c0114c5b:	89 f1                	mov    %esi,%ecx
c0114c5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114c60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0114c63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return ret;
c0114c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0114c69:	83 c4 20             	add    $0x20,%esp
c0114c6c:	5e                   	pop    %esi
c0114c6d:	5f                   	pop    %edi
c0114c6e:	5d                   	pop    %ebp
c0114c6f:	c3                   	ret    

c0114c70 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0114c70:	55                   	push   %ebp
c0114c71:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0114c73:	eb 0c                	jmp    c0114c81 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0114c75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0114c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114c7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0114c81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114c85:	74 1a                	je     c0114ca1 <strncmp+0x31>
c0114c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c8a:	0f b6 00             	movzbl (%eax),%eax
c0114c8d:	84 c0                	test   %al,%al
c0114c8f:	74 10                	je     c0114ca1 <strncmp+0x31>
c0114c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c94:	0f b6 10             	movzbl (%eax),%edx
c0114c97:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c9a:	0f b6 00             	movzbl (%eax),%eax
c0114c9d:	38 c2                	cmp    %al,%dl
c0114c9f:	74 d4                	je     c0114c75 <strncmp+0x5>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0114ca1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114ca5:	74 18                	je     c0114cbf <strncmp+0x4f>
c0114ca7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114caa:	0f b6 00             	movzbl (%eax),%eax
c0114cad:	0f b6 d0             	movzbl %al,%edx
c0114cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cb3:	0f b6 00             	movzbl (%eax),%eax
c0114cb6:	0f b6 c0             	movzbl %al,%eax
c0114cb9:	29 c2                	sub    %eax,%edx
c0114cbb:	89 d0                	mov    %edx,%eax
c0114cbd:	eb 05                	jmp    c0114cc4 <strncmp+0x54>
c0114cbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114cc4:	5d                   	pop    %ebp
c0114cc5:	c3                   	ret    

c0114cc6 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0114cc6:	55                   	push   %ebp
c0114cc7:	89 e5                	mov    %esp,%ebp
c0114cc9:	83 ec 04             	sub    $0x4,%esp
c0114ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0114cd2:	eb 14                	jmp    c0114ce8 <strchr+0x22>
        if (*s == c) {
c0114cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cd7:	0f b6 00             	movzbl (%eax),%eax
c0114cda:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0114cdd:	75 05                	jne    c0114ce4 <strchr+0x1e>
            return (char *)s;
c0114cdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ce2:	eb 13                	jmp    c0114cf7 <strchr+0x31>
        }
        s ++;
c0114ce4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c0114ce8:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ceb:	0f b6 00             	movzbl (%eax),%eax
c0114cee:	84 c0                	test   %al,%al
c0114cf0:	75 e2                	jne    c0114cd4 <strchr+0xe>
    }
    return NULL;
c0114cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114cf7:	c9                   	leave  
c0114cf8:	c3                   	ret    

c0114cf9 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0114cf9:	55                   	push   %ebp
c0114cfa:	89 e5                	mov    %esp,%ebp
c0114cfc:	83 ec 04             	sub    $0x4,%esp
c0114cff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d02:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0114d05:	eb 11                	jmp    c0114d18 <strfind+0x1f>
        if (*s == c) {
c0114d07:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d0a:	0f b6 00             	movzbl (%eax),%eax
c0114d0d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0114d10:	75 02                	jne    c0114d14 <strfind+0x1b>
            break;
c0114d12:	eb 0e                	jmp    c0114d22 <strfind+0x29>
        }
        s ++;
c0114d14:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c0114d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d1b:	0f b6 00             	movzbl (%eax),%eax
c0114d1e:	84 c0                	test   %al,%al
c0114d20:	75 e5                	jne    c0114d07 <strfind+0xe>
    }
    return (char *)s;
c0114d22:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114d25:	c9                   	leave  
c0114d26:	c3                   	ret    

c0114d27 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0114d27:	55                   	push   %ebp
c0114d28:	89 e5                	mov    %esp,%ebp
c0114d2a:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c0114d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0114d34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0114d3b:	eb 04                	jmp    c0114d41 <strtol+0x1a>
        s ++;
c0114d3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s == ' ' || *s == '\t') {
c0114d41:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d44:	0f b6 00             	movzbl (%eax),%eax
c0114d47:	3c 20                	cmp    $0x20,%al
c0114d49:	74 f2                	je     c0114d3d <strtol+0x16>
c0114d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d4e:	0f b6 00             	movzbl (%eax),%eax
c0114d51:	3c 09                	cmp    $0x9,%al
c0114d53:	74 e8                	je     c0114d3d <strtol+0x16>
    }

    // plus/minus sign
    if (*s == '+') {
c0114d55:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d58:	0f b6 00             	movzbl (%eax),%eax
c0114d5b:	3c 2b                	cmp    $0x2b,%al
c0114d5d:	75 06                	jne    c0114d65 <strtol+0x3e>
        s ++;
c0114d5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114d63:	eb 15                	jmp    c0114d7a <strtol+0x53>
    }
    else if (*s == '-') {
c0114d65:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d68:	0f b6 00             	movzbl (%eax),%eax
c0114d6b:	3c 2d                	cmp    $0x2d,%al
c0114d6d:	75 0b                	jne    c0114d7a <strtol+0x53>
        s ++, neg = 1;
c0114d6f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114d73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0114d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114d7e:	74 06                	je     c0114d86 <strtol+0x5f>
c0114d80:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0114d84:	75 24                	jne    c0114daa <strtol+0x83>
c0114d86:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d89:	0f b6 00             	movzbl (%eax),%eax
c0114d8c:	3c 30                	cmp    $0x30,%al
c0114d8e:	75 1a                	jne    c0114daa <strtol+0x83>
c0114d90:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d93:	83 c0 01             	add    $0x1,%eax
c0114d96:	0f b6 00             	movzbl (%eax),%eax
c0114d99:	3c 78                	cmp    $0x78,%al
c0114d9b:	75 0d                	jne    c0114daa <strtol+0x83>
        s += 2, base = 16;
c0114d9d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0114da1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0114da8:	eb 2a                	jmp    c0114dd4 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0114daa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114dae:	75 17                	jne    c0114dc7 <strtol+0xa0>
c0114db0:	8b 45 08             	mov    0x8(%ebp),%eax
c0114db3:	0f b6 00             	movzbl (%eax),%eax
c0114db6:	3c 30                	cmp    $0x30,%al
c0114db8:	75 0d                	jne    c0114dc7 <strtol+0xa0>
        s ++, base = 8;
c0114dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114dbe:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0114dc5:	eb 0d                	jmp    c0114dd4 <strtol+0xad>
    }
    else if (base == 0) {
c0114dc7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114dcb:	75 07                	jne    c0114dd4 <strtol+0xad>
        base = 10;
c0114dcd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0114dd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dd7:	0f b6 00             	movzbl (%eax),%eax
c0114dda:	3c 2f                	cmp    $0x2f,%al
c0114ddc:	7e 1b                	jle    c0114df9 <strtol+0xd2>
c0114dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0114de1:	0f b6 00             	movzbl (%eax),%eax
c0114de4:	3c 39                	cmp    $0x39,%al
c0114de6:	7f 11                	jg     c0114df9 <strtol+0xd2>
            dig = *s - '0';
c0114de8:	8b 45 08             	mov    0x8(%ebp),%eax
c0114deb:	0f b6 00             	movzbl (%eax),%eax
c0114dee:	0f be c0             	movsbl %al,%eax
c0114df1:	83 e8 30             	sub    $0x30,%eax
c0114df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114df7:	eb 48                	jmp    c0114e41 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c0114df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dfc:	0f b6 00             	movzbl (%eax),%eax
c0114dff:	3c 60                	cmp    $0x60,%al
c0114e01:	7e 1b                	jle    c0114e1e <strtol+0xf7>
c0114e03:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e06:	0f b6 00             	movzbl (%eax),%eax
c0114e09:	3c 7a                	cmp    $0x7a,%al
c0114e0b:	7f 11                	jg     c0114e1e <strtol+0xf7>
            dig = *s - 'a' + 10;
c0114e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e10:	0f b6 00             	movzbl (%eax),%eax
c0114e13:	0f be c0             	movsbl %al,%eax
c0114e16:	83 e8 57             	sub    $0x57,%eax
c0114e19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114e1c:	eb 23                	jmp    c0114e41 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0114e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e21:	0f b6 00             	movzbl (%eax),%eax
c0114e24:	3c 40                	cmp    $0x40,%al
c0114e26:	7e 3d                	jle    c0114e65 <strtol+0x13e>
c0114e28:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e2b:	0f b6 00             	movzbl (%eax),%eax
c0114e2e:	3c 5a                	cmp    $0x5a,%al
c0114e30:	7f 33                	jg     c0114e65 <strtol+0x13e>
            dig = *s - 'A' + 10;
c0114e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e35:	0f b6 00             	movzbl (%eax),%eax
c0114e38:	0f be c0             	movsbl %al,%eax
c0114e3b:	83 e8 37             	sub    $0x37,%eax
c0114e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0114e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114e44:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114e47:	7c 02                	jl     c0114e4b <strtol+0x124>
            break;
c0114e49:	eb 1a                	jmp    c0114e65 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c0114e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114e52:	0f af 45 10          	imul   0x10(%ebp),%eax
c0114e56:	89 c2                	mov    %eax,%edx
c0114e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114e5b:	01 d0                	add    %edx,%eax
c0114e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0114e60:	e9 6f ff ff ff       	jmp    c0114dd4 <strtol+0xad>

    if (endptr) {
c0114e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114e69:	74 08                	je     c0114e73 <strtol+0x14c>
        *endptr = (char *) s;
c0114e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e6e:	8b 55 08             	mov    0x8(%ebp),%edx
c0114e71:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0114e73:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0114e77:	74 07                	je     c0114e80 <strtol+0x159>
c0114e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114e7c:	f7 d8                	neg    %eax
c0114e7e:	eb 03                	jmp    c0114e83 <strtol+0x15c>
c0114e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0114e83:	c9                   	leave  
c0114e84:	c3                   	ret    

c0114e85 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0114e85:	55                   	push   %ebp
c0114e86:	89 e5                	mov    %esp,%ebp
c0114e88:	57                   	push   %edi
c0114e89:	83 ec 24             	sub    $0x24,%esp
c0114e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e8f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0114e92:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0114e96:	8b 55 08             	mov    0x8(%ebp),%edx
c0114e99:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0114e9c:	88 45 f7             	mov    %al,-0x9(%ebp)
c0114e9f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0114ea5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0114ea8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0114eac:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0114eaf:	89 d7                	mov    %edx,%edi
c0114eb1:	f3 aa                	rep stos %al,%es:(%edi)
c0114eb3:	89 fa                	mov    %edi,%edx
c0114eb5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0114eb8:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0114ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0114ebe:	83 c4 24             	add    $0x24,%esp
c0114ec1:	5f                   	pop    %edi
c0114ec2:	5d                   	pop    %ebp
c0114ec3:	c3                   	ret    

c0114ec4 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0114ec4:	55                   	push   %ebp
c0114ec5:	89 e5                	mov    %esp,%ebp
c0114ec7:	57                   	push   %edi
c0114ec8:	56                   	push   %esi
c0114ec9:	53                   	push   %ebx
c0114eca:	83 ec 30             	sub    $0x30,%esp
c0114ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114ed9:	8b 45 10             	mov    0x10(%ebp),%eax
c0114edc:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0114edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ee2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0114ee5:	73 42                	jae    c0114f29 <memmove+0x65>
c0114ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114eea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114ef0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0114ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114efc:	c1 e8 02             	shr    $0x2,%eax
c0114eff:	89 c1                	mov    %eax,%ecx
    asm volatile (
c0114f01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114f04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114f07:	89 d7                	mov    %edx,%edi
c0114f09:	89 c6                	mov    %eax,%esi
c0114f0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0114f0d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0114f10:	83 e1 03             	and    $0x3,%ecx
c0114f13:	74 02                	je     c0114f17 <memmove+0x53>
c0114f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0114f17:	89 f0                	mov    %esi,%eax
c0114f19:	89 fa                	mov    %edi,%edx
c0114f1b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0114f1e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0114f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
        : "memory");
    return dst;
c0114f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114f27:	eb 36                	jmp    c0114f5f <memmove+0x9b>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0114f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114f32:	01 c2                	add    %eax,%edx
c0114f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114f37:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0114f3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f3d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
    asm volatile (
c0114f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114f43:	89 c1                	mov    %eax,%ecx
c0114f45:	89 d8                	mov    %ebx,%eax
c0114f47:	89 d6                	mov    %edx,%esi
c0114f49:	89 c7                	mov    %eax,%edi
c0114f4b:	fd                   	std    
c0114f4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0114f4e:	fc                   	cld    
c0114f4f:	89 f8                	mov    %edi,%eax
c0114f51:	89 f2                	mov    %esi,%edx
c0114f53:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0114f56:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0114f59:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return dst;
c0114f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0114f5f:	83 c4 30             	add    $0x30,%esp
c0114f62:	5b                   	pop    %ebx
c0114f63:	5e                   	pop    %esi
c0114f64:	5f                   	pop    %edi
c0114f65:	5d                   	pop    %ebp
c0114f66:	c3                   	ret    

c0114f67 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0114f67:	55                   	push   %ebp
c0114f68:	89 e5                	mov    %esp,%ebp
c0114f6a:	57                   	push   %edi
c0114f6b:	56                   	push   %esi
c0114f6c:	83 ec 20             	sub    $0x20,%esp
c0114f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f72:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114f75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f7b:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0114f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114f84:	c1 e8 02             	shr    $0x2,%eax
c0114f87:	89 c1                	mov    %eax,%ecx
    asm volatile (
c0114f89:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f8f:	89 d7                	mov    %edx,%edi
c0114f91:	89 c6                	mov    %eax,%esi
c0114f93:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0114f95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0114f98:	83 e1 03             	and    $0x3,%ecx
c0114f9b:	74 02                	je     c0114f9f <memcpy+0x38>
c0114f9d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0114f9f:	89 f0                	mov    %esi,%eax
c0114fa1:	89 fa                	mov    %edi,%edx
c0114fa3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0114fa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0114fa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return dst;
c0114fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0114faf:	83 c4 20             	add    $0x20,%esp
c0114fb2:	5e                   	pop    %esi
c0114fb3:	5f                   	pop    %edi
c0114fb4:	5d                   	pop    %ebp
c0114fb5:	c3                   	ret    

c0114fb6 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0114fb6:	55                   	push   %ebp
c0114fb7:	89 e5                	mov    %esp,%ebp
c0114fb9:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0114fbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0114fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0114fc8:	eb 30                	jmp    c0114ffa <memcmp+0x44>
        if (*s1 != *s2) {
c0114fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114fcd:	0f b6 10             	movzbl (%eax),%edx
c0114fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114fd3:	0f b6 00             	movzbl (%eax),%eax
c0114fd6:	38 c2                	cmp    %al,%dl
c0114fd8:	74 18                	je     c0114ff2 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0114fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114fdd:	0f b6 00             	movzbl (%eax),%eax
c0114fe0:	0f b6 d0             	movzbl %al,%edx
c0114fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114fe6:	0f b6 00             	movzbl (%eax),%eax
c0114fe9:	0f b6 c0             	movzbl %al,%eax
c0114fec:	29 c2                	sub    %eax,%edx
c0114fee:	89 d0                	mov    %edx,%eax
c0114ff0:	eb 1a                	jmp    c011500c <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0114ff2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0114ff6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (n -- > 0) {
c0114ffa:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0115000:	89 55 10             	mov    %edx,0x10(%ebp)
c0115003:	85 c0                	test   %eax,%eax
c0115005:	75 c3                	jne    c0114fca <memcmp+0x14>
    }
    return 0;
c0115007:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011500c:	c9                   	leave  
c011500d:	c3                   	ret    

c011500e <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c011500e:	55                   	push   %ebp
c011500f:	89 e5                	mov    %esp,%ebp
c0115011:	83 ec 58             	sub    $0x58,%esp
c0115014:	8b 45 14             	mov    0x14(%ebp),%eax
c0115017:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011501a:	8b 45 18             	mov    0x18(%ebp),%eax
c011501d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0115020:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0115023:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0115026:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0115029:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c011502c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011502f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0115032:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115035:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115038:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011503b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c011503e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115041:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0115048:	74 1c                	je     c0115066 <printnum+0x58>
c011504a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011504d:	ba 00 00 00 00       	mov    $0x0,%edx
c0115052:	f7 75 e4             	divl   -0x1c(%ebp)
c0115055:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0115058:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011505b:	ba 00 00 00 00       	mov    $0x0,%edx
c0115060:	f7 75 e4             	divl   -0x1c(%ebp)
c0115063:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115066:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115069:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011506c:	f7 75 e4             	divl   -0x1c(%ebp)
c011506f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115072:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0115075:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115078:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011507b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011507e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0115081:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0115084:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0115087:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011508a:	ba 00 00 00 00       	mov    $0x0,%edx
c011508f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0115092:	77 64                	ja     c01150f8 <printnum+0xea>
c0115094:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0115097:	72 05                	jb     c011509e <printnum+0x90>
c0115099:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c011509c:	77 5a                	ja     c01150f8 <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c011509e:	8b 45 20             	mov    0x20(%ebp),%eax
c01150a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01150a4:	8b 45 24             	mov    0x24(%ebp),%eax
c01150a7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01150ab:	89 54 24 18          	mov    %edx,0x18(%esp)
c01150af:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01150b2:	89 44 24 14          	mov    %eax,0x14(%esp)
c01150b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01150b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01150bc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01150c0:	89 54 24 10          	mov    %edx,0x10(%esp)
c01150c4:	8b 45 10             	mov    0x10(%ebp),%eax
c01150c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01150d5:	89 04 24             	mov    %eax,(%esp)
c01150d8:	e8 31 ff ff ff       	call   c011500e <printnum>
c01150dd:	eb 23                	jmp    c0115102 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c01150df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01150e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150ed:	8b 45 24             	mov    0x24(%ebp),%eax
c01150f0:	89 04 24             	mov    %eax,(%esp)
c01150f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01150f6:	ff d0                	call   *%eax
        while (-- width > 0)
c01150f8:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c01150fc:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0115100:	7f dd                	jg     c01150df <printnum+0xd1>
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0115102:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0115105:	05 e4 9d 11 c0       	add    $0xc0119de4,%eax
c011510a:	0f b6 00             	movzbl (%eax),%eax
c011510d:	0f be c0             	movsbl %al,%eax
c0115110:	8b 55 0c             	mov    0xc(%ebp),%edx
c0115113:	89 54 24 08          	mov    %edx,0x8(%esp)
c0115117:	8b 55 10             	mov    0x10(%ebp),%edx
c011511a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011511e:	89 04 24             	mov    %eax,(%esp)
c0115121:	8b 45 08             	mov    0x8(%ebp),%eax
c0115124:	ff d0                	call   *%eax
}
c0115126:	c9                   	leave  
c0115127:	c3                   	ret    

c0115128 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0115128:	55                   	push   %ebp
c0115129:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c011512b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011512f:	7e 14                	jle    c0115145 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0115131:	8b 45 08             	mov    0x8(%ebp),%eax
c0115134:	8b 00                	mov    (%eax),%eax
c0115136:	8d 48 08             	lea    0x8(%eax),%ecx
c0115139:	8b 55 08             	mov    0x8(%ebp),%edx
c011513c:	89 0a                	mov    %ecx,(%edx)
c011513e:	8b 50 04             	mov    0x4(%eax),%edx
c0115141:	8b 00                	mov    (%eax),%eax
c0115143:	eb 30                	jmp    c0115175 <getuint+0x4d>
    }
    else if (lflag) {
c0115145:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115149:	74 16                	je     c0115161 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c011514b:	8b 45 08             	mov    0x8(%ebp),%eax
c011514e:	8b 00                	mov    (%eax),%eax
c0115150:	8d 48 04             	lea    0x4(%eax),%ecx
c0115153:	8b 55 08             	mov    0x8(%ebp),%edx
c0115156:	89 0a                	mov    %ecx,(%edx)
c0115158:	8b 00                	mov    (%eax),%eax
c011515a:	ba 00 00 00 00       	mov    $0x0,%edx
c011515f:	eb 14                	jmp    c0115175 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0115161:	8b 45 08             	mov    0x8(%ebp),%eax
c0115164:	8b 00                	mov    (%eax),%eax
c0115166:	8d 48 04             	lea    0x4(%eax),%ecx
c0115169:	8b 55 08             	mov    0x8(%ebp),%edx
c011516c:	89 0a                	mov    %ecx,(%edx)
c011516e:	8b 00                	mov    (%eax),%eax
c0115170:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0115175:	5d                   	pop    %ebp
c0115176:	c3                   	ret    

c0115177 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0115177:	55                   	push   %ebp
c0115178:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c011517a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011517e:	7e 14                	jle    c0115194 <getint+0x1d>
        return va_arg(*ap, long long);
c0115180:	8b 45 08             	mov    0x8(%ebp),%eax
c0115183:	8b 00                	mov    (%eax),%eax
c0115185:	8d 48 08             	lea    0x8(%eax),%ecx
c0115188:	8b 55 08             	mov    0x8(%ebp),%edx
c011518b:	89 0a                	mov    %ecx,(%edx)
c011518d:	8b 50 04             	mov    0x4(%eax),%edx
c0115190:	8b 00                	mov    (%eax),%eax
c0115192:	eb 28                	jmp    c01151bc <getint+0x45>
    }
    else if (lflag) {
c0115194:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115198:	74 12                	je     c01151ac <getint+0x35>
        return va_arg(*ap, long);
c011519a:	8b 45 08             	mov    0x8(%ebp),%eax
c011519d:	8b 00                	mov    (%eax),%eax
c011519f:	8d 48 04             	lea    0x4(%eax),%ecx
c01151a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01151a5:	89 0a                	mov    %ecx,(%edx)
c01151a7:	8b 00                	mov    (%eax),%eax
c01151a9:	99                   	cltd   
c01151aa:	eb 10                	jmp    c01151bc <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c01151ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01151af:	8b 00                	mov    (%eax),%eax
c01151b1:	8d 48 04             	lea    0x4(%eax),%ecx
c01151b4:	8b 55 08             	mov    0x8(%ebp),%edx
c01151b7:	89 0a                	mov    %ecx,(%edx)
c01151b9:	8b 00                	mov    (%eax),%eax
c01151bb:	99                   	cltd   
    }
}
c01151bc:	5d                   	pop    %ebp
c01151bd:	c3                   	ret    

c01151be <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c01151be:	55                   	push   %ebp
c01151bf:	89 e5                	mov    %esp,%ebp
c01151c1:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c01151c4:	8d 45 18             	lea    0x18(%ebp),%eax
c01151c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c01151ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151cd:	89 44 24 10          	mov    %eax,0x10(%esp)
c01151d1:	8b 45 14             	mov    0x14(%ebp),%eax
c01151d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01151d8:	8b 45 10             	mov    0x10(%ebp),%eax
c01151db:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01151e9:	89 04 24             	mov    %eax,(%esp)
c01151ec:	e8 02 00 00 00       	call   c01151f3 <vprintfmt>
    va_end(ap);
}
c01151f1:	c9                   	leave  
c01151f2:	c3                   	ret    

c01151f3 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c01151f3:	55                   	push   %ebp
c01151f4:	89 e5                	mov    %esp,%ebp
c01151f6:	56                   	push   %esi
c01151f7:	53                   	push   %ebx
c01151f8:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c01151fb:	eb 1f                	jmp    c011521c <vprintfmt+0x29>
            if (ch == '\0') {
c01151fd:	85 db                	test   %ebx,%ebx
c01151ff:	75 05                	jne    c0115206 <vprintfmt+0x13>
                return;
c0115201:	e9 33 04 00 00       	jmp    c0115639 <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0115206:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115209:	89 44 24 08          	mov    %eax,0x8(%esp)
c011520d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115210:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115214:	89 1c 24             	mov    %ebx,(%esp)
c0115217:	8b 45 08             	mov    0x8(%ebp),%eax
c011521a:	ff d0                	call   *%eax
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c011521c:	8b 45 14             	mov    0x14(%ebp),%eax
c011521f:	8d 50 01             	lea    0x1(%eax),%edx
c0115222:	89 55 14             	mov    %edx,0x14(%ebp)
c0115225:	0f b6 00             	movzbl (%eax),%eax
c0115228:	0f b6 d8             	movzbl %al,%ebx
c011522b:	83 fb 25             	cmp    $0x25,%ebx
c011522e:	75 cd                	jne    c01151fd <vprintfmt+0xa>
        }

        // Process a %-escape sequence
        char padc = ' ';
c0115230:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0115234:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c011523b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011523e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0115241:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0115248:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011524b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c011524e:	8b 45 14             	mov    0x14(%ebp),%eax
c0115251:	8d 50 01             	lea    0x1(%eax),%edx
c0115254:	89 55 14             	mov    %edx,0x14(%ebp)
c0115257:	0f b6 00             	movzbl (%eax),%eax
c011525a:	0f b6 d8             	movzbl %al,%ebx
c011525d:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0115260:	83 f8 55             	cmp    $0x55,%eax
c0115263:	0f 87 98 03 00 00    	ja     c0115601 <vprintfmt+0x40e>
c0115269:	8b 04 85 08 9e 11 c0 	mov    -0x3fee61f8(,%eax,4),%eax
c0115270:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0115272:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0115276:	eb d6                	jmp    c011524e <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0115278:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c011527c:	eb d0                	jmp    c011524e <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c011527e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0115285:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115288:	89 d0                	mov    %edx,%eax
c011528a:	c1 e0 02             	shl    $0x2,%eax
c011528d:	01 d0                	add    %edx,%eax
c011528f:	01 c0                	add    %eax,%eax
c0115291:	01 d8                	add    %ebx,%eax
c0115293:	83 e8 30             	sub    $0x30,%eax
c0115296:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0115299:	8b 45 14             	mov    0x14(%ebp),%eax
c011529c:	0f b6 00             	movzbl (%eax),%eax
c011529f:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c01152a2:	83 fb 2f             	cmp    $0x2f,%ebx
c01152a5:	7e 0b                	jle    c01152b2 <vprintfmt+0xbf>
c01152a7:	83 fb 39             	cmp    $0x39,%ebx
c01152aa:	7f 06                	jg     c01152b2 <vprintfmt+0xbf>
            for (precision = 0; ; ++ fmt) {
c01152ac:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                    break;
                }
            }
c01152b0:	eb d3                	jmp    c0115285 <vprintfmt+0x92>
            goto process_precision;
c01152b2:	eb 33                	jmp    c01152e7 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c01152b4:	8b 45 18             	mov    0x18(%ebp),%eax
c01152b7:	8d 50 04             	lea    0x4(%eax),%edx
c01152ba:	89 55 18             	mov    %edx,0x18(%ebp)
c01152bd:	8b 00                	mov    (%eax),%eax
c01152bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c01152c2:	eb 23                	jmp    c01152e7 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c01152c4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01152c8:	79 0c                	jns    c01152d6 <vprintfmt+0xe3>
                width = 0;
c01152ca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c01152d1:	e9 78 ff ff ff       	jmp    c011524e <vprintfmt+0x5b>
c01152d6:	e9 73 ff ff ff       	jmp    c011524e <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c01152db:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c01152e2:	e9 67 ff ff ff       	jmp    c011524e <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c01152e7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01152eb:	79 12                	jns    c01152ff <vprintfmt+0x10c>
                width = precision, precision = -1;
c01152ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01152f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01152f3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c01152fa:	e9 4f ff ff ff       	jmp    c011524e <vprintfmt+0x5b>
c01152ff:	e9 4a ff ff ff       	jmp    c011524e <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0115304:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0115308:	e9 41 ff ff ff       	jmp    c011524e <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c011530d:	8b 45 18             	mov    0x18(%ebp),%eax
c0115310:	8d 50 04             	lea    0x4(%eax),%edx
c0115313:	89 55 18             	mov    %edx,0x18(%ebp)
c0115316:	8b 00                	mov    (%eax),%eax
c0115318:	8b 55 0c             	mov    0xc(%ebp),%edx
c011531b:	89 54 24 08          	mov    %edx,0x8(%esp)
c011531f:	8b 55 10             	mov    0x10(%ebp),%edx
c0115322:	89 54 24 04          	mov    %edx,0x4(%esp)
c0115326:	89 04 24             	mov    %eax,(%esp)
c0115329:	8b 45 08             	mov    0x8(%ebp),%eax
c011532c:	ff d0                	call   *%eax
            break;
c011532e:	e9 00 03 00 00       	jmp    c0115633 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0115333:	8b 45 18             	mov    0x18(%ebp),%eax
c0115336:	8d 50 04             	lea    0x4(%eax),%edx
c0115339:	89 55 18             	mov    %edx,0x18(%ebp)
c011533c:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c011533e:	85 db                	test   %ebx,%ebx
c0115340:	79 02                	jns    c0115344 <vprintfmt+0x151>
                err = -err;
c0115342:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0115344:	83 fb 18             	cmp    $0x18,%ebx
c0115347:	7f 0b                	jg     c0115354 <vprintfmt+0x161>
c0115349:	8b 34 9d 80 9d 11 c0 	mov    -0x3fee6280(,%ebx,4),%esi
c0115350:	85 f6                	test   %esi,%esi
c0115352:	75 2a                	jne    c011537e <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0115354:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0115358:	c7 44 24 0c f5 9d 11 	movl   $0xc0119df5,0xc(%esp)
c011535f:	c0 
c0115360:	8b 45 10             	mov    0x10(%ebp),%eax
c0115363:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115367:	8b 45 0c             	mov    0xc(%ebp),%eax
c011536a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011536e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115371:	89 04 24             	mov    %eax,(%esp)
c0115374:	e8 45 fe ff ff       	call   c01151be <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0115379:	e9 b5 02 00 00       	jmp    c0115633 <vprintfmt+0x440>
                printfmt(putch, fd, putdat, "%s", p);
c011537e:	89 74 24 10          	mov    %esi,0x10(%esp)
c0115382:	c7 44 24 0c fe 9d 11 	movl   $0xc0119dfe,0xc(%esp)
c0115389:	c0 
c011538a:	8b 45 10             	mov    0x10(%ebp),%eax
c011538d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115391:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115394:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115398:	8b 45 08             	mov    0x8(%ebp),%eax
c011539b:	89 04 24             	mov    %eax,(%esp)
c011539e:	e8 1b fe ff ff       	call   c01151be <printfmt>
            break;
c01153a3:	e9 8b 02 00 00       	jmp    c0115633 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c01153a8:	8b 45 18             	mov    0x18(%ebp),%eax
c01153ab:	8d 50 04             	lea    0x4(%eax),%edx
c01153ae:	89 55 18             	mov    %edx,0x18(%ebp)
c01153b1:	8b 30                	mov    (%eax),%esi
c01153b3:	85 f6                	test   %esi,%esi
c01153b5:	75 05                	jne    c01153bc <vprintfmt+0x1c9>
                p = "(null)";
c01153b7:	be 01 9e 11 c0       	mov    $0xc0119e01,%esi
            }
            if (width > 0 && padc != '-') {
c01153bc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01153c0:	7e 45                	jle    c0115407 <vprintfmt+0x214>
c01153c2:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c01153c6:	74 3f                	je     c0115407 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c01153c8:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c01153cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01153ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01153d2:	89 34 24             	mov    %esi,(%esp)
c01153d5:	e8 7d f7 ff ff       	call   c0114b57 <strnlen>
c01153da:	29 c3                	sub    %eax,%ebx
c01153dc:	89 d8                	mov    %ebx,%eax
c01153de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01153e1:	eb 1e                	jmp    c0115401 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c01153e3:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c01153e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01153ea:	89 54 24 08          	mov    %edx,0x8(%esp)
c01153ee:	8b 55 10             	mov    0x10(%ebp),%edx
c01153f1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01153f5:	89 04 24             	mov    %eax,(%esp)
c01153f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01153fb:	ff d0                	call   *%eax
                for (width -= strnlen(p, precision); width > 0; width --) {
c01153fd:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0115401:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115405:	7f dc                	jg     c01153e3 <vprintfmt+0x1f0>
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0115407:	eb 46                	jmp    c011544f <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0115409:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011540d:	74 26                	je     c0115435 <vprintfmt+0x242>
c011540f:	83 fb 1f             	cmp    $0x1f,%ebx
c0115412:	7e 05                	jle    c0115419 <vprintfmt+0x226>
c0115414:	83 fb 7e             	cmp    $0x7e,%ebx
c0115417:	7e 1c                	jle    c0115435 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0115419:	8b 45 0c             	mov    0xc(%ebp),%eax
c011541c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115420:	8b 45 10             	mov    0x10(%ebp),%eax
c0115423:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115427:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c011542e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115431:	ff d0                	call   *%eax
c0115433:	eb 16                	jmp    c011544b <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0115435:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115438:	89 44 24 08          	mov    %eax,0x8(%esp)
c011543c:	8b 45 10             	mov    0x10(%ebp),%eax
c011543f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115443:	89 1c 24             	mov    %ebx,(%esp)
c0115446:	8b 45 08             	mov    0x8(%ebp),%eax
c0115449:	ff d0                	call   *%eax
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c011544b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011544f:	89 f0                	mov    %esi,%eax
c0115451:	8d 70 01             	lea    0x1(%eax),%esi
c0115454:	0f b6 00             	movzbl (%eax),%eax
c0115457:	0f be d8             	movsbl %al,%ebx
c011545a:	85 db                	test   %ebx,%ebx
c011545c:	74 10                	je     c011546e <vprintfmt+0x27b>
c011545e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0115462:	78 a5                	js     c0115409 <vprintfmt+0x216>
c0115464:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0115468:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011546c:	79 9b                	jns    c0115409 <vprintfmt+0x216>
                }
            }
            for (; width > 0; width --) {
c011546e:	eb 1e                	jmp    c011548e <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0115470:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115473:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115477:	8b 45 10             	mov    0x10(%ebp),%eax
c011547a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011547e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0115485:	8b 45 08             	mov    0x8(%ebp),%eax
c0115488:	ff d0                	call   *%eax
            for (; width > 0; width --) {
c011548a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011548e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115492:	7f dc                	jg     c0115470 <vprintfmt+0x27d>
            }
            break;
c0115494:	e9 9a 01 00 00       	jmp    c0115633 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0115499:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011549c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01154a0:	8d 45 18             	lea    0x18(%ebp),%eax
c01154a3:	89 04 24             	mov    %eax,(%esp)
c01154a6:	e8 cc fc ff ff       	call   c0115177 <getint>
c01154ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01154ae:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c01154b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01154b7:	85 d2                	test   %edx,%edx
c01154b9:	79 2d                	jns    c01154e8 <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c01154bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154be:	89 44 24 08          	mov    %eax,0x8(%esp)
c01154c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01154c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01154c9:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c01154d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01154d3:	ff d0                	call   *%eax
                num = -(long long)num;
c01154d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01154db:	f7 d8                	neg    %eax
c01154dd:	83 d2 00             	adc    $0x0,%edx
c01154e0:	f7 da                	neg    %edx
c01154e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01154e5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01154e8:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01154ef:	e9 b6 00 00 00       	jmp    c01155aa <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c01154f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01154f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01154fb:	8d 45 18             	lea    0x18(%ebp),%eax
c01154fe:	89 04 24             	mov    %eax,(%esp)
c0115501:	e8 22 fc ff ff       	call   c0115128 <getuint>
c0115506:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115509:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c011550c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0115513:	e9 92 00 00 00       	jmp    c01155aa <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0115518:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011551b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011551f:	8d 45 18             	lea    0x18(%ebp),%eax
c0115522:	89 04 24             	mov    %eax,(%esp)
c0115525:	e8 fe fb ff ff       	call   c0115128 <getuint>
c011552a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011552d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0115530:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0115537:	eb 71                	jmp    c01155aa <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0115539:	8b 45 0c             	mov    0xc(%ebp),%eax
c011553c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115540:	8b 45 10             	mov    0x10(%ebp),%eax
c0115543:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115547:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c011554e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115551:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0115553:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115556:	89 44 24 08          	mov    %eax,0x8(%esp)
c011555a:	8b 45 10             	mov    0x10(%ebp),%eax
c011555d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115561:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0115568:	8b 45 08             	mov    0x8(%ebp),%eax
c011556b:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c011556d:	8b 45 18             	mov    0x18(%ebp),%eax
c0115570:	8d 50 04             	lea    0x4(%eax),%edx
c0115573:	89 55 18             	mov    %edx,0x18(%ebp)
c0115576:	8b 00                	mov    (%eax),%eax
c0115578:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011557b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0115582:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0115589:	eb 1f                	jmp    c01155aa <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c011558b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011558e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115592:	8d 45 18             	lea    0x18(%ebp),%eax
c0115595:	89 04 24             	mov    %eax,(%esp)
c0115598:	e8 8b fb ff ff       	call   c0115128 <getuint>
c011559d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01155a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c01155a3:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c01155aa:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c01155ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01155b1:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c01155b5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01155b8:	89 54 24 18          	mov    %edx,0x18(%esp)
c01155bc:	89 44 24 14          	mov    %eax,0x14(%esp)
c01155c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01155c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01155c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01155ca:	89 54 24 10          	mov    %edx,0x10(%esp)
c01155ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01155d1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01155d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01155dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01155df:	89 04 24             	mov    %eax,(%esp)
c01155e2:	e8 27 fa ff ff       	call   c011500e <printnum>
            break;
c01155e7:	eb 4a                	jmp    c0115633 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01155e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155ec:	89 44 24 08          	mov    %eax,0x8(%esp)
c01155f0:	8b 45 10             	mov    0x10(%ebp),%eax
c01155f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01155f7:	89 1c 24             	mov    %ebx,(%esp)
c01155fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01155fd:	ff d0                	call   *%eax
            break;
c01155ff:	eb 32                	jmp    c0115633 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0115601:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115604:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115608:	8b 45 10             	mov    0x10(%ebp),%eax
c011560b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011560f:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0115616:	8b 45 08             	mov    0x8(%ebp),%eax
c0115619:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c011561b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011561f:	eb 04                	jmp    c0115625 <vprintfmt+0x432>
c0115621:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115625:	8b 45 14             	mov    0x14(%ebp),%eax
c0115628:	83 e8 01             	sub    $0x1,%eax
c011562b:	0f b6 00             	movzbl (%eax),%eax
c011562e:	3c 25                	cmp    $0x25,%al
c0115630:	75 ef                	jne    c0115621 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0115632:	90                   	nop
        }
    }
c0115633:	90                   	nop
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0115634:	e9 e3 fb ff ff       	jmp    c011521c <vprintfmt+0x29>
}
c0115639:	83 c4 40             	add    $0x40,%esp
c011563c:	5b                   	pop    %ebx
c011563d:	5e                   	pop    %esi
c011563e:	5d                   	pop    %ebp
c011563f:	c3                   	ret    

c0115640 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0115640:	55                   	push   %ebp
c0115641:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0115643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115646:	8b 40 08             	mov    0x8(%eax),%eax
c0115649:	8d 50 01             	lea    0x1(%eax),%edx
c011564c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011564f:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0115652:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115655:	8b 10                	mov    (%eax),%edx
c0115657:	8b 45 0c             	mov    0xc(%ebp),%eax
c011565a:	8b 40 04             	mov    0x4(%eax),%eax
c011565d:	39 c2                	cmp    %eax,%edx
c011565f:	73 12                	jae    c0115673 <sprintputch+0x33>
        *b->buf ++ = ch;
c0115661:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115664:	8b 00                	mov    (%eax),%eax
c0115666:	8d 48 01             	lea    0x1(%eax),%ecx
c0115669:	8b 55 0c             	mov    0xc(%ebp),%edx
c011566c:	89 0a                	mov    %ecx,(%edx)
c011566e:	8b 55 08             	mov    0x8(%ebp),%edx
c0115671:	88 10                	mov    %dl,(%eax)
    }
}
c0115673:	5d                   	pop    %ebp
c0115674:	c3                   	ret    

c0115675 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0115675:	55                   	push   %ebp
c0115676:	89 e5                	mov    %esp,%ebp
c0115678:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c011567b:	8d 45 14             	lea    0x14(%ebp),%eax
c011567e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0115681:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115684:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115688:	8b 45 10             	mov    0x10(%ebp),%eax
c011568b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011568f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115692:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115696:	8b 45 08             	mov    0x8(%ebp),%eax
c0115699:	89 04 24             	mov    %eax,(%esp)
c011569c:	e8 08 00 00 00       	call   c01156a9 <vsnprintf>
c01156a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01156a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01156a7:	c9                   	leave  
c01156a8:	c3                   	ret    

c01156a9 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01156a9:	55                   	push   %ebp
c01156aa:	89 e5                	mov    %esp,%ebp
c01156ac:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01156af:	8b 45 08             	mov    0x8(%ebp),%eax
c01156b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01156b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01156b8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01156bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01156be:	01 d0                	add    %edx,%eax
c01156c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01156c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01156ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01156ce:	74 0a                	je     c01156da <vsnprintf+0x31>
c01156d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01156d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01156d6:	39 c2                	cmp    %eax,%edx
c01156d8:	76 07                	jbe    c01156e1 <vsnprintf+0x38>
        return -E_INVAL;
c01156da:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01156df:	eb 32                	jmp    c0115713 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01156e1:	8b 45 14             	mov    0x14(%ebp),%eax
c01156e4:	89 44 24 10          	mov    %eax,0x10(%esp)
c01156e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01156eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01156ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01156f2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01156f6:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c01156fd:	ff 
c01156fe:	c7 04 24 40 56 11 c0 	movl   $0xc0115640,(%esp)
c0115705:	e8 e9 fa ff ff       	call   c01151f3 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c011570a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011570d:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0115710:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115713:	c9                   	leave  
c0115714:	c3                   	ret    

c0115715 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0115715:	55                   	push   %ebp
c0115716:	89 e5                	mov    %esp,%ebp
c0115718:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c011571b:	8b 45 08             	mov    0x8(%ebp),%eax
c011571e:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0115724:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0115727:	b8 20 00 00 00       	mov    $0x20,%eax
c011572c:	2b 45 0c             	sub    0xc(%ebp),%eax
c011572f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0115732:	89 c1                	mov    %eax,%ecx
c0115734:	d3 ea                	shr    %cl,%edx
c0115736:	89 d0                	mov    %edx,%eax
}
c0115738:	c9                   	leave  
c0115739:	c3                   	ret    

c011573a <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c011573a:	55                   	push   %ebp
c011573b:	89 e5                	mov    %esp,%ebp
c011573d:	57                   	push   %edi
c011573e:	56                   	push   %esi
c011573f:	53                   	push   %ebx
c0115740:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115743:	a1 a8 fe 14 c0       	mov    0xc014fea8,%eax
c0115748:	8b 15 ac fe 14 c0    	mov    0xc014feac,%edx
c011574e:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0115754:	6b f0 05             	imul   $0x5,%eax,%esi
c0115757:	01 f7                	add    %esi,%edi
c0115759:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c011575e:	f7 e6                	mul    %esi
c0115760:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0115763:	89 f2                	mov    %esi,%edx
c0115765:	83 c0 0b             	add    $0xb,%eax
c0115768:	83 d2 00             	adc    $0x0,%edx
c011576b:	89 c7                	mov    %eax,%edi
c011576d:	83 e7 ff             	and    $0xffffffff,%edi
c0115770:	89 f9                	mov    %edi,%ecx
c0115772:	0f b7 da             	movzwl %dx,%ebx
c0115775:	89 0d a8 fe 14 c0    	mov    %ecx,0xc014fea8
c011577b:	89 1d ac fe 14 c0    	mov    %ebx,0xc014feac
    unsigned long long result = (next >> 12);
c0115781:	a1 a8 fe 14 c0       	mov    0xc014fea8,%eax
c0115786:	8b 15 ac fe 14 c0    	mov    0xc014feac,%edx
c011578c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0115790:	c1 ea 0c             	shr    $0xc,%edx
c0115793:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115796:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115799:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c01157a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01157a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01157a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01157a9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01157ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157af:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01157b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01157b6:	74 1c                	je     c01157d4 <rand+0x9a>
c01157b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157bb:	ba 00 00 00 00       	mov    $0x0,%edx
c01157c0:	f7 75 dc             	divl   -0x24(%ebp)
c01157c3:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01157c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157c9:	ba 00 00 00 00       	mov    $0x0,%edx
c01157ce:	f7 75 dc             	divl   -0x24(%ebp)
c01157d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01157d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01157d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01157da:	f7 75 dc             	divl   -0x24(%ebp)
c01157dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01157e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01157e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01157e6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01157e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01157ec:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01157ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01157f2:	83 c4 24             	add    $0x24,%esp
c01157f5:	5b                   	pop    %ebx
c01157f6:	5e                   	pop    %esi
c01157f7:	5f                   	pop    %edi
c01157f8:	5d                   	pop    %ebp
c01157f9:	c3                   	ret    

c01157fa <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01157fa:	55                   	push   %ebp
c01157fb:	89 e5                	mov    %esp,%ebp
    next = seed;
c01157fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0115800:	ba 00 00 00 00       	mov    $0x0,%edx
c0115805:	a3 a8 fe 14 c0       	mov    %eax,0xc014fea8
c011580a:	89 15 ac fe 14 c0    	mov    %edx,0xc014feac
}
c0115810:	5d                   	pop    %ebp
c0115811:	c3                   	ret    
